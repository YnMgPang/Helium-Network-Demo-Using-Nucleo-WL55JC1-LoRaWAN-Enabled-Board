
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ee0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  08011018  08011018  00021018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011eb0  08011eb0  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08011eb0  08011eb0  00021eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011eb8  08011eb8  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011eb8  08011eb8  00021eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08011ec0  08011ec0  00021ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08011ec8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b18  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001508  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  20001620  20001620  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001620  20001620  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   00053cd6  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b359  00000000  00000000  000922c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00023270  00000000  00000000  0009d619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002b18  00000000  00000000  000c0890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002d18  00000000  00000000  000c33a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002a7f1  00000000  00000000  000c60c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004893d  00000000  00000000  000f08b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000dd584  00000000  00000000  001391ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  00216772  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000076e0  00000000  00000000  002167c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000118 	.word	0x20000118
 8000154:	00000000 	.word	0x00000000
 8000158:	08011000 	.word	0x08011000

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000011c 	.word	0x2000011c
 8000174:	08011000 	.word	0x08011000

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14d      	bne.n	8000c84 <__udivmoddi4+0xac>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d968      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b152      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf8:	f1c2 0120 	rsb	r1, r2, #32
 8000bfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	ea41 0803 	orr.w	r8, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fbb8 fef5 	udiv	lr, r8, r5
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fb05 831e 	mls	r3, r5, lr, r8
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	fb0e f107 	mul.w	r1, lr, r7
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d90b      	bls.n	8000c40 <__udivmoddi4+0x68>
 8000c28:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c30:	f080 811e 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f240 811b 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c48:	fb05 3310 	mls	r3, r5, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x96>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 8108 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8105 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa8>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	f000 80ee 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e9c6 0500 	strd	r0, r5, [r6]
 8000c94:	4608      	mov	r0, r1
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e2      	beq.n	8000c80 <__udivmoddi4+0xa8>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7df      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8091 	bne.w	8000df0 <__udivmoddi4+0x218>
 8000cce:	eba1 050c 	sub.w	r5, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce0:	fb07 5013 	mls	r0, r7, r3, r5
 8000ce4:	0c25      	lsrs	r5, r4, #16
 8000ce6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	42a8      	cmp	r0, r5
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79e      	b.n	8000c76 <__udivmoddi4+0x9e>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 5518 	mls	r5, r9, r8, r5
 8000d68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0505 	adds.w	r5, ip, r5
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4465      	add	r5, ip
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d98:	fb09 5510 	mls	r5, r9, r0, r5
 8000d9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	45ae      	cmp	lr, r5
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	45ae      	cmp	lr, r5
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4465      	add	r5, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba5 050e 	sub.w	r5, r5, lr
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15e      	cbz	r6, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dda:	fa05 f707 	lsl.w	r7, r5, r7
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	40cd      	lsrs	r5, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa25 f303 	lsr.w	r3, r5, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	430d      	orrs	r5, r1
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3011 	mls	r0, r7, r1, r3
 8000e14:	0c2b      	lsrs	r3, r5, #16
 8000e16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3902      	subs	r1, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3310 	mls	r3, r7, r0, r3
 8000e44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e48:	fb00 f30e 	mul.w	r3, r0, lr
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e707      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000e70:	4686      	mov	lr, r0
 8000e72:	e6e5      	b.n	8000c40 <__udivmoddi4+0x68>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fa      	b.n	8000c6e <__udivmoddi4+0x96>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4641      	mov	r1, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4465      	add	r5, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eac:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_ADC_Init+0x50>)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_ADC_Init+0x54>)
 8000eb2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000eb8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ec6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ec8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eca:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ee8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000eec:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000eee:	f001 fd9d 	bl	8002a2c <HAL_ADC_Init>
 8000ef2:	b900      	cbnz	r0, 8000ef6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ef4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ef6:	f000 fa9d 	bl	8001434 <Error_Handler>
}
 8000efa:	e7fb      	b.n	8000ef4 <MX_ADC_Init+0x48>
 8000efc:	20000134 	.word	0x20000134
 8000f00:	40012400 	.word	0x40012400

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f04:	6802      	ldr	r2, [r0, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_ADC_MspInit+0x28>)
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d000      	beq.n	8000f0e <HAL_ADC_MspInit+0xa>
 8000f0c:	4770      	bx	lr
{
 8000f0e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f1a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f22:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f24:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f26:	b002      	add	sp, #8
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40012400 	.word	0x40012400

08000f30 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_ADC_MspDeInit+0x18>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d000      	beq.n	8000f3a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f38:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f3e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	e7f7      	b.n	8000f38 <HAL_ADC_MspDeInit+0x8>
 8000f48:	40012400 	.word	0x40012400

08000f4c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f4c:	b530      	push	{r4, r5, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f5a:	f7ff ffa7 	bl	8000eac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f60:	f002 f9a8 	bl	80032b4 <HAL_ADCEx_Calibration_Start>
 8000f64:	b9f8      	cbnz	r0, 8000fa6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f66:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f6c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f6e:	a901      	add	r1, sp, #4
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f72:	f001 fee9 	bl	8002d48 <HAL_ADC_ConfigChannel>
 8000f76:	b9c8      	cbnz	r0, 8000fac <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f7a:	f002 f8a9 	bl	80030d0 <HAL_ADC_Start>
 8000f7e:	b9c0      	cbnz	r0, 8000fb2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f80:	4c0d      	ldr	r4, [pc, #52]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295
 8000f86:	4620      	mov	r0, r4
 8000f88:	f001 fe7c 	bl	8002c84 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f002 f971 	bl	8003274 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f92:	4620      	mov	r0, r4
 8000f94:	f001 fed5 	bl	8002d42 <HAL_ADC_GetValue>
 8000f98:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f002 f914 	bl	80031c8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	b005      	add	sp, #20
 8000fa4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fa6:	f000 fa45 	bl	8001434 <Error_Handler>
 8000faa:	e7dc      	b.n	8000f66 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fac:	f000 fa42 	bl	8001434 <Error_Handler>
 8000fb0:	e7e2      	b.n	8000f78 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fb2:	f000 fa3f 	bl	8001434 <Error_Handler>
 8000fb6:	e7e3      	b.n	8000f80 <ADC_ReadChannels+0x34>
 8000fb8:	20000134 	.word	0x20000134

08000fbc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <SYS_InitMeasurement+0x8>)
 8000fbe:	4a02      	ldr	r2, [pc, #8]	; (8000fc8 <SYS_InitMeasurement+0xc>)
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000134 	.word	0x20000134
 8000fc8:	40012400 	.word	0x40012400

08000fcc <SYS_GetBatteryLevel>:
{
 8000fcc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <SYS_GetBatteryLevel+0x38>)
 8000fd0:	f7ff ffbc 	bl	8000f4c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000fd4:	b1a0      	cbz	r0, 8001000 <SYS_GetBatteryLevel+0x34>
 8000fd6:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <SYS_GetBatteryLevel+0x3c>)
 8000fda:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000fde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d007      	beq.n	8000ff6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fe6:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000fea:	fb03 f000 	mul.w	r0, r3, r0
 8000fee:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ff2:	b280      	uxth	r0, r0
 8000ff4:	e005      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <SYS_GetBatteryLevel+0x40>)
 8000ff8:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	e000      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001000:	2000      	movs	r0, #0
}
 8001002:	bd08      	pop	{r3, pc}
 8001004:	b4002000 	.word	0xb4002000
 8001008:	1fff7500 	.word	0x1fff7500
 800100c:	004c08d8 	.word	0x004c08d8

08001010 <SYS_GetTemperatureLevel>:
{
 8001010:	b510      	push	{r4, lr}
 8001012:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800101a:	f7ff ffd7 	bl	8000fcc <SYS_GetBatteryLevel>
 800101e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001020:	4821      	ldr	r0, [pc, #132]	; (80010a8 <SYS_GetTemperatureLevel+0x98>)
 8001022:	f7ff ff93 	bl	8000f4c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <SYS_GetTemperatureLevel+0x9c>)
 8001028:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 800102c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001030:	428a      	cmp	r2, r1
 8001032:	d01d      	beq.n	8001070 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001034:	fb00 f304 	mul.w	r3, r0, r4
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	4c1d      	ldr	r4, [pc, #116]	; (80010b0 <SYS_GetTemperatureLevel+0xa0>)
 800103c:	fba4 0303 	umull	r0, r3, r4, r3
 8001040:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001044:	2064      	movs	r0, #100	; 0x64
 8001046:	fb00 f303 	mul.w	r3, r0, r3
 800104a:	1a52      	subs	r2, r2, r1
 800104c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001050:	331e      	adds	r3, #30
 8001052:	b21b      	sxth	r3, r3
 8001054:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001058:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800105c:	b21b      	sxth	r3, r3
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001066:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800106a:	b200      	sxth	r0, r0
 800106c:	b002      	add	sp, #8
 800106e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001070:	fb00 f404 	mul.w	r4, r0, r4
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <SYS_GetTemperatureLevel+0xa4>)
 8001076:	fba3 2304 	umull	r2, r3, r3, r4
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001080:	0ae4      	lsrs	r4, r4, #11
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fb03 f404 	mul.w	r4, r3, r4
 800108a:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 800108e:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <SYS_GetTemperatureLevel+0xa8>)
 8001094:	fb83 2304 	smull	r2, r3, r3, r4
 8001098:	17e4      	asrs	r4, r4, #31
 800109a:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 800109e:	341e      	adds	r4, #30
 80010a0:	b224      	sxth	r4, r4
 80010a2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80010a6:	e7d7      	b.n	8001058 <SYS_GetTemperatureLevel+0x48>
 80010a8:	b0001000 	.word	0xb0001000
 80010ac:	1fff7500 	.word	0x1fff7500
 80010b0:	09ee009f 	.word	0x09ee009f
 80010b4:	00100101 	.word	0x00100101
 80010b8:	68db8bad 	.word	0x68db8bad

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010bc:	b500      	push	{lr}
 80010be:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010c6:	f042 0204 	orr.w	r2, r2, #4
 80010ca:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ce:	f002 0204 	and.w	r2, r2, #4
 80010d2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80010d4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80010e6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2102      	movs	r1, #2
 80010ec:	200f      	movs	r0, #15
 80010ee:	f002 f993 	bl	8003418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f002 f9c8 	bl	8003488 <HAL_NVIC_EnableIRQ>

}
 80010f8:	b003      	add	sp, #12
 80010fa:	f85d fb04 	ldr.w	pc, [sp], #4

080010fe <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80010fe:	e000      	b.n	8001102 <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001100:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001102:	f010 0307 	ands.w	r3, r0, #7
 8001106:	d012      	beq.n	800112e <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 8001108:	f810 3b01 	ldrb.w	r3, [r0], #1
 800110c:	2bff      	cmp	r3, #255	; 0xff
 800110e:	d0f7      	beq.n	8001100 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8001110:	2001      	movs	r0, #1
 8001112:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001114:	3901      	subs	r1, #1
  while (size != 0)
 8001116:	b129      	cbz	r1, 8001124 <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 8001118:	f810 3b01 	ldrb.w	r3, [r0], #1
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d0f9      	beq.n	8001114 <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001120:	2001      	movs	r0, #1
 8001122:	e002      	b.n	800112a <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 8001124:	2000      	movs	r0, #0
 8001126:	e000      	b.n	800112a <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8001128:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800112a:	bc10      	pop	{r4}
 800112c:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800112e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001132:	d212      	bcs.n	800115a <FLASH_IF_IsEmpty+0x5c>
{
 8001134:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 8001136:	4602      	mov	r2, r0
 8001138:	f852 4b08 	ldr.w	r4, [r2], #8
 800113c:	6840      	ldr	r0, [r0, #4]
 800113e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001142:	bf08      	it	eq
 8001144:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8001148:	d1ee      	bne.n	8001128 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800114a:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 800114c:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800114e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001152:	d3f0      	bcc.n	8001136 <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 8001154:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001158:	e7dd      	b.n	8001116 <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 800115a:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 800115e:	b129      	cbz	r1, 800116c <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 8001160:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001164:	2bff      	cmp	r3, #255	; 0xff
 8001166:	d103      	bne.n	8001170 <FLASH_IF_IsEmpty+0x72>
    size--;
 8001168:	3901      	subs	r1, #1
 800116a:	e7f8      	b.n	800115e <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 800116c:	2000      	movs	r0, #0
 800116e:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 8001170:	2001      	movs	r0, #1
}
 8001172:	4770      	bx	lr

08001174 <FLASH_IF_Write64>:
{
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	4604      	mov	r4, r0
 8001178:	4616      	mov	r6, r2
 800117a:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 800117c:	e005      	b.n	800118a <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800117e:	4632      	mov	r2, r6
 8001180:	462b      	mov	r3, r5
 8001182:	4621      	mov	r1, r4
 8001184:	2001      	movs	r0, #1
 8001186:	f002 fcab 	bl	8003ae0 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800118a:	6822      	ldr	r2, [r4, #0]
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	42ab      	cmp	r3, r5
 8001190:	bf08      	it	eq
 8001192:	42b2      	cmpeq	r2, r6
 8001194:	d005      	beq.n	80011a2 <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001196:	4904      	ldr	r1, [pc, #16]	; (80011a8 <FLASH_IF_Write64+0x34>)
 8001198:	6909      	ldr	r1, [r1, #16]
 800119a:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 800119e:	d1fa      	bne.n	8001196 <FLASH_IF_Write64+0x22>
 80011a0:	e7ed      	b.n	800117e <FLASH_IF_Write64+0xa>
}
 80011a2:	2000      	movs	r0, #0
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
 80011a6:	bf00      	nop
 80011a8:	58004000 	.word	0x58004000

080011ac <FLASH_IF_Write_Buffer>:
{
 80011ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	4606      	mov	r6, r0
 80011b4:	460c      	mov	r4, r1
 80011b6:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80011b8:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 80011ba:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80011bc:	e003      	b.n	80011c6 <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 80011be:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 80011c0:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 80011c2:	b9af      	cbnz	r7, 80011f0 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80011c4:	3501      	adds	r5, #1
 80011c6:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 80011ca:	d211      	bcs.n	80011f0 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80011cc:	2208      	movs	r2, #8
 80011ce:	4621      	mov	r1, r4
 80011d0:	4668      	mov	r0, sp
 80011d2:	f00f f9cb 	bl	801056c <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 80011d6:	9a00      	ldr	r2, [sp, #0]
 80011d8:	9b01      	ldr	r3, [sp, #4]
 80011da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011de:	bf08      	it	eq
 80011e0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80011e4:	d0eb      	beq.n	80011be <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 80011e6:	4630      	mov	r0, r6
 80011e8:	f7ff ffc4 	bl	8001174 <FLASH_IF_Write64>
 80011ec:	4607      	mov	r7, r0
 80011ee:	e7e6      	b.n	80011be <FLASH_IF_Write_Buffer+0x12>
}
 80011f0:	4638      	mov	r0, r7
 80011f2:	b002      	add	sp, #8
 80011f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011f8 <FLASH_IF_EraseByPages>:
{
 80011f8:	b500      	push	{lr}
 80011fa:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80011fc:	2302      	movs	r3, #2
 80011fe:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8001200:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 8001202:	9103      	str	r1, [sp, #12]
  if (interrupt)
 8001204:	b13a      	cbz	r2, 8001216 <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001206:	a801      	add	r0, sp, #4
 8001208:	f002 fd32 	bl	8003c70 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800120c:	b140      	cbz	r0, 8001220 <FLASH_IF_EraseByPages+0x28>
 800120e:	2802      	cmp	r0, #2
 8001210:	d10a      	bne.n	8001228 <FLASH_IF_EraseByPages+0x30>
 8001212:	2001      	movs	r0, #1
 8001214:	e005      	b.n	8001222 <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001216:	4669      	mov	r1, sp
 8001218:	a801      	add	r0, sp, #4
 800121a:	f002 fce9 	bl	8003bf0 <HAL_FLASHEx_Erase>
 800121e:	e7f5      	b.n	800120c <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001220:	2000      	movs	r0, #0
}
 8001222:	b005      	add	sp, #20
 8001224:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001228:	f06f 0001 	mvn.w	r0, #1
 800122c:	e7f9      	b.n	8001222 <FLASH_IF_EraseByPages+0x2a>
	...

08001230 <FLASH_IF_Write>:
{
 8001230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001234:	4693      	mov	fp, r2
 8001236:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001238:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 800123c:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <FLASH_IF_Write+0x108>)
 800123e:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <FLASH_IF_Write+0x10c>)
 8001244:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001248:	fbb5 f2f3 	udiv	r2, r5, r3
 800124c:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001250:	eb00 0a0b 	add.w	sl, r0, fp
 8001254:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 8001258:	f10a 3aff 	add.w	sl, sl, #4294967295
 800125c:	fbba f2f3 	udiv	r2, sl, r3
 8001260:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001264:	2900      	cmp	r1, #0
 8001266:	d052      	beq.n	800130e <FLASH_IF_Write+0xde>
 8001268:	4606      	mov	r6, r0
 800126a:	0aed      	lsrs	r5, r5, #11
 800126c:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 8001270:	4688      	mov	r8, r1
 8001272:	f01b 0f07 	tst.w	fp, #7
 8001276:	d14d      	bne.n	8001314 <FLASH_IF_Write+0xe4>
 8001278:	f010 0f07 	tst.w	r0, #7
 800127c:	d14d      	bne.n	800131a <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <FLASH_IF_Write+0x110>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db4c      	blt.n	8001320 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 8001286:	4555      	cmp	r5, sl
 8001288:	d004      	beq.n	8001294 <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800128a:	f3c0 040a 	ubfx	r4, r0, #0, #11
 800128e:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 8001292:	e00d      	b.n	80012b0 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 8001294:	465c      	mov	r4, fp
 8001296:	e00b      	b.n	80012b0 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001298:	4622      	mov	r2, r4
 800129a:	4641      	mov	r1, r8
 800129c:	4630      	mov	r0, r6
 800129e:	f7ff ff85 	bl	80011ac <FLASH_IF_Write_Buffer>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d145      	bne.n	8001332 <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 80012a6:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80012a8:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80012aa:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012ae:	3501      	adds	r5, #1
 80012b0:	4555      	cmp	r5, sl
 80012b2:	d829      	bhi.n	8001308 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80012b4:	4621      	mov	r1, r4
 80012b6:	4630      	mov	r0, r6
 80012b8:	f7ff ff21 	bl	80010fe <FLASH_IF_IsEmpty>
 80012bc:	2800      	cmp	r0, #0
 80012be:	d0eb      	beq.n	8001298 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 80012c0:	f1b9 0f00 	cmp.w	r9, #0
 80012c4:	d02f      	beq.n	8001326 <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80012c6:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 80012ca:	02ff      	lsls	r7, r7, #11
 80012cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d0:	4639      	mov	r1, r7
 80012d2:	4648      	mov	r0, r9
 80012d4:	f00f f94a 	bl	801056c <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80012d8:	f3c6 000a 	ubfx	r0, r6, #0, #11
 80012dc:	b2a2      	uxth	r2, r4
 80012de:	4641      	mov	r1, r8
 80012e0:	4448      	add	r0, r9
 80012e2:	f00f f943 	bl	801056c <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80012e6:	2200      	movs	r2, #0
 80012e8:	2101      	movs	r1, #1
 80012ea:	4628      	mov	r0, r5
 80012ec:	f7ff ff84 	bl	80011f8 <FLASH_IF_EraseByPages>
 80012f0:	b9e0      	cbnz	r0, 800132c <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80012f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f6:	4649      	mov	r1, r9
 80012f8:	4638      	mov	r0, r7
 80012fa:	f7ff ff57 	bl	80011ac <FLASH_IF_Write_Buffer>
 80012fe:	2800      	cmp	r0, #0
 8001300:	d0d1      	beq.n	80012a6 <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 8001302:	f06f 0002 	mvn.w	r0, #2
 8001306:	e000      	b.n	800130a <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 8001308:	2000      	movs	r0, #0
}
 800130a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 800130e:	f06f 0004 	mvn.w	r0, #4
 8001312:	e7fa      	b.n	800130a <FLASH_IF_Write+0xda>
 8001314:	f06f 0004 	mvn.w	r0, #4
 8001318:	e7f7      	b.n	800130a <FLASH_IF_Write+0xda>
 800131a:	f06f 0004 	mvn.w	r0, #4
 800131e:	e7f4      	b.n	800130a <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001320:	f06f 0003 	mvn.w	r0, #3
 8001324:	e7f1      	b.n	800130a <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 8001326:	f06f 0004 	mvn.w	r0, #4
 800132a:	e7ee      	b.n	800130a <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 800132c:	f06f 0001 	mvn.w	r0, #1
 8001330:	e7eb      	b.n	800130a <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 8001332:	f06f 0002 	mvn.w	r0, #2
 8001336:	e7e8      	b.n	800130a <FLASH_IF_Write+0xda>
 8001338:	1fff7000 	.word	0x1fff7000
 800133c:	03fffc00 	.word	0x03fffc00
 8001340:	58004000 	.word	0x58004000

08001344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001348:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	2400      	movs	r4, #0
 800134c:	9403      	str	r4, [sp, #12]
 800134e:	9404      	str	r4, [sp, #16]
 8001350:	9405      	str	r4, [sp, #20]
 8001352:	9406      	str	r4, [sp, #24]
 8001354:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800135c:	f042 0202 	orr.w	r2, r2, #2
 8001360:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001364:	f002 0202 	and.w	r2, r2, #2
 8001368:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800136a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800136c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800136e:	f042 0204 	orr.w	r2, r2, #4
 8001372:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001376:	f002 0204 	and.w	r2, r2, #4
 800137a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800137c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800137e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001380:	f042 0201 	orr.w	r2, r2, #1
 8001384:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800138e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001390:	4e26      	ldr	r6, [pc, #152]	; (800142c <MX_GPIO_Init+0xe8>)
 8001392:	4622      	mov	r2, r4
 8001394:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 8001398:	4630      	mov	r0, r6
 800139a:	f002 fded 	bl	8003f78 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800139e:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80013a2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2501      	movs	r5, #1
 80013a6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013aa:	2302      	movs	r3, #2
 80013ac:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	a903      	add	r1, sp, #12
 80013b0:	4630      	mov	r0, r6
 80013b2:	f002 fc91 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80013b6:	f04f 0803 	mov.w	r8, #3
 80013ba:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013be:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80013c2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	a903      	add	r1, sp, #12
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f002 fc84 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80013d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013d4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	a903      	add	r1, sp, #12
 80013e0:	4630      	mov	r0, r6
 80013e2:	f002 fc79 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80013e6:	2340      	movs	r3, #64	; 0x40
 80013e8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ea:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80013ee:	a903      	add	r1, sp, #12
 80013f0:	480f      	ldr	r0, [pc, #60]	; (8001430 <MX_GPIO_Init+0xec>)
 80013f2:	f002 fc71 	bl	8003cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013f6:	4622      	mov	r2, r4
 80013f8:	4621      	mov	r1, r4
 80013fa:	2006      	movs	r0, #6
 80013fc:	f002 f80c 	bl	8003418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001400:	2006      	movs	r0, #6
 8001402:	f002 f841 	bl	8003488 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001406:	4622      	mov	r2, r4
 8001408:	4621      	mov	r1, r4
 800140a:	2007      	movs	r0, #7
 800140c:	f002 f804 	bl	8003418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001410:	2007      	movs	r0, #7
 8001412:	f002 f839 	bl	8003488 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001416:	4622      	mov	r2, r4
 8001418:	4621      	mov	r1, r4
 800141a:	2016      	movs	r0, #22
 800141c:	f001 fffc 	bl	8003418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001420:	2016      	movs	r0, #22
 8001422:	f002 f831 	bl	8003488 <HAL_NVIC_EnableIRQ>

}
 8001426:	b008      	add	sp, #32
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800

08001434 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001436:	e7fe      	b.n	8001436 <Error_Handler+0x2>

08001438 <SystemClock_Config>:
{
 8001438:	b510      	push	{r4, lr}
 800143a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143c:	2248      	movs	r2, #72	; 0x48
 800143e:	2100      	movs	r1, #0
 8001440:	a808      	add	r0, sp, #32
 8001442:	f00f fd55 	bl	8010ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001446:	2400      	movs	r4, #0
 8001448:	9401      	str	r4, [sp, #4]
 800144a:	9402      	str	r4, [sp, #8]
 800144c:	9403      	str	r4, [sp, #12]
 800144e:	9404      	str	r4, [sp, #16]
 8001450:	9405      	str	r4, [sp, #20]
 8001452:	9406      	str	r4, [sp, #24]
 8001454:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001456:	f002 fdab 	bl	8003fb0 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800145a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001462:	f023 0318 	bic.w	r3, r3, #24
 8001466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800146a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800146e:	6813      	ldr	r3, [r2, #0]
 8001470:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001484:	2324      	movs	r3, #36	; 0x24
 8001486:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001488:	2381      	movs	r3, #129	; 0x81
 800148a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800148c:	2301      	movs	r3, #1
 800148e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001490:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001492:	23b0      	movs	r3, #176	; 0xb0
 8001494:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001496:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	a808      	add	r0, sp, #32
 800149a:	f002 ff23 	bl	80042e4 <HAL_RCC_OscConfig>
 800149e:	b970      	cbnz	r0, 80014be <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80014a0:	234f      	movs	r3, #79	; 0x4f
 80014a2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014aa:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80014ae:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b0:	2102      	movs	r1, #2
 80014b2:	a801      	add	r0, sp, #4
 80014b4:	f003 fa52 	bl	800495c <HAL_RCC_ClockConfig>
 80014b8:	b918      	cbnz	r0, 80014c2 <SystemClock_Config+0x8a>
}
 80014ba:	b01a      	add	sp, #104	; 0x68
 80014bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80014be:	f7ff ffb9 	bl	8001434 <Error_Handler>
    Error_Handler();
 80014c2:	f7ff ffb7 	bl	8001434 <Error_Handler>

080014c6 <main>:
{
 80014c6:	b508      	push	{r3, lr}
  HAL_Init();
 80014c8:	f001 fa62 	bl	8002990 <HAL_Init>
  SystemClock_Config();
 80014cc:	f7ff ffb4 	bl	8001438 <SystemClock_Config>
  MX_GPIO_Init();
 80014d0:	f7ff ff38 	bl	8001344 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80014d4:	f000 fcf8 	bl	8001ec8 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80014d8:	f000 fcfc 	bl	8001ed4 <MX_LoRaWAN_Process>
  while (1)
 80014dc:	e7fc      	b.n	80014d8 <main+0x12>
	...

080014e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80014e0:	b500      	push	{lr}
 80014e2:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80014e4:	222c      	movs	r2, #44	; 0x2c
 80014e6:	2100      	movs	r1, #0
 80014e8:	a801      	add	r0, sp, #4
 80014ea:	f00f fd01 	bl	8010ef0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014ee:	4819      	ldr	r0, [pc, #100]	; (8001554 <MX_RTC_Init+0x74>)
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_RTC_Init+0x78>)
 80014f2:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80014f4:	231f      	movs	r3, #31
 80014f6:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014fc:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014fe:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001500:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001504:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001506:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800150e:	f003 fd8b 	bl	8005028 <HAL_RTC_Init>
 8001512:	b9a8      	cbnz	r0, 8001540 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <MX_RTC_Init+0x74>)
 8001516:	f003 fec1 	bl	800529c <HAL_RTCEx_SetSSRU_IT>
 800151a:	b9a0      	cbnz	r0, 8001546 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800151c:	2200      	movs	r2, #0
 800151e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001520:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001522:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001524:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001528:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800152a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001530:	a901      	add	r1, sp, #4
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <MX_RTC_Init+0x74>)
 8001534:	f003 fdd6 	bl	80050e4 <HAL_RTC_SetAlarm_IT>
 8001538:	b940      	cbnz	r0, 800154c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800153a:	b00d      	add	sp, #52	; 0x34
 800153c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001540:	f7ff ff78 	bl	8001434 <Error_Handler>
 8001544:	e7e6      	b.n	8001514 <MX_RTC_Init+0x34>
    Error_Handler();
 8001546:	f7ff ff75 	bl	8001434 <Error_Handler>
 800154a:	e7e7      	b.n	800151c <MX_RTC_Init+0x3c>
    Error_Handler();
 800154c:	f7ff ff72 	bl	8001434 <Error_Handler>
}
 8001550:	e7f3      	b.n	800153a <MX_RTC_Init+0x5a>
 8001552:	bf00      	nop
 8001554:	20000198 	.word	0x20000198
 8001558:	40002800 	.word	0x40002800

0800155c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800155c:	b510      	push	{r4, lr}
 800155e:	b090      	sub	sp, #64	; 0x40
 8001560:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001562:	2238      	movs	r2, #56	; 0x38
 8001564:	2100      	movs	r1, #0
 8001566:	a802      	add	r0, sp, #8
 8001568:	f00f fcc2 	bl	8010ef0 <memset>
  if(rtcHandle->Instance==RTC)
 800156c:	6822      	ldr	r2, [r4, #0]
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_RTC_MspInit+0x7c>)
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001574:	b010      	add	sp, #64	; 0x40
 8001576:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800157e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001582:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001584:	a802      	add	r0, sp, #8
 8001586:	f003 fb3d 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 800158a:	bb08      	cbnz	r0, 80015d0 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001590:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 800159c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800159e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015a2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015aa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	4611      	mov	r1, r2
 80015b2:	2002      	movs	r0, #2
 80015b4:	f001 ff30 	bl	8003418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80015b8:	2002      	movs	r0, #2
 80015ba:	f001 ff65 	bl	8003488 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	4611      	mov	r1, r2
 80015c2:	202a      	movs	r0, #42	; 0x2a
 80015c4:	f001 ff28 	bl	8003418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015c8:	202a      	movs	r0, #42	; 0x2a
 80015ca:	f001 ff5d 	bl	8003488 <HAL_NVIC_EnableIRQ>
}
 80015ce:	e7d1      	b.n	8001574 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80015d0:	f7ff ff30 	bl	8001434 <Error_Handler>
 80015d4:	e7da      	b.n	800158c <HAL_RTC_MspInit+0x30>
 80015d6:	bf00      	nop
 80015d8:	40002800 	.word	0x40002800

080015dc <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80015dc:	4770      	bx	lr

080015de <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80015de:	4770      	bx	lr

080015e0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80015e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80015e2:	f001 f9eb 	bl	80029bc <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80015e6:	2001      	movs	r0, #1
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <PWR_EnterStopMode+0x14>)
 80015ea:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80015ee:	f002 fd43 	bl	8004078 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80015f2:	bd08      	pop	{r3, pc}
 80015f4:	58000400 	.word	0x58000400

080015f8 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80015f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80015fa:	f001 f9e6 	bl	80029ca <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80015fe:	bd08      	pop	{r3, pc}

08001600 <PWR_ExitStopMode>:
{
 8001600:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001602:	f001 f9e2 	bl	80029ca <HAL_ResumeTick>
  vcom_Resume();
 8001606:	f000 fc1f 	bl	8001e48 <vcom_Resume>
}
 800160a:	bd08      	pop	{r3, pc}

0800160c <PWR_EnterSleepMode>:
{
 800160c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800160e:	f001 f9d5 	bl	80029bc <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001612:	2101      	movs	r1, #1
 8001614:	2000      	movs	r0, #0
 8001616:	f002 fcd3 	bl	8003fc0 <HAL_PWR_EnterSLEEPMode>
}
 800161a:	bd08      	pop	{r3, pc}

0800161c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161c:	4770      	bx	lr

0800161e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161e:	e7fe      	b.n	800161e <NMI_Handler>

08001620 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <HardFault_Handler>

08001622 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <MemManage_Handler>

08001624 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <BusFault_Handler>

08001626 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <UsageFault_Handler>

08001628 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001628:	4770      	bx	lr

0800162a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162a:	4770      	bx	lr

0800162c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	4770      	bx	lr

08001630 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001630:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001632:	4802      	ldr	r0, [pc, #8]	; (800163c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001634:	f003 fe5e 	bl	80052f4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001638:	bd08      	pop	{r3, pc}
 800163a:	bf00      	nop
 800163c:	20000198 	.word	0x20000198

08001640 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001640:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001642:	2001      	movs	r0, #1
 8001644:	f002 fca6 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001648:	bd08      	pop	{r3, pc}

0800164a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800164a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 800164c:	2002      	movs	r0, #2
 800164e:	f002 fca1 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001652:	bd08      	pop	{r3, pc}

08001654 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001654:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <DMA1_Channel5_IRQHandler+0xc>)
 8001658:	f002 f934 	bl	80038c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800165c:	bd08      	pop	{r3, pc}
 800165e:	bf00      	nop
 8001660:	200001e4 	.word	0x200001e4

08001664 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001664:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001666:	2040      	movs	r0, #64	; 0x40
 8001668:	f002 fc94 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800166c:	bd08      	pop	{r3, pc}
	...

08001670 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001672:	4802      	ldr	r0, [pc, #8]	; (800167c <USART2_IRQHandler+0xc>)
 8001674:	f004 fafa 	bl	8005c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001678:	bd08      	pop	{r3, pc}
 800167a:	bf00      	nop
 800167c:	20000244 	.word	0x20000244

08001680 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001680:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001682:	4802      	ldr	r0, [pc, #8]	; (800168c <RTC_Alarm_IRQHandler+0xc>)
 8001684:	f003 fc48 	bl	8004f18 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001688:	bd08      	pop	{r3, pc}
 800168a:	bf00      	nop
 800168c:	20000198 	.word	0x20000198

08001690 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001690:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001692:	4802      	ldr	r0, [pc, #8]	; (800169c <SUBGHZ_Radio_IRQHandler+0xc>)
 8001694:	f004 f8d8 	bl	8005848 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001698:	bd08      	pop	{r3, pc}
 800169a:	bf00      	nop
 800169c:	200001d0 	.word	0x200001d0

080016a0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80016a0:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_SUBGHZ_Init+0x18>)
 80016a4:	2308      	movs	r3, #8
 80016a6:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80016a8:	f003 fe5a 	bl	8005360 <HAL_SUBGHZ_Init>
 80016ac:	b900      	cbnz	r0, 80016b0 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80016ae:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016b0:	f7ff fec0 	bl	8001434 <Error_Handler>
}
 80016b4:	e7fb      	b.n	80016ae <MX_SUBGHZ_Init+0xe>
 80016b6:	bf00      	nop
 80016b8:	200001d0 	.word	0x200001d0

080016bc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80016bc:	b500      	push	{lr}
 80016be:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80016cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	4611      	mov	r1, r2
 80016da:	2032      	movs	r0, #50	; 0x32
 80016dc:	f001 fe9c 	bl	8003418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80016e0:	2032      	movs	r0, #50	; 0x32
 80016e2:	f001 fed1 	bl	8003488 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80016e6:	b003      	add	sp, #12
 80016e8:	f85d fb04 	ldr.w	pc, [sp], #4

080016ec <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80016ec:	b40c      	push	{r2, r3}
 80016ee:	b500      	push	{lr}
 80016f0:	b083      	sub	sp, #12
 80016f2:	ab04      	add	r3, sp, #16
 80016f4:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80016f8:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80016fa:	f00f fb11 	bl	8010d20 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80016fe:	b003      	add	sp, #12
 8001700:	f85d eb04 	ldr.w	lr, [sp], #4
 8001704:	b002      	add	sp, #8
 8001706:	4770      	bx	lr

08001708 <TimestampNow>:
{
 8001708:	b530      	push	{r4, r5, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	4604      	mov	r4, r0
 800170e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001710:	a802      	add	r0, sp, #8
 8001712:	f00f f87b 	bl	801080c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001716:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	9b02      	ldr	r3, [sp, #8]
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <TimestampNow+0x2c>)
 8001720:	2110      	movs	r1, #16
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff ffe2 	bl	80016ec <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001728:	4620      	mov	r0, r4
 800172a:	f7fe fd25 	bl	8000178 <strlen>
 800172e:	8028      	strh	r0, [r5, #0]
}
 8001730:	b005      	add	sp, #20
 8001732:	bd30      	pop	{r4, r5, pc}
 8001734:	08011094 	.word	0x08011094

08001738 <SystemApp_Init>:
{
 8001738:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800173e:	6893      	ldr	r3, [r2, #8]
 8001740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001744:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001746:	f00f f8e5 	bl	8010914 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800174a:	2401      	movs	r4, #1
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <SystemApp_Init+0x4c>)
 800174e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001750:	f000 f8b8 	bl	80018c4 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001754:	f00e fd80 	bl	8010258 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001758:	480b      	ldr	r0, [pc, #44]	; (8001788 <SystemApp_Init+0x50>)
 800175a:	f00e fd97 	bl	801028c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <SystemApp_Init+0x54>)
 8001760:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001764:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001766:	2002      	movs	r0, #2
 8001768:	f00e fd96 	bl	8010298 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 800176c:	f7ff fc26 	bl	8000fbc <SYS_InitMeasurement>
  EnvSensors_Init();
 8001770:	f000 f908 	bl	8001984 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001774:	f00e fea0 	bl	80104b8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001778:	4621      	mov	r1, r4
 800177a:	4620      	mov	r0, r4
 800177c:	f00e febc 	bl	80104f8 <UTIL_LPM_SetOffMode>
}
 8001780:	bd10      	pop	{r4, pc}
 8001782:	bf00      	nop
 8001784:	200001dc 	.word	0x200001dc
 8001788:	08001709 	.word	0x08001709
 800178c:	58004000 	.word	0x58004000

08001790 <UTIL_SEQ_Idle>:
{
 8001790:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001792:	f00e fec7 	bl	8010524 <UTIL_LPM_EnterLowPower>
}
 8001796:	bd08      	pop	{r3, pc}

08001798 <GetBatteryLevel>:
{
 8001798:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800179a:	f7ff fc17 	bl	8000fcc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800179e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017a2:	4298      	cmp	r0, r3
 80017a4:	d80d      	bhi.n	80017c2 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80017a6:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80017aa:	d30c      	bcc.n	80017c6 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80017ac:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80017b0:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80017b4:	0040      	lsls	r0, r0, #1
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <GetBatteryLevel+0x34>)
 80017b8:	fba3 3000 	umull	r3, r0, r3, r0
 80017bc:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80017c0:	e000      	b.n	80017c4 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80017c2:	20fe      	movs	r0, #254	; 0xfe
}
 80017c4:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80017c6:	2000      	movs	r0, #0
 80017c8:	e7fc      	b.n	80017c4 <GetBatteryLevel+0x2c>
 80017ca:	bf00      	nop
 80017cc:	1b4e81b5 	.word	0x1b4e81b5

080017d0 <GetTemperatureLevel>:
{
 80017d0:	b500      	push	{lr}
 80017d2:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80017d4:	4668      	mov	r0, sp
 80017d6:	f000 f8b9 	bl	800194c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80017da:	9801      	ldr	r0, [sp, #4]
 80017dc:	f7ff f99e 	bl	8000b1c <__aeabi_f2iz>
}
 80017e0:	b200      	sxth	r0, r0
 80017e2:	b007      	add	sp, #28
 80017e4:	f85d fb04 	ldr.w	pc, [sp], #4

080017e8 <GetUniqueId>:
{
 80017e8:	b538      	push	{r3, r4, r5, lr}
 80017ea:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <GetUniqueId+0x68>)
 80017ee:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80017f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f6:	d013      	beq.n	8001820 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 80017f8:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 80017fa:	0a1a      	lsrs	r2, r3, #8
 80017fc:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 80017fe:	0c1a      	lsrs	r2, r3, #16
 8001800:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001802:	0e1b      	lsrs	r3, r3, #24
 8001804:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <GetUniqueId+0x68>)
 8001808:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 800180c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800180e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001812:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001814:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001816:	0c1a      	lsrs	r2, r3, #16
 8001818:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 800181a:	0e1b      	lsrs	r3, r3, #24
 800181c:	7003      	strb	r3, [r0, #0]
}
 800181e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001820:	f001 f8da 	bl	80029d8 <HAL_GetUIDw0>
 8001824:	4605      	mov	r5, r0
 8001826:	f001 f8e3 	bl	80029f0 <HAL_GetUIDw2>
 800182a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 800182c:	f001 f8da 	bl	80029e4 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001830:	0e2b      	lsrs	r3, r5, #24
 8001832:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001834:	0c2b      	lsrs	r3, r5, #16
 8001836:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001838:	0a2b      	lsrs	r3, r5, #8
 800183a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800183c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800183e:	0e03      	lsrs	r3, r0, #24
 8001840:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001842:	0c03      	lsrs	r3, r0, #16
 8001844:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001846:	0a03      	lsrs	r3, r0, #8
 8001848:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800184a:	7020      	strb	r0, [r4, #0]
 800184c:	e7e7      	b.n	800181e <GetUniqueId+0x36>
 800184e:	bf00      	nop
 8001850:	1fff7000 	.word	0x1fff7000

08001854 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <GetDevAddr+0x24>)
 8001856:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 800185a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800185e:	d000      	beq.n	8001862 <GetDevAddr+0xe>
}
 8001860:	4770      	bx	lr
{
 8001862:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001864:	f001 f8b8 	bl	80029d8 <HAL_GetUIDw0>
 8001868:	4604      	mov	r4, r0
 800186a:	f001 f8bb 	bl	80029e4 <HAL_GetUIDw1>
 800186e:	4044      	eors	r4, r0
 8001870:	f001 f8be 	bl	80029f0 <HAL_GetUIDw2>
 8001874:	4060      	eors	r0, r4
}
 8001876:	bd10      	pop	{r4, pc}
 8001878:	1fff7000 	.word	0x1fff7000

0800187c <UTIL_ADV_TRACE_PreSendHook>:
{
 800187c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800187e:	2101      	movs	r1, #1
 8001880:	2002      	movs	r0, #2
 8001882:	f00e fe23 	bl	80104cc <UTIL_LPM_SetStopMode>
}
 8001886:	bd08      	pop	{r3, pc}

08001888 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001888:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800188a:	2100      	movs	r1, #0
 800188c:	2002      	movs	r0, #2
 800188e:	f00e fe1d 	bl	80104cc <UTIL_LPM_SetStopMode>
}
 8001892:	bd08      	pop	{r3, pc}

08001894 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001894:	2000      	movs	r0, #0
 8001896:	4770      	bx	lr

08001898 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001898:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_GetTick+0x14>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b90b      	cbnz	r3, 80018a4 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80018a0:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80018a2:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80018a4:	f000 f89a 	bl	80019dc <TIMER_IF_GetTimerValue>
 80018a8:	e7fb      	b.n	80018a2 <HAL_GetTick+0xa>
 80018aa:	bf00      	nop
 80018ac:	200001dc 	.word	0x200001dc

080018b0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80018b0:	b500      	push	{lr}
 80018b2:	b083      	sub	sp, #12
 80018b4:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80018b6:	9801      	ldr	r0, [sp, #4]
 80018b8:	f000 f976 	bl	8001ba8 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80018bc:	b003      	add	sp, #12
 80018be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080018c4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80018c8:	f001 f898 	bl	80029fc <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80018cc:	f001 f89e 	bl	8002a0c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80018d0:	f001 f8a4 	bl	8002a1c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80018d4:	2400      	movs	r4, #0
 80018d6:	9403      	str	r4, [sp, #12]
 80018d8:	9404      	str	r4, [sp, #16]
 80018da:	9405      	str	r4, [sp, #20]
 80018dc:	9406      	str	r4, [sp, #24]
 80018de:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ee:	f042 0202 	orr.w	r2, r2, #2
 80018f2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018f6:	f002 0202 	and.w	r2, r2, #2
 80018fa:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80018fc:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001900:	f042 0202 	orr.w	r2, r2, #2
 8001904:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800190e:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001910:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001914:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001916:	4d0c      	ldr	r5, [pc, #48]	; (8001948 <DBG_Init+0x84>)
 8001918:	a903      	add	r1, sp, #12
 800191a:	4628      	mov	r0, r5
 800191c:	f002 f9dc 	bl	8003cd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001920:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001924:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001926:	a903      	add	r1, sp, #12
 8001928:	4628      	mov	r0, r5
 800192a:	f002 f9d5 	bl	8003cd8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800192e:	4622      	mov	r2, r4
 8001930:	4639      	mov	r1, r7
 8001932:	4628      	mov	r0, r5
 8001934:	f002 fb20 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001938:	4622      	mov	r2, r4
 800193a:	4631      	mov	r1, r6
 800193c:	4628      	mov	r0, r5
 800193e:	f002 fb1b 	bl	8003f78 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001942:	b009      	add	sp, #36	; 0x24
 8001944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001946:	bf00      	nop
 8001948:	48000400 	.word	0x48000400

0800194c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800194c:	b510      	push	{r4, lr}
 800194e:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001950:	f7ff fb5e 	bl	8001010 <SYS_GetTemperatureLevel>
 8001954:	f340 200f 	sbfx	r0, r0, #8, #16
 8001958:	f7fe ff3c 	bl	80007d4 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <EnvSensors_Read+0x28>)
 800195e:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001960:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <EnvSensors_Read+0x2c>)
 8001964:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <EnvSensors_Read+0x30>)
 8001968:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <EnvSensors_Read+0x34>)
 800196c:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 800196e:	2000      	movs	r0, #0
 8001970:	bd10      	pop	{r4, pc}
 8001972:	bf00      	nop
 8001974:	42480000 	.word	0x42480000
 8001978:	447a0000 	.word	0x447a0000
 800197c:	003e090d 	.word	0x003e090d
 8001980:	000503ab 	.word	0x000503ab

08001984 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001984:	2000      	movs	r0, #0
 8001986:	4770      	bx	lr

08001988 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <TIMER_IF_SetTimerContext+0x1c>)
 800198a:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800198c:	e001      	b.n	8001992 <TIMER_IF_SetTimerContext+0xa>
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <TIMER_IF_SetTimerContext+0x1c>)
 8001990:	6898      	ldr	r0, [r3, #8]
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <TIMER_IF_SetTimerContext+0x1c>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4283      	cmp	r3, r0
 8001998:	d1f9      	bne.n	800198e <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 800199a:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <TIMER_IF_SetTimerContext+0x20>)
 800199e:	6018      	str	r0, [r3, #0]
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40002800 	.word	0x40002800
 80019a8:	200001e0 	.word	0x200001e0

080019ac <TIMER_IF_GetTimerContext>:
}
 80019ac:	4b01      	ldr	r3, [pc, #4]	; (80019b4 <TIMER_IF_GetTimerContext+0x8>)
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200001e0 	.word	0x200001e0

080019b8 <TIMER_IF_GetTimerElapsedTime>:
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80019ba:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80019bc:	e001      	b.n	80019c2 <TIMER_IF_GetTimerElapsedTime+0xa>
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80019c0:	6898      	ldr	r0, [r3, #8]
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	4283      	cmp	r3, r0
 80019c8:	d1f9      	bne.n	80019be <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 80019ca:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <TIMER_IF_GetTimerElapsedTime+0x20>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	1ac0      	subs	r0, r0, r3
 80019d2:	4770      	bx	lr
 80019d4:	40002800 	.word	0x40002800
 80019d8:	200001e0 	.word	0x200001e0

080019dc <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <TIMER_IF_GetTimerValue+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b153      	cbz	r3, 80019f8 <TIMER_IF_GetTimerValue+0x1c>
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <TIMER_IF_GetTimerValue+0x24>)
 80019e4:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80019e6:	e001      	b.n	80019ec <TIMER_IF_GetTimerValue+0x10>
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <TIMER_IF_GetTimerValue+0x24>)
 80019ea:	6898      	ldr	r0, [r3, #8]
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <TIMER_IF_GetTimerValue+0x24>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4283      	cmp	r3, r0
 80019f2:	d1f9      	bne.n	80019e8 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 80019f4:	43c0      	mvns	r0, r0
 80019f6:	4770      	bx	lr
  uint32_t ret = 0;
 80019f8:	2000      	movs	r0, #0
}
 80019fa:	4770      	bx	lr
 80019fc:	200001dd 	.word	0x200001dd
 8001a00:	40002800 	.word	0x40002800

08001a04 <TIMER_IF_GetMinimumTimeout>:
}
 8001a04:	2003      	movs	r0, #3
 8001a06:	4770      	bx	lr

08001a08 <TIMER_IF_Convert_ms2Tick>:
{
 8001a08:	b508      	push	{r3, lr}
 8001a0a:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a10:	2300      	movs	r3, #0
 8001a12:	0280      	lsls	r0, r0, #10
 8001a14:	0d89      	lsrs	r1, r1, #22
 8001a16:	f7ff f8c7 	bl	8000ba8 <__aeabi_uldivmod>
}
 8001a1a:	bd08      	pop	{r3, pc}

08001a1c <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001a1c:	0ec2      	lsrs	r2, r0, #27
 8001a1e:	0143      	lsls	r3, r0, #5
 8001a20:	1a1b      	subs	r3, r3, r0
 8001a22:	f162 0200 	sbc.w	r2, r2, #0
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	181b      	adds	r3, r3, r0
 8001a30:	f142 0000 	adc.w	r0, r2, #0
 8001a34:	00c0      	lsls	r0, r0, #3
 8001a36:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001a3a:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001a3e:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001a42:	4770      	bx	lr

08001a44 <TIMER_IF_StopTimer>:
{
 8001a44:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <TIMER_IF_StopTimer+0x20>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001a4c:	4c06      	ldr	r4, [pc, #24]	; (8001a68 <TIMER_IF_StopTimer+0x24>)
 8001a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a52:	4620      	mov	r0, r4
 8001a54:	f003 fa20 	bl	8004e98 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001a5e:	2000      	movs	r0, #0
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	bf00      	nop
 8001a64:	40002800 	.word	0x40002800
 8001a68:	20000198 	.word	0x20000198

08001a6c <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001a6c:	b508      	push	{r3, lr}
 8001a6e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001a70:	2102      	movs	r1, #2
 8001a72:	4802      	ldr	r0, [pc, #8]	; (8001a7c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001a74:	f003 fc53 	bl	800531e <HAL_RTCEx_BKUPWrite>
}
 8001a78:	bd08      	pop	{r3, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000198 	.word	0x20000198

08001a80 <TIMER_IF_Init>:
{
 8001a80:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <TIMER_IF_Init+0x40>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	b10b      	cbz	r3, 8001a8c <TIMER_IF_Init+0xc>
}
 8001a88:	2000      	movs	r0, #0
 8001a8a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001a8c:	4c0d      	ldr	r4, [pc, #52]	; (8001ac4 <TIMER_IF_Init+0x44>)
 8001a8e:	f04f 35ff 	mov.w	r5, #4294967295
 8001a92:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001a94:	f7ff fd24 	bl	80014e0 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001a98:	f7ff ffd4 	bl	8001a44 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f003 f9f9 	bl	8004e98 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001aa6:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f003 fbd7 	bl	800525c <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff ffdc 	bl	8001a6c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001ab4:	f7ff ff68 	bl	8001988 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001ab8:	4b01      	ldr	r3, [pc, #4]	; (8001ac0 <TIMER_IF_Init+0x40>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e7e3      	b.n	8001a88 <TIMER_IF_Init+0x8>
 8001ac0:	200001dd 	.word	0x200001dd
 8001ac4:	20000198 	.word	0x20000198

08001ac8 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001ac8:	b508      	push	{r3, lr}
 8001aca:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001acc:	2100      	movs	r1, #0
 8001ace:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001ad0:	f003 fc25 	bl	800531e <HAL_RTCEx_BKUPWrite>
}
 8001ad4:	bd08      	pop	{r3, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000198 	.word	0x20000198

08001adc <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001adc:	b508      	push	{r3, lr}
 8001ade:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4802      	ldr	r0, [pc, #8]	; (8001aec <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001ae4:	f003 fc1b 	bl	800531e <HAL_RTCEx_BKUPWrite>
}
 8001ae8:	bd08      	pop	{r3, pc}
 8001aea:	bf00      	nop
 8001aec:	20000198 	.word	0x20000198

08001af0 <TIMER_IF_StartTimer>:
{
 8001af0:	b510      	push	{r4, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001af6:	222c      	movs	r2, #44	; 0x2c
 8001af8:	2100      	movs	r1, #0
 8001afa:	a801      	add	r0, sp, #4
 8001afc:	f00f f9f8 	bl	8010ef0 <memset>
  TIMER_IF_StopTimer();
 8001b00:	f7ff ffa0 	bl	8001a44 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <TIMER_IF_StartTimer+0x48>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001b0e:	43e4      	mvns	r4, r4
 8001b10:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b12:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b14:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b18:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b1e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b20:	2201      	movs	r2, #1
 8001b22:	a901      	add	r1, sp, #4
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <TIMER_IF_StartTimer+0x4c>)
 8001b26:	f003 fadd 	bl	80050e4 <HAL_RTC_SetAlarm_IT>
 8001b2a:	b910      	cbnz	r0, 8001b32 <TIMER_IF_StartTimer+0x42>
}
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	b00c      	add	sp, #48	; 0x30
 8001b30:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001b32:	f7ff fc7f 	bl	8001434 <Error_Handler>
 8001b36:	e7f9      	b.n	8001b2c <TIMER_IF_StartTimer+0x3c>
 8001b38:	200001e0 	.word	0x200001e0
 8001b3c:	20000198 	.word	0x20000198

08001b40 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001b40:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001b42:	2102      	movs	r1, #2
 8001b44:	4801      	ldr	r0, [pc, #4]	; (8001b4c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001b46:	f003 fbf1 	bl	800532c <HAL_RTCEx_BKUPRead>
}
 8001b4a:	bd08      	pop	{r3, pc}
 8001b4c:	20000198 	.word	0x20000198

08001b50 <TIMER_IF_GetTime>:
{
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4605      	mov	r5, r0
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <TIMER_IF_GetTime+0x34>)
 8001b56:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001b58:	e001      	b.n	8001b5e <TIMER_IF_GetTime+0xe>
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <TIMER_IF_GetTime+0x34>)
 8001b5c:	689c      	ldr	r4, [r3, #8]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <TIMER_IF_GetTime+0x34>)
 8001b60:	6892      	ldr	r2, [r2, #8]
 8001b62:	42a2      	cmp	r2, r4
 8001b64:	d1f9      	bne.n	8001b5a <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001b66:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001b68:	f7ff ffea 	bl	8001b40 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001b6c:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001b6e:	0aa4      	lsrs	r4, r4, #10
 8001b70:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001b74:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001b78:	f7ff ff50 	bl	8001a1c <TIMER_IF_Convert_Tick2ms>
 8001b7c:	8028      	strh	r0, [r5, #0]
}
 8001b7e:	4620      	mov	r0, r4
 8001b80:	bd38      	pop	{r3, r4, r5, pc}
 8001b82:	bf00      	nop
 8001b84:	40002800 	.word	0x40002800

08001b88 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001b88:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4801      	ldr	r0, [pc, #4]	; (8001b94 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001b8e:	f003 fbcd 	bl	800532c <HAL_RTCEx_BKUPRead>
}
 8001b92:	bd08      	pop	{r3, pc}
 8001b94:	20000198 	.word	0x20000198

08001b98 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001b98:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001b9e:	f003 fbc5 	bl	800532c <HAL_RTCEx_BKUPRead>
}
 8001ba2:	bd08      	pop	{r3, pc}
 8001ba4:	20000198 	.word	0x20000198

08001ba8 <TIMER_IF_DelayMs>:
{
 8001ba8:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001baa:	f7ff ff2d 	bl	8001a08 <TIMER_IF_Convert_ms2Tick>
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <TIMER_IF_DelayMs+0x3c>)
 8001bb0:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001bb2:	e001      	b.n	8001bb8 <TIMER_IF_DelayMs+0x10>
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <TIMER_IF_DelayMs+0x3c>)
 8001bb6:	6899      	ldr	r1, [r3, #8]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <TIMER_IF_DelayMs+0x3c>)
 8001bba:	6892      	ldr	r2, [r2, #8]
 8001bbc:	428a      	cmp	r2, r1
 8001bbe:	d1f9      	bne.n	8001bb4 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001bc0:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bc2:	e00a      	b.n	8001bda <TIMER_IF_DelayMs+0x32>
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <TIMER_IF_DelayMs+0x3c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <TIMER_IF_DelayMs+0x3c>)
 8001bca:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1f9      	bne.n	8001bc4 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001bd0:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bd2:	1a5b      	subs	r3, r3, r1
 8001bd4:	4283      	cmp	r3, r0
 8001bd6:	d203      	bcs.n	8001be0 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001bd8:	bf00      	nop
 8001bda:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <TIMER_IF_DelayMs+0x3c>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001bde:	e7f3      	b.n	8001bc8 <TIMER_IF_DelayMs+0x20>
}
 8001be0:	bd08      	pop	{r3, pc}
 8001be2:	bf00      	nop
 8001be4:	40002800 	.word	0x40002800

08001be8 <HAL_RTC_AlarmAEventCallback>:
{
 8001be8:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001bea:	f00e ffb7 	bl	8010b5c <UTIL_TIMER_IRQ_Handler>
}
 8001bee:	bd08      	pop	{r3, pc}

08001bf0 <HAL_RTCEx_SSRUEventCallback>:
{
 8001bf0:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001bf2:	f7ff ffa5 	bl	8001b40 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001bf6:	3001      	adds	r0, #1
 8001bf8:	f7ff ff38 	bl	8001a6c <TIMER_IF_BkUp_Write_MSBticks>
}
 8001bfc:	bd08      	pop	{r3, pc}
	...

08001c00 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c00:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c02:	4817      	ldr	r0, [pc, #92]	; (8001c60 <MX_USART2_UART_Init+0x60>)
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_USART2_UART_Init+0x64>)
 8001c06:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001c08:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c0c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c12:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c14:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c16:	220c      	movs	r2, #12
 8001c18:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c20:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c22:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c24:	f004 fe81 	bl	800692a <HAL_UART_Init>
 8001c28:	b970      	cbnz	r0, 8001c48 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <MX_USART2_UART_Init+0x60>)
 8001c2e:	f005 f83e 	bl	8006cae <HAL_UARTEx_SetTxFifoThreshold>
 8001c32:	b960      	cbnz	r0, 8001c4e <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c34:	2100      	movs	r1, #0
 8001c36:	480a      	ldr	r0, [pc, #40]	; (8001c60 <MX_USART2_UART_Init+0x60>)
 8001c38:	f005 f85e 	bl	8006cf8 <HAL_UARTEx_SetRxFifoThreshold>
 8001c3c:	b950      	cbnz	r0, 8001c54 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001c3e:	4808      	ldr	r0, [pc, #32]	; (8001c60 <MX_USART2_UART_Init+0x60>)
 8001c40:	f005 f811 	bl	8006c66 <HAL_UARTEx_EnableFifoMode>
 8001c44:	b948      	cbnz	r0, 8001c5a <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c46:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c48:	f7ff fbf4 	bl	8001434 <Error_Handler>
 8001c4c:	e7ed      	b.n	8001c2a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001c4e:	f7ff fbf1 	bl	8001434 <Error_Handler>
 8001c52:	e7ef      	b.n	8001c34 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001c54:	f7ff fbee 	bl	8001434 <Error_Handler>
 8001c58:	e7f1      	b.n	8001c3e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001c5a:	f7ff fbeb 	bl	8001434 <Error_Handler>
}
 8001c5e:	e7f2      	b.n	8001c46 <MX_USART2_UART_Init+0x46>
 8001c60:	20000244 	.word	0x20000244
 8001c64:	40004400 	.word	0x40004400

08001c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c68:	b530      	push	{r4, r5, lr}
 8001c6a:	b097      	sub	sp, #92	; 0x5c
 8001c6c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	2100      	movs	r1, #0
 8001c70:	9111      	str	r1, [sp, #68]	; 0x44
 8001c72:	9112      	str	r1, [sp, #72]	; 0x48
 8001c74:	9113      	str	r1, [sp, #76]	; 0x4c
 8001c76:	9114      	str	r1, [sp, #80]	; 0x50
 8001c78:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c7a:	2238      	movs	r2, #56	; 0x38
 8001c7c:	a803      	add	r0, sp, #12
 8001c7e:	f00f f937 	bl	8010ef0 <memset>
  if(uartHandle->Instance==USART2)
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_UART_MspInit+0xd4>)
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c8a:	b017      	add	sp, #92	; 0x5c
 8001c8c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001c92:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_UART_MspInit+0xd8>)
 8001c94:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c96:	a803      	add	r0, sp, #12
 8001c98:	f002 ffb4 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d144      	bne.n	8001d2a <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ca6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001cb2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001cb4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001cc6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001cc8:	230c      	movs	r3, #12
 8001cca:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	a911      	add	r1, sp, #68	; 0x44
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f001 fff9 	bl	8003cd8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001ce6:	4817      	ldr	r0, [pc, #92]	; (8001d44 <HAL_UART_MspInit+0xdc>)
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_UART_MspInit+0xe0>)
 8001cea:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001cec:	2314      	movs	r3, #20
 8001cee:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf4:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cfa:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cfc:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001cfe:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d00:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d02:	f001 fc51 	bl	80035a8 <HAL_DMA_Init>
 8001d06:	b998      	cbnz	r0, 8001d30 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001d08:	2110      	movs	r1, #16
 8001d0a:	480e      	ldr	r0, [pc, #56]	; (8001d44 <HAL_UART_MspInit+0xdc>)
 8001d0c:	f001 fe4e 	bl	80039ac <HAL_DMA_ConfigChannelAttributes>
 8001d10:	b988      	cbnz	r0, 8001d36 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_UART_MspInit+0xdc>)
 8001d14:	67a3      	str	r3, [r4, #120]	; 0x78
 8001d16:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	2025      	movs	r0, #37	; 0x25
 8001d1e:	f001 fb7b 	bl	8003418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d22:	2025      	movs	r0, #37	; 0x25
 8001d24:	f001 fbb0 	bl	8003488 <HAL_NVIC_EnableIRQ>
}
 8001d28:	e7af      	b.n	8001c8a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001d2a:	f7ff fb83 	bl	8001434 <Error_Handler>
 8001d2e:	e7b7      	b.n	8001ca0 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001d30:	f7ff fb80 	bl	8001434 <Error_Handler>
 8001d34:	e7e8      	b.n	8001d08 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001d36:	f7ff fb7d 	bl	8001434 <Error_Handler>
 8001d3a:	e7ea      	b.n	8001d12 <HAL_UART_MspInit+0xaa>
 8001d3c:	40004400 	.word	0x40004400
 8001d40:	000c0004 	.word	0x000c0004
 8001d44:	200001e4 	.word	0x200001e4
 8001d48:	40020058 	.word	0x40020058

08001d4c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001d4c:	6802      	ldr	r2, [r0, #0]
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_UART_MspDeInit+0x34>)
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d000      	beq.n	8001d56 <HAL_UART_MspDeInit+0xa>
 8001d54:	4770      	bx	lr
{
 8001d56:	b510      	push	{r4, lr}
 8001d58:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d5e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001d60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001d66:	210c      	movs	r1, #12
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6c:	f002 f886 	bl	8003e7c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001d70:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001d72:	f001 fc8b 	bl	800368c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001d76:	2025      	movs	r0, #37	; 0x25
 8001d78:	f001 fb94 	bl	80034a4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	bf00      	nop
 8001d80:	40004400 	.word	0x40004400

08001d84 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001d84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <vcom_Init+0x20>)
 8001d88:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001d8a:	f7ff f997 	bl	80010bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d8e:	f7ff ff37 	bl	8001c00 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <vcom_Init+0x24>)
 8001d94:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001d98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001da0:	2000      	movs	r0, #0
 8001da2:	bd08      	pop	{r3, pc}
 8001da4:	200002d8 	.word	0x200002d8
 8001da8:	58000800 	.word	0x58000800

08001dac <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001dac:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dbc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001dc2:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <vcom_DeInit+0x28>)
 8001dc4:	f7ff ffc2 	bl	8001d4c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001dc8:	200f      	movs	r0, #15
 8001dca:	f001 fb6b 	bl	80034a4 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bd08      	pop	{r3, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000244 	.word	0x20000244

08001dd8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001dd8:	b508      	push	{r3, lr}
 8001dda:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001ddc:	4601      	mov	r1, r0
 8001dde:	4802      	ldr	r0, [pc, #8]	; (8001de8 <vcom_Trace_DMA+0x10>)
 8001de0:	f003 fe70 	bl	8005ac4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001de4:	2000      	movs	r0, #0
 8001de6:	bd08      	pop	{r3, pc}
 8001de8:	20000244 	.word	0x20000244

08001dec <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001dec:	b510      	push	{r4, lr}
 8001dee:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <vcom_ReceiveInit+0x50>)
 8001df2:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001df4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001df8:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001dfa:	ab02      	add	r3, sp, #8
 8001dfc:	e913 0006 	ldmdb	r3, {r1, r2}
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <vcom_ReceiveInit+0x54>)
 8001e02:	f004 fed8 	bl	8006bb6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <vcom_ReceiveInit+0x54>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001e10:	d1f9      	bne.n	8001e06 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001e12:	69da      	ldr	r2, [r3, #28]
 8001e14:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001e18:	d0fb      	beq.n	8001e12 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001e20:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001e22:	4c07      	ldr	r4, [pc, #28]	; (8001e40 <vcom_ReceiveInit+0x54>)
 8001e24:	4620      	mov	r0, r4
 8001e26:	f004 ff07 	bl	8006c38 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4905      	ldr	r1, [pc, #20]	; (8001e44 <vcom_ReceiveInit+0x58>)
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f004 fe52 	bl	8006ad8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001e34:	2000      	movs	r0, #0
 8001e36:	b002      	add	sp, #8
 8001e38:	bd10      	pop	{r4, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200002d4 	.word	0x200002d4
 8001e40:	20000244 	.word	0x20000244
 8001e44:	200002dc 	.word	0x200002dc

08001e48 <vcom_Resume>:

void vcom_Resume(void)
{
 8001e48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4a:	4807      	ldr	r0, [pc, #28]	; (8001e68 <vcom_Resume+0x20>)
 8001e4c:	f004 fd6d 	bl	800692a <HAL_UART_Init>
 8001e50:	b920      	cbnz	r0, 8001e5c <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e52:	4806      	ldr	r0, [pc, #24]	; (8001e6c <vcom_Resume+0x24>)
 8001e54:	f001 fba8 	bl	80035a8 <HAL_DMA_Init>
 8001e58:	b918      	cbnz	r0, 8001e62 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001e5a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e5c:	f7ff faea 	bl	8001434 <Error_Handler>
 8001e60:	e7f7      	b.n	8001e52 <vcom_Resume+0xa>
    Error_Handler();
 8001e62:	f7ff fae7 	bl	8001434 <Error_Handler>
}
 8001e66:	e7f8      	b.n	8001e5a <vcom_Resume+0x12>
 8001e68:	20000244 	.word	0x20000244
 8001e6c:	200001e4 	.word	0x200001e4

08001e70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001e72:	6802      	ldr	r2, [r0, #0]
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_UART_TxCpltCallback+0x18>)
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d000      	beq.n	8001e7c <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001e7a:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_UART_TxCpltCallback+0x1c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2000      	movs	r0, #0
 8001e82:	4798      	blx	r3
}
 8001e84:	e7f9      	b.n	8001e7a <HAL_UART_TxCpltCallback+0xa>
 8001e86:	bf00      	nop
 8001e88:	40004400 	.word	0x40004400
 8001e8c:	200002d8 	.word	0x200002d8

08001e90 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001e90:	6802      	ldr	r2, [r0, #0]
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_UART_RxCpltCallback+0x2c>)
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d000      	beq.n	8001e9a <HAL_UART_RxCpltCallback+0xa>
 8001e98:	4770      	bx	lr
{
 8001e9a:	b510      	push	{r4, lr}
 8001e9c:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_UART_RxCpltCallback+0x30>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b12b      	cbz	r3, 8001eb0 <HAL_UART_RxCpltCallback+0x20>
 8001ea4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001ea8:	b912      	cbnz	r2, 8001eb0 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <HAL_UART_RxCpltCallback+0x34>)
 8001eae:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <HAL_UART_RxCpltCallback+0x34>)
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f004 fe0f 	bl	8006ad8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001eba:	bd10      	pop	{r4, pc}
 8001ebc:	40004400 	.word	0x40004400
 8001ec0:	200002d4 	.word	0x200002d4
 8001ec4:	200002dc 	.word	0x200002dc

08001ec8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001ec8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001eca:	f7ff fc35 	bl	8001738 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001ece:	f000 fb8f 	bl	80025f0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001ed2:	bd08      	pop	{r3, pc}

08001ed4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001ed4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eda:	f00e fb8f 	bl	80105fc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001ede:	bd08      	pop	{r3, pc}

08001ee0 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8001ee0:	4b01      	ldr	r3, [pc, #4]	; (8001ee8 <OnTxFrameCtrlChanged+0x8>)
 8001ee2:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000058 	.word	0x20000058

08001eec <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8001eec:	4b01      	ldr	r3, [pc, #4]	; (8001ef4 <OnPingSlotPeriodicityChanged+0x8>)
 8001eee:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000058 	.word	0x20000058

08001ef8 <OnBeaconStatusChange>:
  if (params != NULL)
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d03f      	beq.n	8001f7c <OnBeaconStatusChange+0x84>
{
 8001efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f00:	b08c      	sub	sp, #48	; 0x30
 8001f02:	4603      	mov	r3, r0
    switch (params->State)
 8001f04:	7842      	ldrb	r2, [r0, #1]
 8001f06:	2a02      	cmp	r2, #2
 8001f08:	d00a      	beq.n	8001f20 <OnBeaconStatusChange+0x28>
 8001f0a:	2a03      	cmp	r2, #3
 8001f0c:	d02f      	beq.n	8001f6e <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <OnBeaconStatusChange+0x88>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	4611      	mov	r1, r2
 8001f14:	2002      	movs	r0, #2
 8001f16:	f00e fa13 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 8001f1a:	b00c      	add	sp, #48	; 0x30
 8001f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8001f20:	7c02      	ldrb	r2, [r0, #16]
 8001f22:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8001f26:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8001f2a:	7d9c      	ldrb	r4, [r3, #22]
 8001f2c:	7ddd      	ldrb	r5, [r3, #23]
 8001f2e:	7e1e      	ldrb	r6, [r3, #24]
 8001f30:	7e5f      	ldrb	r7, [r3, #25]
 8001f32:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8001f36:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8001f3a:	f893 801c 	ldrb.w	r8, [r3, #28]
 8001f3e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8001f42:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8001f46:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001f4a:	9708      	str	r7, [sp, #32]
 8001f4c:	9607      	str	r6, [sp, #28]
 8001f4e:	9506      	str	r5, [sp, #24]
 8001f50:	9405      	str	r4, [sp, #20]
 8001f52:	685c      	ldr	r4, [r3, #4]
 8001f54:	9404      	str	r4, [sp, #16]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	9303      	str	r3, [sp, #12]
 8001f5a:	9002      	str	r0, [sp, #8]
 8001f5c:	9101      	str	r1, [sp, #4]
 8001f5e:	9200      	str	r2, [sp, #0]
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <OnBeaconStatusChange+0x8c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	4611      	mov	r1, r2
 8001f66:	2002      	movs	r0, #2
 8001f68:	f00e f9ea 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8001f6c:	e7d5      	b.n	8001f1a <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <OnBeaconStatusChange+0x90>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	4611      	mov	r1, r2
 8001f74:	2002      	movs	r0, #2
 8001f76:	f00e f9e3 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 8001f7a:	e7ce      	b.n	8001f1a <OnBeaconStatusChange+0x22>
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	080110f0 	.word	0x080110f0
 8001f84:	08011108 	.word	0x08011108
 8001f88:	0801117c 	.word	0x0801117c

08001f8c <OnClassChange>:
{
 8001f8c:	b500      	push	{lr}
 8001f8e:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <OnClassChange+0x1c>)
 8001f92:	5c1b      	ldrb	r3, [r3, r0]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <OnClassChange+0x20>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f00e f9cf 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 8001fa2:	b003      	add	sp, #12
 8001fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fa8:	080111b8 	.word	0x080111b8
 8001fac:	0801119c 	.word	0x0801119c

08001fb0 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8001fb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8001fb2:	2801      	cmp	r0, #1
 8001fb4:	d006      	beq.n	8001fc4 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <OnNvmDataChange+0x24>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4611      	mov	r1, r2
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	f00e f9bf 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8001fc2:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <OnNvmDataChange+0x28>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4611      	mov	r1, r2
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f00e f9b8 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 8001fd0:	e7f7      	b.n	8001fc2 <OnNvmDataChange+0x12>
 8001fd2:	bf00      	nop
 8001fd4:	080111d0 	.word	0x080111d0
 8001fd8:	080111bc 	.word	0x080111bc

08001fdc <OnTxTimerEvent>:
{
 8001fdc:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	f00e fad7 	bl	8010594 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8001fe6:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <OnTxTimerEvent+0x14>)
 8001fe8:	f00e fd58 	bl	8010a9c <UTIL_TIMER_Start>
}
 8001fec:	bd08      	pop	{r3, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000434 	.word	0x20000434

08001ff4 <OnMacProcessNotify>:
{
 8001ff4:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f00e facb 	bl	8010594 <UTIL_SEQ_SetTask>
}
 8001ffe:	bd08      	pop	{r3, pc}

08002000 <OnSystemReset>:
{
 8002000:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002002:	f005 fb63 	bl	80076cc <LmHandlerHalt>
 8002006:	b100      	cbz	r0, 800200a <OnSystemReset+0xa>
}
 8002008:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800200a:	f004 ffe1 	bl	8006fd0 <LmHandlerJoinStatus>
 800200e:	2801      	cmp	r0, #1
 8002010:	d1fa      	bne.n	8002008 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002012:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002016:	4905      	ldr	r1, [pc, #20]	; (800202c <OnSystemReset+0x2c>)
 8002018:	68ca      	ldr	r2, [r1, #12]
 800201a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <OnSystemReset+0x30>)
 8002020:	4313      	orrs	r3, r2
 8002022:	60cb      	str	r3, [r1, #12]
 8002024:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002028:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800202a:	e7fd      	b.n	8002028 <OnSystemReset+0x28>
 800202c:	e000ed00 	.word	0xe000ed00
 8002030:	05fa0004 	.word	0x05fa0004

08002034 <OnTxPeriodicityChanged>:
{
 8002034:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <OnTxPeriodicityChanged+0x28>)
 8002038:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800203a:	b910      	cbnz	r0, 8002042 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800203c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002040:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002042:	4c07      	ldr	r4, [pc, #28]	; (8002060 <OnTxPeriodicityChanged+0x2c>)
 8002044:	4620      	mov	r0, r4
 8002046:	f00e fccf 	bl	80109e8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <OnTxPeriodicityChanged+0x28>)
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	4620      	mov	r0, r4
 8002050:	f00e fd6a 	bl	8010b28 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002054:	4620      	mov	r0, r4
 8002056:	f00e fd21 	bl	8010a9c <UTIL_TIMER_Start>
}
 800205a:	bd10      	pop	{r4, pc}
 800205c:	2000006c 	.word	0x2000006c
 8002060:	20000434 	.word	0x20000434

08002064 <OnTxData>:
  if ((params != NULL))
 8002064:	2800      	cmp	r0, #0
 8002066:	d042      	beq.n	80020ee <OnTxData+0x8a>
{
 8002068:	b510      	push	{r4, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800206e:	7803      	ldrb	r3, [r0, #0]
 8002070:	b90b      	cbnz	r3, 8002076 <OnTxData+0x12>
}
 8002072:	b004      	add	sp, #16
 8002074:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800207c:	481c      	ldr	r0, [pc, #112]	; (80020f0 <OnTxData+0x8c>)
 800207e:	f001 ff7b 	bl	8003f78 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8002082:	481c      	ldr	r0, [pc, #112]	; (80020f4 <OnTxData+0x90>)
 8002084:	f00e fd0a 	bl	8010a9c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <OnTxData+0x94>)
 800208a:	2200      	movs	r2, #0
 800208c:	4611      	mov	r1, r2
 800208e:	2002      	movs	r0, #2
 8002090:	f00e f956 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002094:	7c23      	ldrb	r3, [r4, #16]
 8002096:	f994 200a 	ldrsb.w	r2, [r4, #10]
 800209a:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800209e:	9103      	str	r1, [sp, #12]
 80020a0:	9202      	str	r2, [sp, #8]
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	68e3      	ldr	r3, [r4, #12]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <OnTxData+0x98>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	4611      	mov	r1, r2
 80020ae:	2003      	movs	r0, #3
 80020b0:	f00e f946 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <OnTxData+0x9c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	4611      	mov	r1, r2
 80020ba:	2003      	movs	r0, #3
 80020bc:	f00e f940 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80020c0:	7a23      	ldrb	r3, [r4, #8]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10c      	bne.n	80020e0 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80020c6:	7a63      	ldrb	r3, [r4, #9]
 80020c8:	b143      	cbz	r3, 80020dc <OnTxData+0x78>
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <OnTxData+0xa0>)
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <OnTxData+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	4611      	mov	r1, r2
 80020d4:	2003      	movs	r0, #3
 80020d6:	f00e f933 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 80020da:	e7ca      	b.n	8002072 <OnTxData+0xe>
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <OnTxData+0xa8>)
 80020de:	e7f5      	b.n	80020cc <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <OnTxData+0xac>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	4611      	mov	r1, r2
 80020e6:	2003      	movs	r0, #3
 80020e8:	f00e f92a 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 80020ec:	e7c1      	b.n	8002072 <OnTxData+0xe>
 80020ee:	4770      	bx	lr
 80020f0:	48000400 	.word	0x48000400
 80020f4:	2000041c 	.word	0x2000041c
 80020f8:	080111f0 	.word	0x080111f0
 80020fc:	08011224 	.word	0x08011224
 8002100:	08011258 	.word	0x08011258
 8002104:	080111ec 	.word	0x080111ec
 8002108:	08011268 	.word	0x08011268
 800210c:	080111e4 	.word	0x080111e4
 8002110:	0801127c 	.word	0x0801127c

08002114 <OnJoinRequest>:
  if (joinParams != NULL)
 8002114:	b358      	cbz	r0, 800216e <OnJoinRequest+0x5a>
{
 8002116:	b510      	push	{r4, lr}
 8002118:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800211a:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800211e:	b9fb      	cbnz	r3, 8002160 <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002120:	4813      	ldr	r0, [pc, #76]	; (8002170 <OnJoinRequest+0x5c>)
 8002122:	f00e fc61 	bl	80109e8 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002126:	2200      	movs	r2, #0
 8002128:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800212c:	4811      	ldr	r0, [pc, #68]	; (8002174 <OnJoinRequest+0x60>)
 800212e:	f001 ff23 	bl	8003f78 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <OnJoinRequest+0x64>)
 8002134:	2200      	movs	r2, #0
 8002136:	4611      	mov	r1, r2
 8002138:	2002      	movs	r0, #2
 800213a:	f00e f901 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800213e:	79a3      	ldrb	r3, [r4, #6]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d006      	beq.n	8002152 <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <OnJoinRequest+0x68>)
 8002146:	2200      	movs	r2, #0
 8002148:	4611      	mov	r1, r2
 800214a:	2002      	movs	r0, #2
 800214c:	f00e f8f8 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 8002150:	e00c      	b.n	800216c <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <OnJoinRequest+0x6c>)
 8002154:	2200      	movs	r2, #0
 8002156:	4611      	mov	r1, r2
 8002158:	2002      	movs	r0, #2
 800215a:	f00e f8f1 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800215e:	e005      	b.n	800216c <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <OnJoinRequest+0x70>)
 8002162:	2200      	movs	r2, #0
 8002164:	4611      	mov	r1, r2
 8002166:	2002      	movs	r0, #2
 8002168:	f00e f8ea 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 800216c:	bd10      	pop	{r4, pc}
 800216e:	4770      	bx	lr
 8002170:	200003d4 	.word	0x200003d4
 8002174:	48000400 	.word	0x48000400
 8002178:	0801128c 	.word	0x0801128c
 800217c:	080112c4 	.word	0x080112c4
 8002180:	080112a4 	.word	0x080112a4
 8002184:	080112e4 	.word	0x080112e4

08002188 <OnStopJoinTimerEvent>:
{
 8002188:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <OnStopJoinTimerEvent+0x3c>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d013      	beq.n	80021ba <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002192:	4c0d      	ldr	r4, [pc, #52]	; (80021c8 <OnStopJoinTimerEvent+0x40>)
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800219a:	4620      	mov	r0, r4
 800219c:	f001 feec 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a6:	4620      	mov	r0, r4
 80021a8:	f001 fee6 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80021ac:	2200      	movs	r2, #0
 80021ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b2:	4620      	mov	r0, r4
 80021b4:	f001 fee0 	bl	8003f78 <HAL_GPIO_WritePin>
}
 80021b8:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80021ba:	2100      	movs	r1, #0
 80021bc:	2008      	movs	r0, #8
 80021be:	f00e f9e9 	bl	8010594 <UTIL_SEQ_SetTask>
 80021c2:	e7e6      	b.n	8002192 <OnStopJoinTimerEvent+0xa>
 80021c4:	20000000 	.word	0x20000000
 80021c8:	48000400 	.word	0x48000400

080021cc <OnRxTimerLedEvent>:
{
 80021cc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d4:	4801      	ldr	r0, [pc, #4]	; (80021dc <OnRxTimerLedEvent+0x10>)
 80021d6:	f001 fecf 	bl	8003f78 <HAL_GPIO_WritePin>
}
 80021da:	bd08      	pop	{r3, pc}
 80021dc:	48000400 	.word	0x48000400

080021e0 <OnTxTimerLedEvent>:
{
 80021e0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e8:	4801      	ldr	r0, [pc, #4]	; (80021f0 <OnTxTimerLedEvent+0x10>)
 80021ea:	f001 fec5 	bl	8003f78 <HAL_GPIO_WritePin>
}
 80021ee:	bd08      	pop	{r3, pc}
 80021f0:	48000400 	.word	0x48000400

080021f4 <OnRxData>:
  if (params != NULL)
 80021f4:	2900      	cmp	r1, #0
 80021f6:	d06e      	beq.n	80022d6 <OnRxData+0xe2>
{
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	4604      	mov	r4, r0
 80021fe:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002200:	2201      	movs	r2, #1
 8002202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002206:	4834      	ldr	r0, [pc, #208]	; (80022d8 <OnRxData+0xe4>)
 8002208:	f001 feb6 	bl	8003f78 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 800220c:	4833      	ldr	r0, [pc, #204]	; (80022dc <OnRxData+0xe8>)
 800220e:	f00e fc45 	bl	8010a9c <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002212:	782e      	ldrb	r6, [r5, #0]
 8002214:	2e00      	cmp	r6, #0
 8002216:	d042      	beq.n	800229e <OnRxData+0xaa>
      if (appData != NULL)
 8002218:	2c00      	cmp	r4, #0
 800221a:	d03f      	beq.n	800229c <OnRxData+0xa8>
        RxPort = appData->Port;
 800221c:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800221e:	6863      	ldr	r3, [r4, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d03c      	beq.n	800229e <OnRxData+0xaa>
          switch (appData->Port)
 8002224:	2e02      	cmp	r6, #2
 8002226:	d016      	beq.n	8002256 <OnRxData+0x62>
 8002228:	2e03      	cmp	r6, #3
 800222a:	d138      	bne.n	800229e <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800222c:	7862      	ldrb	r2, [r4, #1]
 800222e:	2a01      	cmp	r2, #1
 8002230:	d135      	bne.n	800229e <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d006      	beq.n	8002246 <OnRxData+0x52>
 8002238:	2b02      	cmp	r3, #2
 800223a:	d008      	beq.n	800224e <OnRxData+0x5a>
 800223c:	bb7b      	cbnz	r3, 800229e <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800223e:	2000      	movs	r0, #0
 8002240:	f004 ff7a 	bl	8007138 <LmHandlerRequestClass>
                    break;
 8002244:	e02b      	b.n	800229e <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002246:	2001      	movs	r0, #1
 8002248:	f004 ff76 	bl	8007138 <LmHandlerRequestClass>
                    break;
 800224c:	e027      	b.n	800229e <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800224e:	2002      	movs	r0, #2
 8002250:	f004 ff72 	bl	8007138 <LmHandlerRequestClass>
                    break;
 8002254:	e023      	b.n	800229e <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002256:	7862      	ldrb	r2, [r4, #1]
 8002258:	2a01      	cmp	r2, #1
 800225a:	d120      	bne.n	800229e <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <OnRxData+0xec>)
 8002264:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002266:	b963      	cbnz	r3, 8002282 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <OnRxData+0xf0>)
 800226a:	2200      	movs	r2, #0
 800226c:	4611      	mov	r1, r2
 800226e:	2003      	movs	r0, #3
 8002270:	f00e f866 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800227a:	4817      	ldr	r0, [pc, #92]	; (80022d8 <OnRxData+0xe4>)
 800227c:	f001 fe7c 	bl	8003f78 <HAL_GPIO_WritePin>
 8002280:	e00d      	b.n	800229e <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <OnRxData+0xf4>)
 8002284:	2200      	movs	r2, #0
 8002286:	4611      	mov	r1, r2
 8002288:	2003      	movs	r0, #3
 800228a:	f00e f859 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 800228e:	2201      	movs	r2, #1
 8002290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002294:	4810      	ldr	r0, [pc, #64]	; (80022d8 <OnRxData+0xe4>)
 8002296:	f001 fe6f 	bl	8003f78 <HAL_GPIO_WritePin>
 800229a:	e000      	b.n	800229e <OnRxData+0xaa>
  uint8_t RxPort = 0;
 800229c:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 800229e:	7c2b      	ldrb	r3, [r5, #16]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d901      	bls.n	80022a8 <OnRxData+0xb4>
}
 80022a4:	b006      	add	sp, #24
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80022a8:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80022ac:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80022b0:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80022b4:	9005      	str	r0, [sp, #20]
 80022b6:	9104      	str	r1, [sp, #16]
 80022b8:	490c      	ldr	r1, [pc, #48]	; (80022ec <OnRxData+0xf8>)
 80022ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022be:	9303      	str	r3, [sp, #12]
 80022c0:	9202      	str	r2, [sp, #8]
 80022c2:	9601      	str	r6, [sp, #4]
 80022c4:	68eb      	ldr	r3, [r5, #12]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <OnRxData+0xfc>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	4611      	mov	r1, r2
 80022ce:	2003      	movs	r0, #3
 80022d0:	f00e f836 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 80022d4:	e7e6      	b.n	80022a4 <OnRxData+0xb0>
 80022d6:	4770      	bx	lr
 80022d8:	48000400 	.word	0x48000400
 80022dc:	200003ec 	.word	0x200003ec
 80022e0:	200003d2 	.word	0x200003d2
 80022e4:	08011300 	.word	0x08011300
 80022e8:	0801130c 	.word	0x0801130c
 80022ec:	08011500 	.word	0x08011500
 80022f0:	08011318 	.word	0x08011318

080022f4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	4605      	mov	r5, r0
 80022f8:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80022fa:	f001 fb95 	bl	8003a28 <HAL_FLASH_Unlock>
 80022fe:	b100      	cbz	r0, 8002302 <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002300:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <OnStoreContextRequest+0x4c>)
 8002304:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <OnStoreContextRequest+0x50>)
 800230a:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 800230e:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002312:	fbb3 f3f0 	udiv	r3, r3, r0
 8002316:	fb00 f303 	mul.w	r3, r0, r3
 800231a:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 800231e:	2200      	movs	r2, #0
 8002320:	2101      	movs	r1, #1
 8002322:	0ad8      	lsrs	r0, r3, #11
 8002324:	f7fe ff68 	bl	80011f8 <FLASH_IF_EraseByPages>
 8002328:	b110      	cbz	r0, 8002330 <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 800232a:	f001 fb95 	bl	8003a58 <HAL_FLASH_Lock>
}
 800232e:	e7e7      	b.n	8002300 <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8002330:	2300      	movs	r3, #0
 8002332:	4622      	mov	r2, r4
 8002334:	4629      	mov	r1, r5
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <OnStoreContextRequest+0x54>)
 8002338:	f7fe ff7a 	bl	8001230 <FLASH_IF_Write>
 800233c:	e7f5      	b.n	800232a <OnStoreContextRequest+0x36>
 800233e:	bf00      	nop
 8002340:	1fff7000 	.word	0x1fff7000
 8002344:	03fffc00 	.word	0x03fffc00
 8002348:	0803f000 	.word	0x0803f000

0800234c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800234c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800234e:	b28a      	uxth	r2, r1
 8002350:	4901      	ldr	r1, [pc, #4]	; (8002358 <OnRestoreContextRequest+0xc>)
 8002352:	f00e f90b 	bl	801056c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002356:	bd08      	pop	{r3, pc}
 8002358:	0803f000 	.word	0x0803f000

0800235c <StopJoin>:
{
 800235c:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800235e:	4c1e      	ldr	r4, [pc, #120]	; (80023d8 <StopJoin+0x7c>)
 8002360:	2201      	movs	r2, #1
 8002362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002366:	4620      	mov	r0, r4
 8002368:	f001 fe06 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800236c:	2201      	movs	r2, #1
 800236e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002372:	4620      	mov	r0, r4
 8002374:	f001 fe00 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002378:	2201      	movs	r2, #1
 800237a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800237e:	4620      	mov	r0, r4
 8002380:	f001 fdfa 	bl	8003f78 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002384:	4815      	ldr	r0, [pc, #84]	; (80023dc <StopJoin+0x80>)
 8002386:	f00e fb2f 	bl	80109e8 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800238a:	f005 f997 	bl	80076bc <LmHandlerStop>
 800238e:	b148      	cbz	r0, 80023a4 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <StopJoin+0x84>)
 8002392:	2200      	movs	r2, #0
 8002394:	4611      	mov	r1, r2
 8002396:	2002      	movs	r0, #2
 8002398:	f00d ffd2 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 800239c:	4811      	ldr	r0, [pc, #68]	; (80023e4 <StopJoin+0x88>)
 800239e:	f00e fb7d 	bl	8010a9c <UTIL_TIMER_Start>
}
 80023a2:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <StopJoin+0x8c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	4611      	mov	r1, r2
 80023aa:	2002      	movs	r0, #2
 80023ac:	f00d ffc8 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80023b0:	4c0e      	ldr	r4, [pc, #56]	; (80023ec <StopJoin+0x90>)
 80023b2:	2501      	movs	r5, #1
 80023b4:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <StopJoin+0x94>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	4611      	mov	r1, r2
 80023bc:	2002      	movs	r0, #2
 80023be:	f00d ffbf 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80023c2:	480c      	ldr	r0, [pc, #48]	; (80023f4 <StopJoin+0x98>)
 80023c4:	f004 fff6 	bl	80073b4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80023c8:	4629      	mov	r1, r5
 80023ca:	7820      	ldrb	r0, [r4, #0]
 80023cc:	f004 fd88 	bl	8006ee0 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <StopJoin+0x80>)
 80023d2:	f00e fb63 	bl	8010a9c <UTIL_TIMER_Start>
 80023d6:	e7e1      	b.n	800239c <StopJoin+0x40>
 80023d8:	48000400 	.word	0x48000400
 80023dc:	20000434 	.word	0x20000434
 80023e0:	08011360 	.word	0x08011360
 80023e4:	20000404 	.word	0x20000404
 80023e8:	08011380 	.word	0x08011380
 80023ec:	20000000 	.word	0x20000000
 80023f0:	08011394 	.word	0x08011394
 80023f4:	20000058 	.word	0x20000058

080023f8 <StoreContext>:
{
 80023f8:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80023fa:	f005 f96f 	bl	80076dc <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80023fe:	f110 0f08 	cmn.w	r0, #8
 8002402:	d003      	beq.n	800240c <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002404:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002408:	d007      	beq.n	800241a <StoreContext+0x22>
}
 800240a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <StoreContext+0x30>)
 800240e:	2200      	movs	r2, #0
 8002410:	4611      	mov	r1, r2
 8002412:	2002      	movs	r0, #2
 8002414:	f00d ff94 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 8002418:	e7f7      	b.n	800240a <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <StoreContext+0x34>)
 800241c:	2200      	movs	r2, #0
 800241e:	4611      	mov	r1, r2
 8002420:	2002      	movs	r0, #2
 8002422:	f00d ff8d 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 8002426:	e7f0      	b.n	800240a <StoreContext+0x12>
 8002428:	080113b4 	.word	0x080113b4
 800242c:	080113cc 	.word	0x080113cc

08002430 <SendTxData>:
{
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002434:	f7ff f9b0 	bl	8001798 <GetBatteryLevel>
 8002438:	4604      	mov	r4, r0
  EnvSensors_Read(&sensor_data);
 800243a:	a802      	add	r0, sp, #8
 800243c:	f7ff fa86 	bl	800194c <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002440:	9400      	str	r4, [sp, #0]
 8002442:	4b58      	ldr	r3, [pc, #352]	; (80025a4 <SendTxData+0x174>)
 8002444:	2201      	movs	r2, #1
 8002446:	2100      	movs	r1, #0
 8002448:	2002      	movs	r0, #2
 800244a:	f00d ff79 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800244e:	9803      	ldr	r0, [sp, #12]
 8002450:	f7fe fb64 	bl	8000b1c <__aeabi_f2iz>
 8002454:	b200      	sxth	r0, r0
 8002456:	9000      	str	r0, [sp, #0]
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <SendTxData+0x178>)
 800245a:	2201      	movs	r2, #1
 800245c:	2100      	movs	r1, #0
 800245e:	2002      	movs	r0, #2
 8002460:	f00d ff6e 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8002464:	4c51      	ldr	r4, [pc, #324]	; (80025ac <SendTxData+0x17c>)
 8002466:	2302      	movs	r3, #2
 8002468:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800246a:	4951      	ldr	r1, [pc, #324]	; (80025b0 <SendTxData+0x180>)
 800246c:	9804      	ldr	r0, [sp, #16]
 800246e:	f7fe fa05 	bl	800087c <__aeabi_fmul>
 8002472:	f7fe fb79 	bl	8000b68 <__aeabi_f2uiz>
 8002476:	b285      	uxth	r5, r0
  temperature = (int16_t)(sensor_data.temperature);
 8002478:	9803      	ldr	r0, [sp, #12]
 800247a:	f7fe fb4f 	bl	8000b1c <__aeabi_f2iz>
 800247e:	b206      	sxth	r6, r0
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8002480:	494c      	ldr	r1, [pc, #304]	; (80025b4 <SendTxData+0x184>)
 8002482:	9802      	ldr	r0, [sp, #8]
 8002484:	f7fe f9fa 	bl	800087c <__aeabi_fmul>
 8002488:	4949      	ldr	r1, [pc, #292]	; (80025b0 <SendTxData+0x180>)
 800248a:	f7fe faab 	bl	80009e4 <__aeabi_fdiv>
 800248e:	f7fe fb6b 	bl	8000b68 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8002492:	6863      	ldr	r3, [r4, #4]
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <SendTxData+0x188>)
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800249a:	6863      	ldr	r3, [r4, #4]
 800249c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80024a0:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	7098      	strb	r0, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80024a6:	6863      	ldr	r3, [r4, #4]
 80024a8:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 80024aa:	6863      	ldr	r3, [r4, #4]
 80024ac:	0a2a      	lsrs	r2, r5, #8
 80024ae:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 80024b0:	6863      	ldr	r3, [r4, #4]
 80024b2:	715d      	strb	r5, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 80024b4:	4b41      	ldr	r3, [pc, #260]	; (80025bc <SendTxData+0x18c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d002      	beq.n	80024c2 <SendTxData+0x92>
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d000      	beq.n	80024c2 <SendTxData+0x92>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 80024c0:	bb63      	cbnz	r3, 800251c <SendTxData+0xec>
    AppData.Buffer[i++] = 0;
 80024c2:	4a3a      	ldr	r2, [pc, #232]	; (80025ac <SendTxData+0x17c>)
 80024c4:	6851      	ldr	r1, [r2, #4]
 80024c6:	2300      	movs	r3, #0
 80024c8:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 80024ca:	6851      	ldr	r1, [r2, #4]
 80024cc:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 80024ce:	6852      	ldr	r2, [r2, #4]
 80024d0:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 80024d2:	7253      	strb	r3, [r2, #9]
 80024d4:	220a      	movs	r2, #10
  AppData.BufferSize = i;
 80024d6:	4b35      	ldr	r3, [pc, #212]	; (80025ac <SendTxData+0x17c>)
 80024d8:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80024da:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <SendTxData+0x190>)
 80024dc:	7a5b      	ldrb	r3, [r3, #9]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d138      	bne.n	8002554 <SendTxData+0x124>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80024e2:	2200      	movs	r2, #0
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <SendTxData+0x18c>)
 80024e6:	78d9      	ldrb	r1, [r3, #3]
 80024e8:	4830      	ldr	r0, [pc, #192]	; (80025ac <SendTxData+0x17c>)
 80024ea:	f004 fd83 	bl	8006ff4 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d03e      	beq.n	8002570 <SendTxData+0x140>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 80024f2:	f110 0f06 	cmn.w	r0, #6
 80024f6:	d043      	beq.n	8002580 <SendTxData+0x150>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80024f8:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 80024fa:	4c32      	ldr	r4, [pc, #200]	; (80025c4 <SendTxData+0x194>)
 80024fc:	4620      	mov	r0, r4
 80024fe:	f00e fa73 	bl	80109e8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <SendTxData+0x198>)
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	42a9      	cmp	r1, r5
 8002508:	bf38      	it	cc
 800250a:	4629      	movcc	r1, r5
 800250c:	4620      	mov	r0, r4
 800250e:	f00e fb0b 	bl	8010b28 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002512:	4620      	mov	r0, r4
 8002514:	f00e fac2 	bl	8010a9c <UTIL_TIMER_Start>
}
 8002518:	b009      	add	sp, #36	; 0x24
 800251a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 800251c:	9d05      	ldr	r5, [sp, #20]
    longitude = sensor_data.longitude;
 800251e:	9c06      	ldr	r4, [sp, #24]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002520:	4e22      	ldr	r6, [pc, #136]	; (80025ac <SendTxData+0x17c>)
 8002522:	6877      	ldr	r7, [r6, #4]
 8002524:	f7ff f938 	bl	8001798 <GetBatteryLevel>
 8002528:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800252a:	6873      	ldr	r3, [r6, #4]
 800252c:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002530:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002532:	6873      	ldr	r3, [r6, #4]
 8002534:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002538:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800253a:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800253c:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002540:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002542:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002546:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002548:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800254a:	2200      	movs	r2, #0
 800254c:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800254e:	739a      	strb	r2, [r3, #14]
 8002550:	220f      	movs	r2, #15
 8002552:	e7c0      	b.n	80024d6 <SendTxData+0xa6>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002554:	f004 fd3c 	bl	8006fd0 <LmHandlerJoinStatus>
 8002558:	2801      	cmp	r0, #1
 800255a:	d1c2      	bne.n	80024e2 <SendTxData+0xb2>
    UTIL_TIMER_Stop(&JoinLedTimer);
 800255c:	4818      	ldr	r0, [pc, #96]	; (80025c0 <SendTxData+0x190>)
 800255e:	f00e fa43 	bl	80109e8 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002562:	2200      	movs	r2, #0
 8002564:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002568:	4818      	ldr	r0, [pc, #96]	; (80025cc <SendTxData+0x19c>)
 800256a:	f001 fd05 	bl	8003f78 <HAL_GPIO_WritePin>
 800256e:	e7b8      	b.n	80024e2 <SendTxData+0xb2>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <SendTxData+0x1a0>)
 8002572:	2201      	movs	r2, #1
 8002574:	2100      	movs	r1, #0
 8002576:	4610      	mov	r0, r2
 8002578:	f00d fee2 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800257c:	2500      	movs	r5, #0
 800257e:	e7bc      	b.n	80024fa <SendTxData+0xca>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002580:	f004 fd20 	bl	8006fc4 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002584:	4605      	mov	r5, r0
 8002586:	2800      	cmp	r0, #0
 8002588:	d0b7      	beq.n	80024fa <SendTxData+0xca>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <SendTxData+0x1a4>)
 800258c:	fba3 2300 	umull	r2, r3, r3, r0
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <SendTxData+0x1a8>)
 8002596:	2201      	movs	r2, #1
 8002598:	2100      	movs	r1, #0
 800259a:	4610      	mov	r0, r2
 800259c:	f00d fed0 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 80025a0:	e7ab      	b.n	80024fa <SendTxData+0xca>
 80025a2:	bf00      	nop
 80025a4:	080113e4 	.word	0x080113e4
 80025a8:	080113f0 	.word	0x080113f0
 80025ac:	20000004 	.word	0x20000004
 80025b0:	41200000 	.word	0x41200000
 80025b4:	42c80000 	.word	0x42c80000
 80025b8:	200003d2 	.word	0x200003d2
 80025bc:	20000058 	.word	0x20000058
 80025c0:	200003d4 	.word	0x200003d4
 80025c4:	20000434 	.word	0x20000434
 80025c8:	2000006c 	.word	0x2000006c
 80025cc:	48000400 	.word	0x48000400
 80025d0:	080113fc 	.word	0x080113fc
 80025d4:	10624dd3 	.word	0x10624dd3
 80025d8:	0801140c 	.word	0x0801140c

080025dc <OnJoinTimerLedEvent>:
{
 80025dc:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80025de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025e2:	4802      	ldr	r0, [pc, #8]	; (80025ec <OnJoinTimerLedEvent+0x10>)
 80025e4:	f001 fccd 	bl	8003f82 <HAL_GPIO_TogglePin>
}
 80025e8:	bd08      	pop	{r3, pc}
 80025ea:	bf00      	nop
 80025ec:	48000400 	.word	0x48000400

080025f0 <LoRaWAN_Init>:
{
 80025f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f4:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 80025f6:	2400      	movs	r4, #0
 80025f8:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80025fa:	9402      	str	r4, [sp, #8]
 80025fc:	2502      	movs	r5, #2
 80025fe:	9501      	str	r5, [sp, #4]
 8002600:	2601      	movs	r6, #1
 8002602:	9600      	str	r6, [sp, #0]
 8002604:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <LoRaWAN_Init+0x144>)
 8002606:	4622      	mov	r2, r4
 8002608:	4621      	mov	r1, r4
 800260a:	4628      	mov	r0, r5
 800260c:	f00d fe98 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002610:	9402      	str	r4, [sp, #8]
 8002612:	2704      	movs	r7, #4
 8002614:	9701      	str	r7, [sp, #4]
 8002616:	9500      	str	r5, [sp, #0]
 8002618:	4b47      	ldr	r3, [pc, #284]	; (8002738 <LoRaWAN_Init+0x148>)
 800261a:	4622      	mov	r2, r4
 800261c:	4621      	mov	r1, r4
 800261e:	4628      	mov	r0, r5
 8002620:	f00d fe8e 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002624:	9402      	str	r4, [sp, #8]
 8002626:	9501      	str	r5, [sp, #4]
 8002628:	9600      	str	r6, [sp, #0]
 800262a:	4b44      	ldr	r3, [pc, #272]	; (800273c <LoRaWAN_Init+0x14c>)
 800262c:	4622      	mov	r2, r4
 800262e:	4621      	mov	r1, r4
 8002630:	4628      	mov	r0, r5
 8002632:	f00d fe85 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002636:	a905      	add	r1, sp, #20
 8002638:	4620      	mov	r0, r4
 800263a:	f005 f829 	bl	8007690 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800263e:	9b05      	ldr	r3, [sp, #20]
 8002640:	0e1a      	lsrs	r2, r3, #24
 8002642:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002646:	9102      	str	r1, [sp, #8]
 8002648:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	9200      	str	r2, [sp, #0]
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <LoRaWAN_Init+0x150>)
 8002652:	4622      	mov	r2, r4
 8002654:	4621      	mov	r1, r4
 8002656:	4628      	mov	r0, r5
 8002658:	f00d fe72 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800265c:	a905      	add	r1, sp, #20
 800265e:	4630      	mov	r0, r6
 8002660:	f005 f816 	bl	8007690 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002664:	9b05      	ldr	r3, [sp, #20]
 8002666:	0e1a      	lsrs	r2, r3, #24
 8002668:	b2d9      	uxtb	r1, r3
 800266a:	9103      	str	r1, [sp, #12]
 800266c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002670:	9102      	str	r1, [sp, #8]
 8002672:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	9200      	str	r2, [sp, #0]
 800267a:	4b32      	ldr	r3, [pc, #200]	; (8002744 <LoRaWAN_Init+0x154>)
 800267c:	4622      	mov	r2, r4
 800267e:	4621      	mov	r1, r4
 8002680:	4628      	mov	r0, r5
 8002682:	f00d fe5d 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002686:	9400      	str	r4, [sp, #0]
 8002688:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <LoRaWAN_Init+0x158>)
 800268a:	4622      	mov	r2, r4
 800268c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002690:	482e      	ldr	r0, [pc, #184]	; (800274c <LoRaWAN_Init+0x15c>)
 8002692:	f00e f94b 	bl	801092c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002696:	9400      	str	r4, [sp, #0]
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <LoRaWAN_Init+0x160>)
 800269a:	4622      	mov	r2, r4
 800269c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026a0:	482c      	ldr	r0, [pc, #176]	; (8002754 <LoRaWAN_Init+0x164>)
 80026a2:	f00e f943 	bl	801092c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80026a6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002758 <LoRaWAN_Init+0x168>
 80026aa:	9400      	str	r4, [sp, #0]
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <LoRaWAN_Init+0x16c>)
 80026ae:	4632      	mov	r2, r6
 80026b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026b4:	4640      	mov	r0, r8
 80026b6:	f00e f939 	bl	801092c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80026ba:	9400      	str	r4, [sp, #0]
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <LoRaWAN_Init+0x170>)
 80026be:	4622      	mov	r2, r4
 80026c0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80026c4:	4827      	ldr	r0, [pc, #156]	; (8002764 <LoRaWAN_Init+0x174>)
 80026c6:	f00e f931 	bl	801092c <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80026ca:	4a27      	ldr	r2, [pc, #156]	; (8002768 <LoRaWAN_Init+0x178>)
 80026cc:	4621      	mov	r1, r4
 80026ce:	4630      	mov	r0, r6
 80026d0:	f00e f82c 	bl	801072c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80026d4:	4a25      	ldr	r2, [pc, #148]	; (800276c <LoRaWAN_Init+0x17c>)
 80026d6:	4621      	mov	r1, r4
 80026d8:	4628      	mov	r0, r5
 80026da:	f00e f827 	bl	801072c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <LoRaWAN_Init+0x180>)
 80026e0:	4621      	mov	r1, r4
 80026e2:	4638      	mov	r0, r7
 80026e4:	f00e f822 	bl	801072c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80026e8:	4a22      	ldr	r2, [pc, #136]	; (8002774 <LoRaWAN_Init+0x184>)
 80026ea:	4621      	mov	r1, r4
 80026ec:	2008      	movs	r0, #8
 80026ee:	f00e f81d 	bl	801072c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80026f2:	f000 f85d 	bl	80027b0 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80026f6:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 80026fa:	481f      	ldr	r0, [pc, #124]	; (8002778 <LoRaWAN_Init+0x188>)
 80026fc:	f004 ff8e 	bl	800761c <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002700:	481e      	ldr	r0, [pc, #120]	; (800277c <LoRaWAN_Init+0x18c>)
 8002702:	f004 fe57 	bl	80073b4 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002706:	4640      	mov	r0, r8
 8002708:	f00e f9c8 	bl	8010a9c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 800270c:	4621      	mov	r1, r4
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <LoRaWAN_Init+0x190>)
 8002710:	7818      	ldrb	r0, [r3, #0]
 8002712:	f004 fbe5 	bl	8006ee0 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002716:	4d1b      	ldr	r5, [pc, #108]	; (8002784 <LoRaWAN_Init+0x194>)
 8002718:	9400      	str	r4, [sp, #0]
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <LoRaWAN_Init+0x198>)
 800271c:	4622      	mov	r2, r4
 800271e:	491b      	ldr	r1, [pc, #108]	; (800278c <LoRaWAN_Init+0x19c>)
 8002720:	6809      	ldr	r1, [r1, #0]
 8002722:	4628      	mov	r0, r5
 8002724:	f00e f902 	bl	801092c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002728:	4628      	mov	r0, r5
 800272a:	f00e f9b7 	bl	8010a9c <UTIL_TIMER_Start>
}
 800272e:	b006      	add	sp, #24
 8002730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002734:	0801142c 	.word	0x0801142c
 8002738:	08011450 	.word	0x08011450
 800273c:	08011474 	.word	0x08011474
 8002740:	08011498 	.word	0x08011498
 8002744:	080114bc 	.word	0x080114bc
 8002748:	080021e1 	.word	0x080021e1
 800274c:	2000041c 	.word	0x2000041c
 8002750:	080021cd 	.word	0x080021cd
 8002754:	200003ec 	.word	0x200003ec
 8002758:	200003d4 	.word	0x200003d4
 800275c:	080025dd 	.word	0x080025dd
 8002760:	08002189 	.word	0x08002189
 8002764:	20000404 	.word	0x20000404
 8002768:	080070f1 	.word	0x080070f1
 800276c:	08002431 	.word	0x08002431
 8002770:	080023f9 	.word	0x080023f9
 8002774:	0800235d 	.word	0x0800235d
 8002778:	2000000c 	.word	0x2000000c
 800277c:	20000058 	.word	0x20000058
 8002780:	20000000 	.word	0x20000000
 8002784:	20000434 	.word	0x20000434
 8002788:	08001fdd 	.word	0x08001fdd
 800278c:	2000006c 	.word	0x2000006c

08002790 <HAL_GPIO_EXTI_Callback>:
{
 8002790:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002792:	2802      	cmp	r0, #2
 8002794:	d002      	beq.n	800279c <HAL_GPIO_EXTI_Callback+0xc>
 8002796:	2840      	cmp	r0, #64	; 0x40
 8002798:	d005      	beq.n	80027a6 <HAL_GPIO_EXTI_Callback+0x16>
}
 800279a:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800279c:	2100      	movs	r1, #0
 800279e:	2008      	movs	r0, #8
 80027a0:	f00d fef8 	bl	8010594 <UTIL_SEQ_SetTask>
      break;
 80027a4:	e7f9      	b.n	800279a <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 80027a6:	2100      	movs	r1, #0
 80027a8:	2004      	movs	r0, #4
 80027aa:	f00d fef3 	bl	8010594 <UTIL_SEQ_SetTask>
}
 80027ae:	e7f4      	b.n	800279a <HAL_GPIO_EXTI_Callback+0xa>

080027b0 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <LoraInfo_Init+0x18>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80027b6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80027b8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80027ba:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 80027bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c0:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80027c2:	2203      	movs	r2, #3
 80027c4:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80027c6:	4770      	bx	lr
 80027c8:	2000044c 	.word	0x2000044c

080027cc <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80027cc:	4800      	ldr	r0, [pc, #0]	; (80027d0 <LoraInfo_GetPtr+0x4>)
 80027ce:	4770      	bx	lr
 80027d0:	2000044c 	.word	0x2000044c

080027d4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80027d4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80027d6:	f000 f83f 	bl	8002858 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027da:	bd08      	pop	{r3, pc}

080027dc <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80027dc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80027de:	f000 f87d 	bl	80028dc <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80027e2:	bd08      	pop	{r3, pc}

080027e4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80027e4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80027e6:	f000 f8c7 	bl	8002978 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80027ea:	bd08      	pop	{r3, pc}

080027ec <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80027ec:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80027ee:	f000 f8c5 	bl	800297c <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027f2:	bd08      	pop	{r3, pc}

080027f4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80027f4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80027f6:	f000 f8c3 	bl	8002980 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027fa:	bd08      	pop	{r3, pc}

080027fc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80027fc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80027fe:	f000 f8c1 	bl	8002984 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002802:	bd08      	pop	{r3, pc}

08002804 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002804:	480d      	ldr	r0, [pc, #52]	; (800283c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002806:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002808:	f000 f8c1 	bl	800298e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <LoopForever+0x6>)
  ldr r1, =_edata
 800280e:	490d      	ldr	r1, [pc, #52]	; (8002844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <LoopForever+0xe>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002814:	e002      	b.n	800281c <LoopCopyDataInit>

08002816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281a:	3304      	adds	r3, #4

0800281c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800281c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002820:	d3f9      	bcc.n	8002816 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002824:	4c0a      	ldr	r4, [pc, #40]	; (8002850 <LoopForever+0x16>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002828:	e001      	b.n	800282e <LoopFillZerobss>

0800282a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800282c:	3204      	adds	r2, #4

0800282e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002830:	d3fb      	bcc.n	800282a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002832:	f00e fb39 	bl	8010ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002836:	f7fe fe46 	bl	80014c6 <main>

0800283a <LoopForever>:

LoopForever:
    b LoopForever
 800283a:	e7fe      	b.n	800283a <LoopForever>
  ldr   r0, =_estack
 800283c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002844:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002848:	08011ec8 	.word	0x08011ec8
  ldr r2, =_sbss
 800284c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002850:	20001620 	.word	0x20001620

08002854 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC_IRQHandler>
	...

08002858 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800285c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800285e:	2400      	movs	r4, #0
 8002860:	9401      	str	r4, [sp, #4]
 8002862:	9402      	str	r4, [sp, #8]
 8002864:	9403      	str	r4, [sp, #12]
 8002866:	9404      	str	r4, [sp, #16]
 8002868:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002870:	f042 0204 	orr.w	r2, r2, #4
 8002874:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800287e:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002880:	2710      	movs	r7, #16
 8002882:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002884:	2301      	movs	r3, #1
 8002886:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800288c:	4d12      	ldr	r5, [pc, #72]	; (80028d8 <BSP_RADIO_Init+0x80>)
 800288e:	a901      	add	r1, sp, #4
 8002890:	4628      	mov	r0, r5
 8002892:	f001 fa21 	bl	8003cd8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002896:	f04f 0820 	mov.w	r8, #32
 800289a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800289e:	a901      	add	r1, sp, #4
 80028a0:	4628      	mov	r0, r5
 80028a2:	f001 fa19 	bl	8003cd8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80028a6:	2608      	movs	r6, #8
 80028a8:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80028aa:	a901      	add	r1, sp, #4
 80028ac:	4628      	mov	r0, r5
 80028ae:	f001 fa13 	bl	8003cd8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80028b2:	4622      	mov	r2, r4
 80028b4:	4641      	mov	r1, r8
 80028b6:	4628      	mov	r0, r5
 80028b8:	f001 fb5e 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80028bc:	4622      	mov	r2, r4
 80028be:	4639      	mov	r1, r7
 80028c0:	4628      	mov	r0, r5
 80028c2:	f001 fb59 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80028c6:	4622      	mov	r2, r4
 80028c8:	4631      	mov	r1, r6
 80028ca:	4628      	mov	r0, r5
 80028cc:	f001 fb54 	bl	8003f78 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80028d0:	4620      	mov	r0, r4
 80028d2:	b006      	add	sp, #24
 80028d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d8:	48000800 	.word	0x48000800

080028dc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80028dc:	b510      	push	{r4, lr}
  switch (Config)
 80028de:	2803      	cmp	r0, #3
 80028e0:	d813      	bhi.n	800290a <BSP_RADIO_ConfigRFSwitch+0x2e>
 80028e2:	e8df f000 	tbb	[pc, r0]
 80028e6:	1402      	.short	0x1402
 80028e8:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80028ea:	4c22      	ldr	r4, [pc, #136]	; (8002974 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	2108      	movs	r1, #8
 80028f0:	4620      	mov	r0, r4
 80028f2:	f001 fb41 	bl	8003f78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2110      	movs	r1, #16
 80028fa:	4620      	mov	r0, r4
 80028fc:	f001 fb3c 	bl	8003f78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	2120      	movs	r1, #32
 8002904:	4620      	mov	r0, r4
 8002906:	f001 fb37 	bl	8003f78 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800290a:	2000      	movs	r0, #0
 800290c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800290e:	4c19      	ldr	r4, [pc, #100]	; (8002974 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002910:	2201      	movs	r2, #1
 8002912:	2108      	movs	r1, #8
 8002914:	4620      	mov	r0, r4
 8002916:	f001 fb2f 	bl	8003f78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800291a:	2201      	movs	r2, #1
 800291c:	2110      	movs	r1, #16
 800291e:	4620      	mov	r0, r4
 8002920:	f001 fb2a 	bl	8003f78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002924:	2200      	movs	r2, #0
 8002926:	2120      	movs	r1, #32
 8002928:	4620      	mov	r0, r4
 800292a:	f001 fb25 	bl	8003f78 <HAL_GPIO_WritePin>
      break;
 800292e:	e7ec      	b.n	800290a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002930:	4c10      	ldr	r4, [pc, #64]	; (8002974 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002932:	2201      	movs	r2, #1
 8002934:	2108      	movs	r1, #8
 8002936:	4620      	mov	r0, r4
 8002938:	f001 fb1e 	bl	8003f78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800293c:	2201      	movs	r2, #1
 800293e:	2110      	movs	r1, #16
 8002940:	4620      	mov	r0, r4
 8002942:	f001 fb19 	bl	8003f78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002946:	2201      	movs	r2, #1
 8002948:	2120      	movs	r1, #32
 800294a:	4620      	mov	r0, r4
 800294c:	f001 fb14 	bl	8003f78 <HAL_GPIO_WritePin>
      break;
 8002950:	e7db      	b.n	800290a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002952:	4c08      	ldr	r4, [pc, #32]	; (8002974 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002954:	2201      	movs	r2, #1
 8002956:	2108      	movs	r1, #8
 8002958:	4620      	mov	r0, r4
 800295a:	f001 fb0d 	bl	8003f78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800295e:	2200      	movs	r2, #0
 8002960:	2110      	movs	r1, #16
 8002962:	4620      	mov	r0, r4
 8002964:	f001 fb08 	bl	8003f78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002968:	2201      	movs	r2, #1
 800296a:	2120      	movs	r1, #32
 800296c:	4620      	mov	r0, r4
 800296e:	f001 fb03 	bl	8003f78 <HAL_GPIO_WritePin>
      break;
 8002972:	e7ca      	b.n	800290a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002974:	48000800 	.word	0x48000800

08002978 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002978:	2000      	movs	r0, #0
 800297a:	4770      	bx	lr

0800297c <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 800297c:	2001      	movs	r0, #1
 800297e:	4770      	bx	lr

08002980 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002980:	2001      	movs	r0, #1
 8002982:	4770      	bx	lr

08002984 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002984:	b908      	cbnz	r0, 800298a <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002986:	200f      	movs	r0, #15
 8002988:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800298a:	2016      	movs	r0, #22
  }

  return ret;
}
 800298c:	4770      	bx	lr

0800298e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800298e:	4770      	bx	lr

08002990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002990:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002992:	2003      	movs	r0, #3
 8002994:	f000 fd2e 	bl	80033f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002998:	f001 fc94 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_Init+0x28>)
 800299e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a0:	200f      	movs	r0, #15
 80029a2:	f7fe ff77 	bl	8001894 <HAL_InitTick>
 80029a6:	b110      	cbz	r0, 80029ae <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80029a8:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80029aa:	4620      	mov	r0, r4
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	4604      	mov	r4, r0
    HAL_MspInit();
 80029b0:	f7fe fe34 	bl	800161c <HAL_MspInit>
 80029b4:	e7f9      	b.n	80029aa <HAL_Init+0x1a>
 80029b6:	bf00      	nop
 80029b8:	20000070 	.word	0x20000070

080029bc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029bc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80029c0:	6913      	ldr	r3, [r2, #16]
 80029c2:	f023 0302 	bic.w	r3, r3, #2
 80029c6:	6113      	str	r3, [r2, #16]
}
 80029c8:	4770      	bx	lr

080029ca <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029ca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80029ce:	6913      	ldr	r3, [r2, #16]
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	6113      	str	r3, [r2, #16]
}
 80029d6:	4770      	bx	lr

080029d8 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 80029d8:	4b01      	ldr	r3, [pc, #4]	; (80029e0 <HAL_GetUIDw0+0x8>)
 80029da:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 80029de:	4770      	bx	lr
 80029e0:	1fff7000 	.word	0x1fff7000

080029e4 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80029e4:	4b01      	ldr	r3, [pc, #4]	; (80029ec <HAL_GetUIDw1+0x8>)
 80029e6:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 80029ea:	4770      	bx	lr
 80029ec:	1fff7000 	.word	0x1fff7000

080029f0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80029f0:	4b01      	ldr	r3, [pc, #4]	; (80029f8 <HAL_GetUIDw2+0x8>)
 80029f2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80029f6:	4770      	bx	lr
 80029f8:	1fff7000 	.word	0x1fff7000

080029fc <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80029fc:	4a02      	ldr	r2, [pc, #8]	; (8002a08 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80029fe:	6853      	ldr	r3, [r2, #4]
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002a06:	4770      	bx	lr
 8002a08:	e0042000 	.word	0xe0042000

08002a0c <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002a0c:	4a02      	ldr	r2, [pc, #8]	; (8002a18 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002a0e:	6853      	ldr	r3, [r2, #4]
 8002a10:	f023 0302 	bic.w	r3, r3, #2
 8002a14:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002a16:	4770      	bx	lr
 8002a18:	e0042000 	.word	0xe0042000

08002a1c <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002a1c:	4a02      	ldr	r2, [pc, #8]	; (8002a28 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002a1e:	6853      	ldr	r3, [r2, #4]
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002a26:	4770      	bx	lr
 8002a28:	e0042000 	.word	0xe0042000

08002a2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a34:	2800      	cmp	r0, #0
 8002a36:	f000 811b 	beq.w	8002c70 <HAL_ADC_Init+0x244>
 8002a3a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a3c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002a3e:	b1bb      	cbz	r3, 8002a70 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a40:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a42:	6893      	ldr	r3, [r2, #8]
 8002a44:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a48:	d11f      	bne.n	8002a8a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002a4a:	6893      	ldr	r3, [r2, #8]
 8002a4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a50:	f023 0317 	bic.w	r3, r3, #23
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a5a:	4b86      	ldr	r3, [pc, #536]	; (8002c74 <HAL_ADC_Init+0x248>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	4a85      	ldr	r2, [pc, #532]	; (8002c78 <HAL_ADC_Init+0x24c>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	3301      	adds	r3, #1
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a6e:	e009      	b.n	8002a84 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002a70:	f7fe fa48 	bl	8000f04 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a74:	2300      	movs	r3, #0
 8002a76:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002a78:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002a7c:	e7e0      	b.n	8002a40 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002a7e:	9b01      	ldr	r3, [sp, #4]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a84:	9b01      	ldr	r3, [sp, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f9      	bne.n	8002a7e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a8a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a8c:	6893      	ldr	r3, [r2, #8]
 8002a8e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a92:	f040 809c 	bne.w	8002bce <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a98:	f043 0310 	orr.w	r3, r3, #16
 8002a9c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aa6:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aa8:	6893      	ldr	r3, [r2, #8]
 8002aaa:	f013 0304 	ands.w	r3, r3, #4
 8002aae:	d000      	beq.n	8002ab2 <HAL_ADC_Init+0x86>
 8002ab0:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ab2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002ab4:	f011 0f10 	tst.w	r1, #16
 8002ab8:	f040 80d3 	bne.w	8002c62 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 80d0 	bne.w	8002c62 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002ac4:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002ac8:	f041 0102 	orr.w	r1, r1, #2
 8002acc:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ace:	6891      	ldr	r1, [r2, #8]
 8002ad0:	f011 0f01 	tst.w	r1, #1
 8002ad4:	d151      	bne.n	8002b7a <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002ad6:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002ad8:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002ada:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002ade:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002ae0:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002ae4:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002ae6:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002aea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002aec:	b10d      	cbz	r5, 8002af2 <HAL_ADC_Init+0xc6>
 8002aee:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002af2:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8002af4:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002af6:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002af8:	6925      	ldr	r5, [r4, #16]
 8002afa:	2d00      	cmp	r5, #0
 8002afc:	db69      	blt.n	8002bd2 <HAL_ADC_Init+0x1a6>
 8002afe:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002b02:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b04:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002b08:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b0c:	f894 5020 	ldrb.w	r5, [r4, #32]
 8002b10:	2d01      	cmp	r5, #1
 8002b12:	d061      	beq.n	8002bd8 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b14:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002b16:	b125      	cbz	r5, 8002b22 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b18:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002b1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b1e:	4335      	orrs	r5, r6
 8002b20:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b22:	68d5      	ldr	r5, [r2, #12]
 8002b24:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8002b28:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8002b2c:	ea4c 0101 	orr.w	r1, ip, r1
 8002b30:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b32:	6862      	ldr	r2, [r4, #4]
 8002b34:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002b38:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b3a:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b3e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002b42:	2901      	cmp	r1, #1
 8002b44:	d055      	beq.n	8002bf2 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002b46:	6822      	ldr	r2, [r4, #0]
 8002b48:	6916      	ldr	r6, [r2, #16]
 8002b4a:	494c      	ldr	r1, [pc, #304]	; (8002c7c <HAL_ADC_Init+0x250>)
 8002b4c:	4031      	ands	r1, r6
 8002b4e:	4329      	orrs	r1, r5
 8002b50:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b52:	6862      	ldr	r2, [r4, #4]
 8002b54:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8002b58:	d00f      	beq.n	8002b7a <HAL_ADC_Init+0x14e>
 8002b5a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002b5e:	d00c      	beq.n	8002b7a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002b64:	d009      	beq.n	8002b7a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002b66:	4d46      	ldr	r5, [pc, #280]	; (8002c80 <HAL_ADC_Init+0x254>)
 8002b68:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8002b6c:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8002b70:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8002b74:	430a      	orrs	r2, r1
 8002b76:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002b7a:	6825      	ldr	r5, [r4, #0]
 8002b7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002b7e:	6969      	ldr	r1, [r5, #20]
 8002b80:	f021 0107 	bic.w	r1, r1, #7
 8002b84:	430a      	orrs	r2, r1
 8002b86:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b88:	6821      	ldr	r1, [r4, #0]
 8002b8a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002b8c:	694a      	ldr	r2, [r1, #20]
 8002b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b92:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002b96:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b98:	6922      	ldr	r2, [r4, #16]
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d133      	bne.n	8002c06 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002b9e:	6822      	ldr	r2, [r4, #0]
 8002ba0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002ba2:	f063 030f 	orn	r3, r3, #15
 8002ba6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ba8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002bb0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d04c      	beq.n	8002c50 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bb8:	f023 0312 	bic.w	r3, r3, #18
 8002bbc:	f043 0310 	orr.w	r3, r3, #16
 8002bc0:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002bca:	2001      	movs	r0, #1
 8002bcc:	e04e      	b.n	8002c6c <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bce:	2000      	movs	r0, #0
 8002bd0:	e76a      	b.n	8002aa8 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002bd2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8002bd6:	e794      	b.n	8002b02 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bd8:	b916      	cbnz	r6, 8002be0 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002bda:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002bde:	e799      	b.n	8002b14 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be0:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8002be2:	f045 0520 	orr.w	r5, r5, #32
 8002be6:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be8:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8002bea:	f045 0501 	orr.w	r5, r5, #1
 8002bee:	65e5      	str	r5, [r4, #92]	; 0x5c
 8002bf0:	e790      	b.n	8002b14 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8002bf2:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002bf4:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002bf6:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002bf8:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002bfa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002bfc:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002bfe:	432a      	orrs	r2, r5
 8002c00:	f042 0501 	orr.w	r5, r2, #1
 8002c04:	e79f      	b.n	8002b46 <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c06:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002c0a:	d1cd      	bne.n	8002ba8 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002c0c:	2b07      	cmp	r3, #7
 8002c0e:	d808      	bhi.n	8002c22 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002c10:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002c12:	0099      	lsls	r1, r3, #2
 8002c14:	40ca      	lsrs	r2, r1
 8002c16:	f002 020f 	and.w	r2, r2, #15
 8002c1a:	2a0f      	cmp	r2, #15
 8002c1c:	d001      	beq.n	8002c22 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002c1e:	3301      	adds	r3, #1
 8002c20:	e7f4      	b.n	8002c0c <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d00e      	beq.n	8002c44 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8002c26:	6821      	ldr	r1, [r4, #0]
 8002c28:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002c2a:	69e3      	ldr	r3, [r4, #28]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	f003 031c 	and.w	r3, r3, #28
 8002c34:	f06f 020f 	mvn.w	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	628b      	str	r3, [r1, #40]	; 0x28
 8002c42:	e7b1      	b.n	8002ba8 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8002c44:	6822      	ldr	r2, [r4, #0]
 8002c46:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002c48:	f063 030f 	orn	r3, r3, #15
 8002c4c:	6293      	str	r3, [r2, #40]	; 0x28
 8002c4e:	e7ab      	b.n	8002ba8 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002c50:	2300      	movs	r3, #0
 8002c52:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002c54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c60:	e004      	b.n	8002c6c <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c64:	f043 0310 	orr.w	r3, r3, #16
 8002c68:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c6a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
 8002c72:	e7fb      	b.n	8002c6c <HAL_ADC_Init+0x240>
 8002c74:	20000070 	.word	0x20000070
 8002c78:	053e2d63 	.word	0x053e2d63
 8002c7c:	1ffffc02 	.word	0x1ffffc02
 8002c80:	40012000 	.word	0x40012000

08002c84 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	4604      	mov	r4, r0
 8002c88:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c8a:	6946      	ldr	r6, [r0, #20]
 8002c8c:	2e08      	cmp	r6, #8
 8002c8e:	d005      	beq.n	8002c9c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002c90:	6803      	ldr	r3, [r0, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f013 0f01 	tst.w	r3, #1
 8002c98:	d11e      	bne.n	8002cd8 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002c9a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c9c:	f7fe fdfc 	bl	8001898 <HAL_GetTick>
 8002ca0:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4232      	tst	r2, r6
 8002ca8:	d11c      	bne.n	8002ce4 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002cae:	d0f8      	beq.n	8002ca2 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002cb0:	f7fe fdf2 	bl	8001898 <HAL_GetTick>
 8002cb4:	1bc3      	subs	r3, r0, r7
 8002cb6:	42ab      	cmp	r3, r5
 8002cb8:	d801      	bhi.n	8002cbe <HAL_ADC_PollForConversion+0x3a>
 8002cba:	2d00      	cmp	r5, #0
 8002cbc:	d1f1      	bne.n	8002ca2 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4233      	tst	r3, r6
 8002cc4:	d1ed      	bne.n	8002ca2 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002cd4:	2003      	movs	r0, #3
 8002cd6:	e028      	b.n	8002d2a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002cda:	f043 0320 	orr.w	r3, r3, #32
 8002cde:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	e022      	b.n	8002d2a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cea:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002cf2:	d115      	bne.n	8002d20 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002cf4:	7ea2      	ldrb	r2, [r4, #26]
 8002cf6:	b99a      	cbnz	r2, 8002d20 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	f012 0f08 	tst.w	r2, #8
 8002cfe:	d00f      	beq.n	8002d20 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	f012 0f04 	tst.w	r2, #4
 8002d06:	d111      	bne.n	8002d2c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	f022 020c 	bic.w	r2, r2, #12
 8002d0e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002d10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002d20:	7e20      	ldrb	r0, [r4, #24]
 8002d22:	b960      	cbnz	r0, 8002d3e <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d2e:	f043 0320 	orr.w	r3, r3, #32
 8002d32:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002d3c:	e7f0      	b.n	8002d20 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002d3e:	2000      	movs	r0, #0
 8002d40:	e7f3      	b.n	8002d2a <HAL_ADC_PollForConversion+0xa6>

08002d42 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d42:	6803      	ldr	r3, [r0, #0]
 8002d44:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002d46:	4770      	bx	lr

08002d48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002d48:	b470      	push	{r4, r5, r6}
 8002d4a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d50:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002d52:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	f000 8105 	beq.w	8002f66 <HAL_ADC_ConfigChannel+0x21e>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d64:	6802      	ldr	r2, [r0, #0]
 8002d66:	6890      	ldr	r0, [r2, #8]
 8002d68:	f010 0f04 	tst.w	r0, #4
 8002d6c:	d00a      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d70:	f042 0220 	orr.w	r2, r2, #32
 8002d74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d76:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002d7e:	b003      	add	sp, #12
 8002d80:	bc70      	pop	{r4, r5, r6}
 8002d82:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002d84:	6848      	ldr	r0, [r1, #4]
 8002d86:	2802      	cmp	r0, #2
 8002d88:	f000 809e 	beq.w	8002ec8 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d8c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002d90:	d029      	beq.n	8002de6 <HAL_ADC_ConfigChannel+0x9e>
 8002d92:	4d76      	ldr	r5, [pc, #472]	; (8002f6c <HAL_ADC_ConfigChannel+0x224>)
 8002d94:	42ac      	cmp	r4, r5
 8002d96:	d026      	beq.n	8002de6 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002d98:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002d9a:	f000 001f 	and.w	r0, r0, #31
 8002d9e:	250f      	movs	r5, #15
 8002da0:	4085      	lsls	r5, r0
 8002da2:	ea24 0505 	bic.w	r5, r4, r5
 8002da6:	680c      	ldr	r4, [r1, #0]
 8002da8:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002dac:	2e00      	cmp	r6, #0
 8002dae:	d133      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0xd0>
 8002db0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002db4:	fa04 f000 	lsl.w	r0, r4, r0
 8002db8:	4328      	orrs	r0, r5
 8002dba:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002dbc:	684c      	ldr	r4, [r1, #4]
 8002dbe:	08a0      	lsrs	r0, r4, #2
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	69dd      	ldr	r5, [r3, #28]
 8002dc4:	42a8      	cmp	r0, r5
 8002dc6:	d814      	bhi.n	8002df2 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002dc8:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002dca:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002dcc:	f004 041f 	and.w	r4, r4, #31
 8002dd0:	260f      	movs	r6, #15
 8002dd2:	40a6      	lsls	r6, r4
 8002dd4:	ea20 0006 	bic.w	r0, r0, r6
 8002dd8:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002ddc:	fa05 f404 	lsl.w	r4, r5, r4
 8002de0:	4304      	orrs	r4, r0
 8002de2:	6294      	str	r4, [r2, #40]	; 0x28
}
 8002de4:	e005      	b.n	8002df2 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002de6:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002de8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002dea:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002dee:	4320      	orrs	r0, r4
 8002df0:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002df2:	681c      	ldr	r4, [r3, #0]
 8002df4:	680d      	ldr	r5, [r1, #0]
 8002df6:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002df8:	6960      	ldr	r0, [r4, #20]
 8002dfa:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002dfe:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002e02:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002e06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e0a:	4302      	orrs	r2, r0
 8002e0c:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e0e:	680a      	ldr	r2, [r1, #0]
 8002e10:	2a00      	cmp	r2, #0
 8002e12:	db09      	blt.n	8002e28 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e14:	2000      	movs	r0, #0
 8002e16:	e7af      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e1c:	b114      	cbz	r4, 8002e24 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002e1e:	fab4 f484 	clz	r4, r4
 8002e22:	e7c7      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002e24:	2420      	movs	r4, #32
 8002e26:	e7c5      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e28:	4951      	ldr	r1, [pc, #324]	; (8002f70 <HAL_ADC_ConfigChannel+0x228>)
 8002e2a:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8002e2e:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e32:	4c50      	ldr	r4, [pc, #320]	; (8002f74 <HAL_ADC_ConfigChannel+0x22c>)
 8002e34:	42a2      	cmp	r2, r4
 8002e36:	d007      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e38:	4c4f      	ldr	r4, [pc, #316]	; (8002f78 <HAL_ADC_ConfigChannel+0x230>)
 8002e3a:	42a2      	cmp	r2, r4
 8002e3c:	d026      	beq.n	8002e8c <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e3e:	4c4f      	ldr	r4, [pc, #316]	; (8002f7c <HAL_ADC_ConfigChannel+0x234>)
 8002e40:	42a2      	cmp	r2, r4
 8002e42:	d032      	beq.n	8002eaa <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e44:	2000      	movs	r0, #0
 8002e46:	e797      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002e4c:	d1f4      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e52:	4847      	ldr	r0, [pc, #284]	; (8002f70 <HAL_ADC_ConfigChannel+0x228>)
 8002e54:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002e58:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e62:	4a47      	ldr	r2, [pc, #284]	; (8002f80 <HAL_ADC_ConfigChannel+0x238>)
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	0992      	lsrs	r2, r2, #6
 8002e68:	4946      	ldr	r1, [pc, #280]	; (8002f84 <HAL_ADC_ConfigChannel+0x23c>)
 8002e6a:	fba1 1202 	umull	r1, r2, r1, r2
 8002e6e:	0992      	lsrs	r2, r2, #6
 8002e70:	3201      	adds	r2, #1
 8002e72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002e76:	0092      	lsls	r2, r2, #2
 8002e78:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002e7a:	e002      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8002e7c:	9a01      	ldr	r2, [sp, #4]
 8002e7e:	3a01      	subs	r2, #1
 8002e80:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002e82:	9a01      	ldr	r2, [sp, #4]
 8002e84:	2a00      	cmp	r2, #0
 8002e86:	d1f9      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e88:	2000      	movs	r0, #0
 8002e8a:	e775      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e8c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002e90:	d1d5      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e92:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002e96:	4836      	ldr	r0, [pc, #216]	; (8002f70 <HAL_ADC_ConfigChannel+0x228>)
 8002e98:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002e9c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea6:	2000      	movs	r0, #0
}
 8002ea8:	e766      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002eaa:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002eae:	d158      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eb0:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002eb4:	482e      	ldr	r0, [pc, #184]	; (8002f70 <HAL_ADC_ConfigChannel+0x228>)
 8002eb6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002eba:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec4:	2000      	movs	r0, #0
}
 8002ec6:	e757      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ec8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002ecc:	d002      	beq.n	8002ed4 <HAL_ADC_ConfigChannel+0x18c>
 8002ece:	4827      	ldr	r0, [pc, #156]	; (8002f6c <HAL_ADC_ConfigChannel+0x224>)
 8002ed0:	4284      	cmp	r4, r0
 8002ed2:	d106      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002ed4:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ed6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002ed8:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002edc:	ea20 0004 	bic.w	r0, r0, r4
 8002ee0:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ee2:	680a      	ldr	r2, [r1, #0]
 8002ee4:	2a00      	cmp	r2, #0
 8002ee6:	db01      	blt.n	8002eec <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee8:	2000      	movs	r0, #0
 8002eea:	e745      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002eec:	4920      	ldr	r1, [pc, #128]	; (8002f70 <HAL_ADC_ConfigChannel+0x228>)
 8002eee:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef2:	4820      	ldr	r0, [pc, #128]	; (8002f74 <HAL_ADC_ConfigChannel+0x22c>)
 8002ef4:	4282      	cmp	r2, r0
 8002ef6:	d007      	beq.n	8002f08 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ef8:	481f      	ldr	r0, [pc, #124]	; (8002f78 <HAL_ADC_ConfigChannel+0x230>)
 8002efa:	4282      	cmp	r2, r0
 8002efc:	d013      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002efe:	481f      	ldr	r0, [pc, #124]	; (8002f7c <HAL_ADC_ConfigChannel+0x234>)
 8002f00:	4282      	cmp	r2, r0
 8002f02:	d01f      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f04:	2000      	movs	r0, #0
 8002f06:	e737      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f08:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f0c:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8002f10:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8002f14:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002f18:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002f1c:	4311      	orrs	r1, r2
 8002f1e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f22:	2000      	movs	r0, #0
}
 8002f24:	e728      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f26:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f2a:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8002f2e:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8002f32:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002f36:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2000      	movs	r0, #0
}
 8002f42:	e719      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f44:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f48:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8002f4c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002f50:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002f54:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5e:	2000      	movs	r0, #0
}
 8002f60:	e70a      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
 8002f62:	2000      	movs	r0, #0
 8002f64:	e708      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8002f66:	2002      	movs	r0, #2
 8002f68:	e709      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x36>
 8002f6a:	bf00      	nop
 8002f6c:	80000004 	.word	0x80000004
 8002f70:	40012000 	.word	0x40012000
 8002f74:	b0001000 	.word	0xb0001000
 8002f78:	b8004000 	.word	0xb8004000
 8002f7c:	b4002000 	.word	0xb4002000
 8002f80:	20000070 	.word	0x20000070
 8002f84:	053e2d63 	.word	0x053e2d63

08002f88 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002f88:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f8a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	f012 0f04 	tst.w	r2, #4
 8002f92:	d02a      	beq.n	8002fea <ADC_ConversionStop+0x62>
 8002f94:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	f012 0f02 	tst.w	r2, #2
 8002f9c:	d107      	bne.n	8002fae <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fa4:	f022 0217 	bic.w	r2, r2, #23
 8002fa8:	f042 0210 	orr.w	r2, r2, #16
 8002fac:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fc73 	bl	8001898 <HAL_GetTick>
 8002fb2:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f013 0f04 	tst.w	r3, #4
 8002fbc:	d013      	beq.n	8002fe6 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fbe:	f7fe fc6b 	bl	8001898 <HAL_GetTick>
 8002fc2:	1b43      	subs	r3, r0, r5
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d9f5      	bls.n	8002fb4 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f013 0f04 	tst.w	r3, #4
 8002fd0:	d0f0      	beq.n	8002fb4 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fd4:	f043 0310 	orr.w	r3, r3, #16
 8002fd8:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	e002      	b.n	8002fec <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	e000      	b.n	8002fec <ADC_ConversionStop+0x64>
 8002fea:	2000      	movs	r0, #0
}
 8002fec:	bd38      	pop	{r3, r4, r5, pc}
	...

08002ff0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b530      	push	{r4, r5, lr}
 8002ff2:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	f012 0f01 	tst.w	r2, #1
 8003000:	d15b      	bne.n	80030ba <ADC_Enable+0xca>
 8003002:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003004:	6899      	ldr	r1, [r3, #8]
 8003006:	4a2e      	ldr	r2, [pc, #184]	; (80030c0 <ADC_Enable+0xd0>)
 8003008:	4211      	tst	r1, r2
 800300a:	d117      	bne.n	800303c <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003012:	f022 0217 	bic.w	r2, r2, #23
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800301c:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <ADC_Enable+0xd4>)
 800301e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003022:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003026:	d019      	beq.n	800305c <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003028:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <ADC_Enable+0xd8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	4a27      	ldr	r2, [pc, #156]	; (80030cc <ADC_Enable+0xdc>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	3301      	adds	r3, #1
 8003038:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800303a:	e00c      	b.n	8003056 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800303e:	f043 0310 	orr.w	r3, r3, #16
 8003042:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003044:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800304c:	2001      	movs	r0, #1
 800304e:	e035      	b.n	80030bc <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003050:	9b01      	ldr	r3, [sp, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003056:	9b01      	ldr	r3, [sp, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f9      	bne.n	8003050 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800305c:	7e63      	ldrb	r3, [r4, #25]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003062:	2000      	movs	r0, #0
 8003064:	e02a      	b.n	80030bc <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003066:	f7fe fc17 	bl	8001898 <HAL_GetTick>
 800306a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	f012 0f01 	tst.w	r2, #1
 8003074:	d11f      	bne.n	80030b6 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	f012 0f01 	tst.w	r2, #1
 800307c:	d107      	bne.n	800308e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003084:	f022 0217 	bic.w	r2, r2, #23
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800308e:	f7fe fc03 	bl	8001898 <HAL_GetTick>
 8003092:	1b40      	subs	r0, r0, r5
 8003094:	2802      	cmp	r0, #2
 8003096:	d9e9      	bls.n	800306c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f013 0f01 	tst.w	r3, #1
 80030a0:	d1e4      	bne.n	800306c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030a4:	f043 0310 	orr.w	r3, r3, #16
 80030a8:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80030b2:	2001      	movs	r0, #1
 80030b4:	e002      	b.n	80030bc <ADC_Enable+0xcc>
  return HAL_OK;
 80030b6:	2000      	movs	r0, #0
 80030b8:	e000      	b.n	80030bc <ADC_Enable+0xcc>
 80030ba:	2000      	movs	r0, #0
}
 80030bc:	b003      	add	sp, #12
 80030be:	bd30      	pop	{r4, r5, pc}
 80030c0:	80000017 	.word	0x80000017
 80030c4:	40012000 	.word	0x40012000
 80030c8:	20000070 	.word	0x20000070
 80030cc:	053e2d63 	.word	0x053e2d63

080030d0 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f013 0f04 	tst.w	r3, #4
 80030d8:	d128      	bne.n	800312c <HAL_ADC_Start+0x5c>
{
 80030da:	b510      	push	{r4, lr}
 80030dc:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80030de:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d024      	beq.n	8003130 <HAL_ADC_Start+0x60>
 80030e6:	2301      	movs	r3, #1
 80030e8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80030ec:	f7ff ff80 	bl	8002ff0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80030f0:	b9c0      	cbnz	r0, 8003124 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80030f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003102:	2300      	movs	r3, #0
 8003104:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	211c      	movs	r1, #28
 800310a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 800310c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003110:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003112:	6893      	ldr	r3, [r2, #8]
 8003114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003118:	f023 0317 	bic.w	r3, r3, #23
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6093      	str	r3, [r2, #8]
}
 8003122:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003124:	2300      	movs	r3, #0
 8003126:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800312a:	e7fa      	b.n	8003122 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 800312c:	2002      	movs	r0, #2
}
 800312e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003130:	2002      	movs	r0, #2
 8003132:	e7f6      	b.n	8003122 <HAL_ADC_Start+0x52>

08003134 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003138:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800313a:	6893      	ldr	r3, [r2, #8]
 800313c:	f013 0302 	ands.w	r3, r3, #2
 8003140:	d000      	beq.n	8003144 <ADC_Disable+0x10>
 8003142:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003144:	6891      	ldr	r1, [r2, #8]
 8003146:	f011 0f01 	tst.w	r1, #1
 800314a:	d039      	beq.n	80031c0 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800314c:	2b00      	cmp	r3, #0
 800314e:	d139      	bne.n	80031c4 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003150:	6893      	ldr	r3, [r2, #8]
 8003152:	f003 0305 	and.w	r3, r3, #5
 8003156:	2b01      	cmp	r3, #1
 8003158:	d009      	beq.n	800316e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800315c:	f043 0310 	orr.w	r3, r3, #16
 8003160:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003162:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800316a:	2001      	movs	r0, #1
 800316c:	e029      	b.n	80031c2 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800316e:	6893      	ldr	r3, [r2, #8]
 8003170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003174:	f023 0317 	bic.w	r3, r3, #23
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	2203      	movs	r2, #3
 8003182:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003184:	f7fe fb88 	bl	8001898 <HAL_GetTick>
 8003188:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f013 0f01 	tst.w	r3, #1
 8003192:	d013      	beq.n	80031bc <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003194:	f7fe fb80 	bl	8001898 <HAL_GetTick>
 8003198:	1b40      	subs	r0, r0, r5
 800319a:	2802      	cmp	r0, #2
 800319c:	d9f5      	bls.n	800318a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f013 0f01 	tst.w	r3, #1
 80031a6:	d0f0      	beq.n	800318a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031aa:	f043 0310 	orr.w	r3, r3, #16
 80031ae:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80031b8:	2001      	movs	r0, #1
 80031ba:	e002      	b.n	80031c2 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031bc:	2000      	movs	r0, #0
 80031be:	e000      	b.n	80031c2 <ADC_Disable+0x8e>
 80031c0:	2000      	movs	r0, #0
}
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80031c4:	2000      	movs	r0, #0
 80031c6:	e7fc      	b.n	80031c2 <ADC_Disable+0x8e>

080031c8 <HAL_ADC_DeInit>:
{
 80031c8:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80031ca:	2800      	cmp	r0, #0
 80031cc:	d04c      	beq.n	8003268 <HAL_ADC_DeInit+0xa0>
 80031ce:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80031d0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80031d2:	f043 0302 	orr.w	r3, r3, #2
 80031d6:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80031d8:	f7ff fed6 	bl	8002f88 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80031dc:	4606      	mov	r6, r0
 80031de:	2800      	cmp	r0, #0
 80031e0:	d033      	beq.n	800324a <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80031e2:	6822      	ldr	r2, [r4, #0]
 80031e4:	6853      	ldr	r3, [r2, #4]
 80031e6:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f240 329f 	movw	r2, #927	; 0x39f
 80031f6:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80031f8:	6822      	ldr	r2, [r4, #0]
 80031fa:	68d1      	ldr	r1, [r2, #12]
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_ADC_DeInit+0xa4>)
 80031fe:	400b      	ands	r3, r1
 8003200:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	6913      	ldr	r3, [r2, #16]
 8003206:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800320a:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800320c:	6822      	ldr	r2, [r4, #0]
 800320e:	6953      	ldr	r3, [r2, #20]
 8003210:	f023 0307 	bic.w	r3, r3, #7
 8003214:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	6a13      	ldr	r3, [r2, #32]
 800321a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800321e:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003224:	2500      	movs	r5, #0
 8003226:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003228:	4a11      	ldr	r2, [pc, #68]	; (8003270 <HAL_ADC_DeInit+0xa8>)
 800322a:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 800322e:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003232:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003236:	4620      	mov	r0, r4
 8003238:	f7fd fe7a 	bl	8000f30 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800323c:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800323e:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003240:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003242:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003246:	4630      	mov	r0, r6
 8003248:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800324a:	4620      	mov	r0, r4
 800324c:	f7ff ff72 	bl	8003134 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003250:	4606      	mov	r6, r0
 8003252:	b908      	cbnz	r0, 8003258 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8003254:	2301      	movs	r3, #1
 8003256:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003258:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800325a:	6893      	ldr	r3, [r2, #8]
 800325c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003260:	f023 0317 	bic.w	r3, r3, #23
 8003264:	6093      	str	r3, [r2, #8]
}
 8003266:	e7bc      	b.n	80031e2 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003268:	2601      	movs	r6, #1
 800326a:	e7ec      	b.n	8003246 <HAL_ADC_DeInit+0x7e>
 800326c:	833e0200 	.word	0x833e0200
 8003270:	40012000 	.word	0x40012000

08003274 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003274:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003278:	2b01      	cmp	r3, #1
 800327a:	d019      	beq.n	80032b0 <HAL_ADC_Stop+0x3c>
{
 800327c:	b510      	push	{r4, lr}
 800327e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003280:	2301      	movs	r3, #1
 8003282:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003286:	f7ff fe7f 	bl	8002f88 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800328a:	b118      	cbz	r0, 8003294 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800328c:	2300      	movs	r3, #0
 800328e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003292:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff ff4d 	bl	8003134 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800329a:	2800      	cmp	r0, #0
 800329c:	d1f6      	bne.n	800328c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800329e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80032ae:	e7ed      	b.n	800328c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80032b0:	2002      	movs	r0, #2
}
 80032b2:	4770      	bx	lr

080032b4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80032b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80032bc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f000 8094 	beq.w	80033ee <HAL_ADCEx_Calibration_Start+0x13a>
 80032c6:	4604      	mov	r4, r0
 80032c8:	2301      	movs	r3, #1
 80032ca:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032ce:	f7ff ff31 	bl	8003134 <ADC_Disable>
 80032d2:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	f012 0201 	ands.w	r2, r2, #1
 80032dc:	d009      	beq.n	80032f2 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032e0:	f043 0310 	orr.w	r3, r3, #16
 80032e4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80032e6:	2300      	movs	r3, #0
 80032e8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80032ec:	4628      	mov	r0, r5
 80032ee:	b003      	add	sp, #12
 80032f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80032f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80032f4:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80032f8:	f041 0102 	orr.w	r1, r1, #2
 80032fc:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80032fe:	68de      	ldr	r6, [r3, #12]
 8003300:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003304:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003308:	0436      	lsls	r6, r6, #16
 800330a:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800330c:	68d9      	ldr	r1, [r3, #12]
 800330e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003312:	f021 0103 	bic.w	r1, r1, #3
 8003316:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003318:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800331a:	e005      	b.n	8003328 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800331c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003324:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003326:	3201      	adds	r2, #1
 8003328:	2a07      	cmp	r2, #7
 800332a:	d81e      	bhi.n	800336a <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 800332c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800332e:	688b      	ldr	r3, [r1, #8]
 8003330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003334:	f023 0317 	bic.w	r3, r3, #23
 8003338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800333c:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800333e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	2900      	cmp	r1, #0
 8003344:	daea      	bge.n	800331c <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003346:	9b01      	ldr	r3, [sp, #4]
 8003348:	3301      	adds	r3, #1
 800334a:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800334c:	9b01      	ldr	r3, [sp, #4]
 800334e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003352:	d3f4      	bcc.n	800333e <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003356:	f023 0312 	bic.w	r3, r3, #18
 800335a:	f043 0310 	orr.w	r3, r3, #16
 800335e:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003360:	2300      	movs	r3, #0
 8003362:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003366:	2501      	movs	r5, #1
 8003368:	e7c0      	b.n	80032ec <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800336a:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 800336e:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003370:	688b      	ldr	r3, [r1, #8]
 8003372:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003376:	f023 0317 	bic.w	r3, r3, #23
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003380:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003382:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003386:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 800338a:	4302      	orrs	r2, r0
 800338c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003390:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003392:	6893      	ldr	r3, [r2, #8]
 8003394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003398:	f023 0317 	bic.w	r3, r3, #23
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80033a2:	f7fe fa79 	bl	8001898 <HAL_GetTick>
 80033a6:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033a8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	f012 0f01 	tst.w	r2, #1
 80033b0:	d109      	bne.n	80033c6 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	4316      	orrs	r6, r2
 80033b6:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80033b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80033c4:	e78f      	b.n	80032e6 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033c6:	f7fe fa67 	bl	8001898 <HAL_GetTick>
 80033ca:	1bc3      	subs	r3, r0, r7
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d9eb      	bls.n	80033a8 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f013 0f01 	tst.w	r3, #1
 80033d8:	d0e6      	beq.n	80033a8 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033dc:	f043 0310 	orr.w	r3, r3, #16
 80033e0:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80033ea:	2501      	movs	r5, #1
 80033ec:	e77e      	b.n	80032ec <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 80033ee:	2502      	movs	r5, #2
 80033f0:	e77c      	b.n	80032ec <HAL_ADCEx_Calibration_Start+0x38>
	...

080033f4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f4:	4a07      	ldr	r2, [pc, #28]	; (8003414 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80033f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003400:	0200      	lsls	r0, r0, #8
 8003402:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003406:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003410:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341a:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_NVIC_SetPriority+0x68>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003422:	f1c3 0c07 	rsb	ip, r3, #7
 8003426:	f1bc 0f04 	cmp.w	ip, #4
 800342a:	bf28      	it	cs
 800342c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003430:	f103 0e04 	add.w	lr, r3, #4
 8003434:	f1be 0f06 	cmp.w	lr, #6
 8003438:	d918      	bls.n	800346c <HAL_NVIC_SetPriority+0x54>
 800343a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 3eff 	mov.w	lr, #4294967295
 8003440:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003444:	ea21 010c 	bic.w	r1, r1, ip
 8003448:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800344a:	fa0e f303 	lsl.w	r3, lr, r3
 800344e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003452:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003454:	2800      	cmp	r0, #0
 8003456:	db0b      	blt.n	8003470 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003458:	0109      	lsls	r1, r1, #4
 800345a:	b2c9      	uxtb	r1, r1
 800345c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003460:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003464:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003468:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346c:	2300      	movs	r3, #0
 800346e:	e7e5      	b.n	800343c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003470:	f000 000f 	and.w	r0, r0, #15
 8003474:	0109      	lsls	r1, r1, #4
 8003476:	b2c9      	uxtb	r1, r1
 8003478:	4b02      	ldr	r3, [pc, #8]	; (8003484 <HAL_NVIC_SetPriority+0x6c>)
 800347a:	5419      	strb	r1, [r3, r0]
 800347c:	e7f4      	b.n	8003468 <HAL_NVIC_SetPriority+0x50>
 800347e:	bf00      	nop
 8003480:	e000ed00 	.word	0xe000ed00
 8003484:	e000ed14 	.word	0xe000ed14

08003488 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003488:	2800      	cmp	r0, #0
 800348a:	db07      	blt.n	800349c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348c:	f000 021f 	and.w	r2, r0, #31
 8003490:	0940      	lsrs	r0, r0, #5
 8003492:	2301      	movs	r3, #1
 8003494:	4093      	lsls	r3, r2
 8003496:	4a02      	ldr	r2, [pc, #8]	; (80034a0 <HAL_NVIC_EnableIRQ+0x18>)
 8003498:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80034a4:	2800      	cmp	r0, #0
 80034a6:	db0c      	blt.n	80034c2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a8:	f000 021f 	and.w	r2, r0, #31
 80034ac:	0940      	lsrs	r0, r0, #5
 80034ae:	2301      	movs	r3, #1
 80034b0:	4093      	lsls	r3, r2
 80034b2:	3020      	adds	r0, #32
 80034b4:	4a03      	ldr	r2, [pc, #12]	; (80034c4 <HAL_NVIC_DisableIRQ+0x20>)
 80034b6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034be:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80034c2:	4770      	bx	lr
 80034c4:	e000e100 	.word	0xe000e100

080034c8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c8:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ca:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80034cc:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80034d0:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034d4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80034d6:	b124      	cbz	r4, 80034e2 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d8:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80034da:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80034de:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80034e4:	f004 0c1c 	and.w	ip, r4, #28
 80034e8:	2401      	movs	r4, #1
 80034ea:	fa04 f40c 	lsl.w	r4, r4, ip
 80034ee:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80034f2:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034f6:	6804      	ldr	r4, [r0, #0]
 80034f8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034fa:	6883      	ldr	r3, [r0, #8]
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d005      	beq.n	800350c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003500:	6803      	ldr	r3, [r0, #0]
 8003502:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003504:	6803      	ldr	r3, [r0, #0]
 8003506:	60da      	str	r2, [r3, #12]
  }
}
 8003508:	bc10      	pop	{r4}
 800350a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800350c:	6803      	ldr	r3, [r0, #0]
 800350e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003510:	6803      	ldr	r3, [r0, #0]
 8003512:	60d9      	str	r1, [r3, #12]
 8003514:	e7f8      	b.n	8003508 <DMA_SetConfig+0x40>
	...

08003518 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003518:	6803      	ldr	r3, [r0, #0]
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d816      	bhi.n	800354e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003520:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003522:	f022 0203 	bic.w	r2, r2, #3
 8003526:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800352a:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800352e:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003530:	b2db      	uxtb	r3, r3
 8003532:	3b08      	subs	r3, #8
 8003534:	4a0e      	ldr	r2, [pc, #56]	; (8003570 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800353c:	4a0d      	ldr	r2, [pc, #52]	; (8003574 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800353e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	2201      	movs	r2, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	6503      	str	r3, [r0, #80]	; 0x50
}
 800354c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800354e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003550:	f022 0103 	bic.w	r1, r2, #3
 8003554:	4a08      	ldr	r2, [pc, #32]	; (8003578 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003556:	440a      	add	r2, r1
 8003558:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3b08      	subs	r3, #8
 800355e:	4a04      	ldr	r2, [pc, #16]	; (8003570 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	3307      	adds	r3, #7
 8003568:	e7e8      	b.n	800353c <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800356a:	bf00      	nop
 800356c:	40020407 	.word	0x40020407
 8003570:	cccccccd 	.word	0xcccccccd
 8003574:	40020880 	.word	0x40020880
 8003578:	4002081c 	.word	0x4002081c

0800357c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800357c:	6843      	ldr	r3, [r0, #4]
 800357e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003582:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003584:	441a      	add	r2, r3
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800358a:	4a06      	ldr	r2, [pc, #24]	; (80035a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 800358c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800358e:	3b01      	subs	r3, #1
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2201      	movs	r2, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	1000823f 	.word	0x1000823f
 80035a4:	40020940 	.word	0x40020940

080035a8 <HAL_DMA_Init>:
  if (hdma == NULL)
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d060      	beq.n	800366e <HAL_DMA_Init+0xc6>
{
 80035ac:	b510      	push	{r4, lr}
 80035ae:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035b0:	6802      	ldr	r2, [r0, #0]
 80035b2:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_DMA_Init+0xcc>)
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d842      	bhi.n	800363e <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035b8:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <HAL_DMA_Init+0xd0>)
 80035ba:	4413      	add	r3, r2
 80035bc:	492f      	ldr	r1, [pc, #188]	; (800367c <HAL_DMA_Init+0xd4>)
 80035be:	fba1 1303 	umull	r1, r3, r1, r3
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035c8:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <HAL_DMA_Init+0xd8>)
 80035ca:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80035cc:	2302      	movs	r3, #2
 80035ce:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035dc:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035de:	6821      	ldr	r1, [r4, #0]
 80035e0:	680a      	ldr	r2, [r1, #0]
 80035e2:	68a3      	ldr	r3, [r4, #8]
 80035e4:	68e0      	ldr	r0, [r4, #12]
 80035e6:	4303      	orrs	r3, r0
 80035e8:	6920      	ldr	r0, [r4, #16]
 80035ea:	4303      	orrs	r3, r0
 80035ec:	6960      	ldr	r0, [r4, #20]
 80035ee:	4303      	orrs	r3, r0
 80035f0:	69a0      	ldr	r0, [r4, #24]
 80035f2:	4303      	orrs	r3, r0
 80035f4:	69e0      	ldr	r0, [r4, #28]
 80035f6:	4303      	orrs	r3, r0
 80035f8:	6a20      	ldr	r0, [r4, #32]
 80035fa:	4303      	orrs	r3, r0
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003600:	4620      	mov	r0, r4
 8003602:	f7ff ff89 	bl	8003518 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003606:	68a3      	ldr	r3, [r4, #8]
 8003608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800360c:	d022      	beq.n	8003654 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800360e:	6863      	ldr	r3, [r4, #4]
 8003610:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003616:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003618:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800361a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800361c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800361e:	6863      	ldr	r3, [r4, #4]
 8003620:	3b01      	subs	r3, #1
 8003622:	2b03      	cmp	r3, #3
 8003624:	d919      	bls.n	800365a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800362a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800362c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800362e:	2000      	movs	r0, #0
 8003630:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003632:	2301      	movs	r3, #1
 8003634:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003638:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800363c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_DMA_Init+0xdc>)
 8003640:	4413      	add	r3, r2
 8003642:	490e      	ldr	r1, [pc, #56]	; (800367c <HAL_DMA_Init+0xd4>)
 8003644:	fba1 1303 	umull	r1, r3, r1, r3
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <HAL_DMA_Init+0xe0>)
 8003650:	6403      	str	r3, [r0, #64]	; 0x40
 8003652:	e7bb      	b.n	80035cc <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003654:	2300      	movs	r3, #0
 8003656:	6063      	str	r3, [r4, #4]
 8003658:	e7d9      	b.n	800360e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800365a:	4620      	mov	r0, r4
 800365c:	f7ff ff8e 	bl	800357c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003660:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003668:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	e7df      	b.n	800362e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800366e:	2001      	movs	r0, #1
}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40020407 	.word	0x40020407
 8003678:	bffdfff8 	.word	0xbffdfff8
 800367c:	cccccccd 	.word	0xcccccccd
 8003680:	40020000 	.word	0x40020000
 8003684:	bffdfbf8 	.word	0xbffdfbf8
 8003688:	40020400 	.word	0x40020400

0800368c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 800368c:	2800      	cmp	r0, #0
 800368e:	d04b      	beq.n	8003728 <HAL_DMA_DeInit+0x9c>
{
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003694:	6802      	ldr	r2, [r0, #0]
 8003696:	6813      	ldr	r3, [r2, #0]
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800369e:	6802      	ldr	r2, [r0, #0]
 80036a0:	4b22      	ldr	r3, [pc, #136]	; (800372c <HAL_DMA_DeInit+0xa0>)
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d82c      	bhi.n	8003700 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036a6:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_DMA_DeInit+0xa4>)
 80036a8:	4413      	add	r3, r2
 80036aa:	4922      	ldr	r1, [pc, #136]	; (8003734 <HAL_DMA_DeInit+0xa8>)
 80036ac:	fba1 1303 	umull	r1, r3, r1, r3
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_DMA_DeInit+0xac>)
 80036b8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80036ba:	2500      	movs	r5, #0
 80036bc:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036c0:	f003 021c 	and.w	r2, r3, #28
 80036c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80036c6:	2301      	movs	r3, #1
 80036c8:	4093      	lsls	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff ff23 	bl	8003518 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80036d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80036d4:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80036d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80036da:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036dc:	6863      	ldr	r3, [r4, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d918      	bls.n	8003716 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80036e4:	2000      	movs	r0, #0
 80036e6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80036e8:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80036ea:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80036ec:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80036ee:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80036f0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80036f2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80036f6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80036fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <HAL_DMA_DeInit+0xb0>)
 8003702:	4413      	add	r3, r2
 8003704:	490b      	ldr	r1, [pc, #44]	; (8003734 <HAL_DMA_DeInit+0xa8>)
 8003706:	fba1 1303 	umull	r1, r3, r1, r3
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_DMA_DeInit+0xb4>)
 8003712:	6403      	str	r3, [r0, #64]	; 0x40
 8003714:	e7d1      	b.n	80036ba <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003716:	4620      	mov	r0, r4
 8003718:	f7ff ff30 	bl	800357c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800371c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800371e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003720:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003722:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	e7dd      	b.n	80036e4 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003728:	2001      	movs	r0, #1
}
 800372a:	4770      	bx	lr
 800372c:	40020407 	.word	0x40020407
 8003730:	bffdfff8 	.word	0xbffdfff8
 8003734:	cccccccd 	.word	0xcccccccd
 8003738:	40020000 	.word	0x40020000
 800373c:	bffdfbf8 	.word	0xbffdfbf8
 8003740:	40020400 	.word	0x40020400

08003744 <HAL_DMA_Start_IT>:
{
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003748:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800374c:	2801      	cmp	r0, #1
 800374e:	d043      	beq.n	80037d8 <HAL_DMA_Start_IT+0x94>
 8003750:	2001      	movs	r0, #1
 8003752:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003756:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800375a:	b2c0      	uxtb	r0, r0
 800375c:	2801      	cmp	r0, #1
 800375e:	d006      	beq.n	800376e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003764:	2300      	movs	r3, #0
 8003766:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800376a:	2001      	movs	r0, #1
}
 800376c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800376e:	2002      	movs	r0, #2
 8003770:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003774:	2000      	movs	r0, #0
 8003776:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003778:	6825      	ldr	r5, [r4, #0]
 800377a:	6828      	ldr	r0, [r5, #0]
 800377c:	f020 0001 	bic.w	r0, r0, #1
 8003780:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003782:	4620      	mov	r0, r4
 8003784:	f7ff fea0 	bl	80034c8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003788:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800378a:	b1d3      	cbz	r3, 80037c2 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378c:	6822      	ldr	r2, [r4, #0]
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	f043 030e 	orr.w	r3, r3, #14
 8003794:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003796:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800379e:	d003      	beq.n	80037a8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80037a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037aa:	b11b      	cbz	r3, 80037b4 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2000      	movs	r0, #0
 80037c0:	e7d4      	b.n	800376c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037c2:	6822      	ldr	r2, [r4, #0]
 80037c4:	6813      	ldr	r3, [r2, #0]
 80037c6:	f023 0304 	bic.w	r3, r3, #4
 80037ca:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	f043 030a 	orr.w	r3, r3, #10
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e7de      	b.n	8003796 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80037d8:	2002      	movs	r0, #2
 80037da:	e7c7      	b.n	800376c <HAL_DMA_Start_IT+0x28>

080037dc <HAL_DMA_Abort>:
  if (NULL == hdma)
 80037dc:	4603      	mov	r3, r0
 80037de:	2800      	cmp	r0, #0
 80037e0:	d034      	beq.n	800384c <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80037e2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	2a02      	cmp	r2, #2
 80037ea:	d006      	beq.n	80037fa <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ec:	2204      	movs	r2, #4
 80037ee:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80037f0:	2200      	movs	r2, #0
 80037f2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80037f6:	2001      	movs	r0, #1
 80037f8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	6801      	ldr	r1, [r0, #0]
 80037fc:	680a      	ldr	r2, [r1, #0]
 80037fe:	f022 020e 	bic.w	r2, r2, #14
 8003802:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003804:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003806:	680a      	ldr	r2, [r1, #0]
 8003808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800380c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800380e:	6801      	ldr	r1, [r0, #0]
 8003810:	680a      	ldr	r2, [r1, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003818:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800381a:	f002 011c 	and.w	r1, r2, #28
 800381e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003820:	2201      	movs	r2, #1
 8003822:	408a      	lsls	r2, r1
 8003824:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003828:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800382a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800382c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800382e:	b132      	cbz	r2, 800383e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003830:	6811      	ldr	r1, [r2, #0]
 8003832:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003836:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800383a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800383c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003844:	2000      	movs	r0, #0
 8003846:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800384a:	4770      	bx	lr
    return HAL_ERROR;
 800384c:	2001      	movs	r0, #1
}
 800384e:	4770      	bx	lr

08003850 <HAL_DMA_Abort_IT>:
{
 8003850:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003852:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d003      	beq.n	8003864 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385c:	2304      	movs	r3, #4
 800385e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003860:	2001      	movs	r0, #1
}
 8003862:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003864:	6802      	ldr	r2, [r0, #0]
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	f023 030e 	bic.w	r3, r3, #14
 800386c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800386e:	6802      	ldr	r2, [r0, #0]
 8003870:	6813      	ldr	r3, [r2, #0]
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003878:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800387a:	6813      	ldr	r3, [r2, #0]
 800387c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003882:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003884:	f003 021c 	and.w	r2, r3, #28
 8003888:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800388a:	2301      	movs	r3, #1
 800388c:	4093      	lsls	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003890:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003892:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003894:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003896:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003898:	b133      	cbz	r3, 80038a8 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80038a4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80038a6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80038ae:	2300      	movs	r3, #0
 80038b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80038b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80038b6:	b113      	cbz	r3, 80038be <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80038b8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2000      	movs	r0, #0
 80038bc:	e7d1      	b.n	8003862 <HAL_DMA_Abort_IT+0x12>
 80038be:	2000      	movs	r0, #0
 80038c0:	e7cf      	b.n	8003862 <HAL_DMA_Abort_IT+0x12>
	...

080038c4 <HAL_DMA_IRQHandler>:
{
 80038c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80038c8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80038ca:	6804      	ldr	r4, [r0, #0]
 80038cc:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80038d0:	f003 031c 	and.w	r3, r3, #28
 80038d4:	2204      	movs	r2, #4
 80038d6:	409a      	lsls	r2, r3
 80038d8:	420a      	tst	r2, r1
 80038da:	d015      	beq.n	8003908 <HAL_DMA_IRQHandler+0x44>
 80038dc:	f015 0f04 	tst.w	r5, #4
 80038e0:	d012      	beq.n	8003908 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	f013 0f20 	tst.w	r3, #32
 80038e8:	d103      	bne.n	80038f2 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80038f4:	f003 021c 	and.w	r2, r3, #28
 80038f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80038fa:	2304      	movs	r3, #4
 80038fc:	4093      	lsls	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003900:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003902:	b103      	cbz	r3, 8003906 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003904:	4798      	blx	r3
}
 8003906:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003908:	2202      	movs	r2, #2
 800390a:	409a      	lsls	r2, r3
 800390c:	420a      	tst	r2, r1
 800390e:	d028      	beq.n	8003962 <HAL_DMA_IRQHandler+0x9e>
 8003910:	f015 0f02 	tst.w	r5, #2
 8003914:	d025      	beq.n	8003962 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	f013 0f20 	tst.w	r3, #32
 800391c:	d106      	bne.n	800392c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	f023 030a 	bic.w	r3, r3, #10
 8003924:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003926:	2301      	movs	r3, #1
 8003928:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800392c:	6802      	ldr	r2, [r0, #0]
 800392e:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <HAL_DMA_IRQHandler+0xdc>)
 8003930:	429a      	cmp	r2, r3
 8003932:	d90e      	bls.n	8003952 <HAL_DMA_IRQHandler+0x8e>
 8003934:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003936:	f003 021c 	and.w	r2, r3, #28
 800393a:	2302      	movs	r3, #2
 800393c:	4093      	lsls	r3, r2
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_DMA_IRQHandler+0xe0>)
 8003940:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003942:	2300      	movs	r3, #0
 8003944:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003948:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0db      	beq.n	8003906 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 800394e:	4798      	blx	r3
 8003950:	e7d9      	b.n	8003906 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003952:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003954:	f003 021c 	and.w	r2, r3, #28
 8003958:	2302      	movs	r3, #2
 800395a:	4093      	lsls	r3, r2
 800395c:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <HAL_DMA_IRQHandler+0xe4>)
 800395e:	6053      	str	r3, [r2, #4]
 8003960:	e7ef      	b.n	8003942 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003962:	2208      	movs	r2, #8
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	420b      	tst	r3, r1
 800396a:	d0cc      	beq.n	8003906 <HAL_DMA_IRQHandler+0x42>
 800396c:	f015 0f08 	tst.w	r5, #8
 8003970:	d0c9      	beq.n	8003906 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	f023 030e 	bic.w	r3, r3, #14
 8003978:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800397a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800397c:	f003 031c 	and.w	r3, r3, #28
 8003980:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003982:	2201      	movs	r2, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800398a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800398c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003990:	2300      	movs	r3, #0
 8003992:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003996:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0b4      	beq.n	8003906 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800399c:	4798      	blx	r3
  return;
 800399e:	e7b2      	b.n	8003906 <HAL_DMA_IRQHandler+0x42>
 80039a0:	40020080 	.word	0x40020080
 80039a4:	40020400 	.word	0x40020400
 80039a8:	40020000 	.word	0x40020000

080039ac <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80039ac:	b178      	cbz	r0, 80039ce <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80039ae:	6803      	ldr	r3, [r0, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80039b2:	f011 0f10 	tst.w	r1, #16
 80039b6:	d004      	beq.n	80039c2 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80039b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80039bc:	d004      	beq.n	80039c8 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80039be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80039c2:	601a      	str	r2, [r3, #0]
  return status;
 80039c4:	2000      	movs	r0, #0
 80039c6:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80039c8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80039cc:	e7f9      	b.n	80039c2 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80039ce:	2001      	movs	r0, #1
}
 80039d0:	4770      	bx	lr
	...

080039d4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80039d4:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039d6:	4c05      	ldr	r4, [pc, #20]	; (80039ec <FLASH_Program_DoubleWord+0x18>)
 80039d8:	6961      	ldr	r1, [r4, #20]
 80039da:	f041 0101 	orr.w	r1, r1, #1
 80039de:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80039e0:	6002      	str	r2, [r0, #0]
 80039e2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80039e6:	6043      	str	r3, [r0, #4]
}
 80039e8:	bc10      	pop	{r4}
 80039ea:	4770      	bx	lr
 80039ec:	58004000 	.word	0x58004000

080039f0 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80039f0:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <FLASH_Program_Fast+0x34>)
 80039f2:	6953      	ldr	r3, [r2, #20]
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fa:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80039fe:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003a00:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003a02:	f851 2b04 	ldr.w	r2, [r1], #4
 8003a06:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003a0a:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003a0c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003a10:	d1f7      	bne.n	8003a02 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003a12:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <FLASH_Program_Fast+0x34>)
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a1a:	d1fa      	bne.n	8003a12 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	58004000 	.word	0x58004000

08003a28 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_FLASH_Unlock+0x28>)
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	db01      	blt.n	8003a34 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2000      	movs	r0, #0
 8003a32:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_FLASH_Unlock+0x28>)
 8003a36:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <HAL_FLASH_Unlock+0x2c>)
 8003a38:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a3a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003a3e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db01      	blt.n	8003a4a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003a46:	2000      	movs	r0, #0
 8003a48:	4770      	bx	lr
      status = HAL_ERROR;
 8003a4a:	2001      	movs	r0, #1
}
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	58004000 	.word	0x58004000
 8003a54:	45670123 	.word	0x45670123

08003a58 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_FLASH_Lock+0x18>)
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a60:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	db01      	blt.n	8003a6c <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8003a68:	2001      	movs	r0, #1
}
 8003a6a:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	4770      	bx	lr
 8003a70:	58004000 	.word	0x58004000

08003a74 <FLASH_WaitForLastOperation>:
{
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7fd ff0e 	bl	8001898 <HAL_GetTick>
 8003a7c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <FLASH_WaitForLastOperation+0x64>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a86:	d006      	beq.n	8003a96 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003a88:	f7fd ff06 	bl	8001898 <HAL_GetTick>
 8003a8c:	1b00      	subs	r0, r0, r4
 8003a8e:	42a8      	cmp	r0, r5
 8003a90:	d3f5      	bcc.n	8003a7e <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003a92:	2003      	movs	r0, #3
}
 8003a94:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <FLASH_WaitForLastOperation+0x64>)
 8003a98:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003a9a:	f013 0f01 	tst.w	r3, #1
 8003a9e:	d002      	beq.n	8003aa6 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <FLASH_WaitForLastOperation+0x64>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003aa6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d001      	beq.n	8003ab2 <FLASH_WaitForLastOperation+0x3e>
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <FLASH_WaitForLastOperation+0x64>)
 8003ab0:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003ab2:	b95b      	cbnz	r3, 8003acc <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <FLASH_WaitForLastOperation+0x64>)
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003abc:	d00a      	beq.n	8003ad4 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003abe:	f7fd feeb 	bl	8001898 <HAL_GetTick>
 8003ac2:	1b00      	subs	r0, r0, r4
 8003ac4:	42a8      	cmp	r0, r5
 8003ac6:	d3f5      	bcc.n	8003ab4 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8003ac8:	2003      	movs	r0, #3
 8003aca:	e7e3      	b.n	8003a94 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8003acc:	4a03      	ldr	r2, [pc, #12]	; (8003adc <FLASH_WaitForLastOperation+0x68>)
 8003ace:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	e7df      	b.n	8003a94 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	e7dd      	b.n	8003a94 <FLASH_WaitForLastOperation+0x20>
 8003ad8:	58004000 	.word	0x58004000
 8003adc:	2000045c 	.word	0x2000045c

08003ae0 <HAL_FLASH_Program>:
{
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003ae4:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <HAL_FLASH_Program+0x5c>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d025      	beq.n	8003b38 <HAL_FLASH_Program+0x58>
 8003aec:	4604      	mov	r4, r0
 8003aee:	460d      	mov	r5, r1
 8003af0:	4616      	mov	r6, r2
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_FLASH_Program+0x5c>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003af8:	2200      	movs	r2, #0
 8003afa:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b00:	f7ff ffb8 	bl	8003a74 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003b04:	b970      	cbnz	r0, 8003b24 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003b06:	2c01      	cmp	r4, #1
 8003b08:	d010      	beq.n	8003b2c <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003b0a:	4631      	mov	r1, r6
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f7ff ff6f 	bl	80039f0 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b16:	f7ff ffad 	bl	8003a74 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003b1a:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <HAL_FLASH_Program+0x60>)
 8003b1c:	6953      	ldr	r3, [r2, #20]
 8003b1e:	ea23 0404 	bic.w	r4, r3, r4
 8003b22:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_FLASH_Program+0x5c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
}
 8003b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	463b      	mov	r3, r7
 8003b30:	4628      	mov	r0, r5
 8003b32:	f7ff ff4f 	bl	80039d4 <FLASH_Program_DoubleWord>
 8003b36:	e7ec      	b.n	8003b12 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8003b38:	2002      	movs	r0, #2
 8003b3a:	e7f6      	b.n	8003b2a <HAL_FLASH_Program+0x4a>
 8003b3c:	2000045c 	.word	0x2000045c
 8003b40:	58004000 	.word	0x58004000

08003b44 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003b44:	4a03      	ldr	r2, [pc, #12]	; (8003b54 <FLASH_MassErase+0x10>)
 8003b46:	6953      	ldr	r3, [r2, #20]
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	6153      	str	r3, [r2, #20]
#endif
}
 8003b52:	4770      	bx	lr
 8003b54:	58004000 	.word	0x58004000

08003b58 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <FLASH_FlushCaches+0x64>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d006      	beq.n	8003b72 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003b64:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <FLASH_FlushCaches+0x64>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d012      	beq.n	8003b96 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003b70:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <FLASH_FlushCaches+0x64>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e7e6      	b.n	8003b64 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <FLASH_FlushCaches+0x64>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bae:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bb6:	601a      	str	r2, [r3, #0]
}
 8003bb8:	e7da      	b.n	8003b70 <FLASH_FlushCaches+0x18>
 8003bba:	bf00      	nop
 8003bbc:	58004000 	.word	0x58004000

08003bc0 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003bc0:	4a03      	ldr	r2, [pc, #12]	; (8003bd0 <FLASH_AcknowledgePageErase+0x10>)
 8003bc2:	6953      	ldr	r3, [r2, #20]
 8003bc4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003bc8:	f023 0302 	bic.w	r3, r3, #2
 8003bcc:	6153      	str	r3, [r2, #20]
#endif
}
 8003bce:	4770      	bx	lr
 8003bd0:	58004000 	.word	0x58004000

08003bd4 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003bd4:	4a05      	ldr	r2, [pc, #20]	; (8003bec <FLASH_PageErase+0x18>)
 8003bd6:	6953      	ldr	r3, [r2, #20]
 8003bd8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003bdc:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003be0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003be4:	f040 0002 	orr.w	r0, r0, #2
 8003be8:	6150      	str	r0, [r2, #20]
}
 8003bea:	4770      	bx	lr
 8003bec:	58004000 	.word	0x58004000

08003bf0 <HAL_FLASHEx_Erase>:
{
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <HAL_FLASHEx_Erase+0x7c>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d035      	beq.n	8003c66 <HAL_FLASHEx_Erase+0x76>
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	460f      	mov	r7, r1
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_FLASHEx_Erase+0x7c>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c04:	2200      	movs	r2, #0
 8003c06:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c0c:	f7ff ff32 	bl	8003a74 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003c10:	4606      	mov	r6, r0
 8003c12:	bb18      	cbnz	r0, 8003c5c <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d013      	beq.n	8003c42 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003c20:	686c      	ldr	r4, [r5, #4]
 8003c22:	686b      	ldr	r3, [r5, #4]
 8003c24:	68aa      	ldr	r2, [r5, #8]
 8003c26:	4413      	add	r3, r2
 8003c28:	42a3      	cmp	r3, r4
 8003c2a:	d913      	bls.n	8003c54 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff ffd1 	bl	8003bd4 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c36:	f7ff ff1d 	bl	8003a74 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	b948      	cbnz	r0, 8003c52 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003c3e:	3401      	adds	r4, #1
 8003c40:	e7ef      	b.n	8003c22 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8003c42:	f7ff ff7f 	bl	8003b44 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c4a:	f7ff ff13 	bl	8003a74 <FLASH_WaitForLastOperation>
 8003c4e:	4606      	mov	r6, r0
 8003c50:	e002      	b.n	8003c58 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003c52:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003c54:	f7ff ffb4 	bl	8003bc0 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8003c58:	f7ff ff7e 	bl	8003b58 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_FLASHEx_Erase+0x7c>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
}
 8003c62:	4630      	mov	r0, r6
 8003c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003c66:	2602      	movs	r6, #2
 8003c68:	e7fb      	b.n	8003c62 <HAL_FLASHEx_Erase+0x72>
 8003c6a:	bf00      	nop
 8003c6c:	2000045c 	.word	0x2000045c

08003c70 <HAL_FLASHEx_Erase_IT>:
{
 8003c70:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8003c72:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <HAL_FLASHEx_Erase_IT+0x60>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d028      	beq.n	8003ccc <HAL_FLASHEx_Erase_IT+0x5c>
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_FLASHEx_Erase_IT+0x60>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c82:	2200      	movs	r2, #0
 8003c84:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8003c86:	6802      	ldr	r2, [r0, #0]
 8003c88:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c8e:	f7ff fef1 	bl	8003a74 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8003c92:	4605      	mov	r5, r0
 8003c94:	b120      	cbz	r0, 8003ca0 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <HAL_FLASHEx_Erase_IT+0x60>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
}
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003ca0:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <HAL_FLASHEx_Erase_IT+0x64>)
 8003ca2:	6953      	ldr	r3, [r2, #20]
 8003ca4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003ca8:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d007      	beq.n	8003cc0 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8003cb0:	68a2      	ldr	r2, [r4, #8]
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <HAL_FLASHEx_Erase_IT+0x60>)
 8003cb4:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 8003cb6:	6860      	ldr	r0, [r4, #4]
 8003cb8:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 8003cba:	f7ff ff8b 	bl	8003bd4 <FLASH_PageErase>
 8003cbe:	e7ed      	b.n	8003c9c <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <HAL_FLASHEx_Erase_IT+0x60>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 8003cc6:	f7ff ff3d 	bl	8003b44 <FLASH_MassErase>
 8003cca:	e7e7      	b.n	8003c9c <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 8003ccc:	2502      	movs	r5, #2
 8003cce:	e7e5      	b.n	8003c9c <HAL_FLASHEx_Erase_IT+0x2c>
 8003cd0:	2000045c 	.word	0x2000045c
 8003cd4:	58004000 	.word	0x58004000

08003cd8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd8:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003cda:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cdc:	e069      	b.n	8003db2 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cde:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ce0:	005e      	lsls	r6, r3, #1
 8003ce2:	2403      	movs	r4, #3
 8003ce4:	40b4      	lsls	r4, r6
 8003ce6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cea:	68cc      	ldr	r4, [r1, #12]
 8003cec:	40b4      	lsls	r4, r6
 8003cee:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003cf0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cf2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cf4:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf8:	684c      	ldr	r4, [r1, #4]
 8003cfa:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003cfe:	409c      	lsls	r4, r3
 8003d00:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003d04:	6044      	str	r4, [r0, #4]
 8003d06:	e065      	b.n	8003dd4 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d08:	08dd      	lsrs	r5, r3, #3
 8003d0a:	3508      	adds	r5, #8
 8003d0c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d10:	f003 0407 	and.w	r4, r3, #7
 8003d14:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003d18:	240f      	movs	r4, #15
 8003d1a:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d1e:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d22:	690c      	ldr	r4, [r1, #16]
 8003d24:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d28:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003d2c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003d30:	e067      	b.n	8003e02 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d32:	2402      	movs	r4, #2
 8003d34:	e000      	b.n	8003d38 <HAL_GPIO_Init+0x60>
 8003d36:	2400      	movs	r4, #0
 8003d38:	fa04 f40e 	lsl.w	r4, r4, lr
 8003d3c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d3e:	f10c 0c02 	add.w	ip, ip, #2
 8003d42:	4d4b      	ldr	r5, [pc, #300]	; (8003e70 <HAL_GPIO_Init+0x198>)
 8003d44:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d48:	4c4a      	ldr	r4, [pc, #296]	; (8003e74 <HAL_GPIO_Init+0x19c>)
 8003d4a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003d4c:	43d4      	mvns	r4, r2
 8003d4e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d52:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003d56:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8003d5a:	d001      	beq.n	8003d60 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003d5c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003d60:	4d44      	ldr	r5, [pc, #272]	; (8003e74 <HAL_GPIO_Init+0x19c>)
 8003d62:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003d64:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003d66:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d6a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003d6e:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8003d72:	d001      	beq.n	8003d78 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003d74:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003d78:	4d3e      	ldr	r5, [pc, #248]	; (8003e74 <HAL_GPIO_Init+0x19c>)
 8003d7a:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003d7c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003d80:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d84:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003d88:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8003d8c:	d001      	beq.n	8003d92 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8003d8e:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003d92:	4d38      	ldr	r5, [pc, #224]	; (8003e74 <HAL_GPIO_Init+0x19c>)
 8003d94:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003d98:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003d9c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d9e:	684e      	ldr	r6, [r1, #4]
 8003da0:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003da4:	d001      	beq.n	8003daa <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003da6:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003daa:	4a32      	ldr	r2, [pc, #200]	; (8003e74 <HAL_GPIO_Init+0x19c>)
 8003dac:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003db0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db2:	680a      	ldr	r2, [r1, #0]
 8003db4:	fa32 f403 	lsrs.w	r4, r2, r3
 8003db8:	d058      	beq.n	8003e6c <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dba:	f04f 0c01 	mov.w	ip, #1
 8003dbe:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003dc2:	ea1c 0202 	ands.w	r2, ip, r2
 8003dc6:	d0f3      	beq.n	8003db0 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc8:	684c      	ldr	r4, [r1, #4]
 8003dca:	f004 0403 	and.w	r4, r4, #3
 8003dce:	3c01      	subs	r4, #1
 8003dd0:	2c01      	cmp	r4, #1
 8003dd2:	d984      	bls.n	8003cde <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd4:	684c      	ldr	r4, [r1, #4]
 8003dd6:	f004 0403 	and.w	r4, r4, #3
 8003dda:	2c03      	cmp	r4, #3
 8003ddc:	d00c      	beq.n	8003df8 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003dde:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003de0:	005d      	lsls	r5, r3, #1
 8003de2:	f04f 0c03 	mov.w	ip, #3
 8003de6:	fa0c fc05 	lsl.w	ip, ip, r5
 8003dea:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dee:	688c      	ldr	r4, [r1, #8]
 8003df0:	40ac      	lsls	r4, r5
 8003df2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003df6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df8:	684c      	ldr	r4, [r1, #4]
 8003dfa:	f004 0403 	and.w	r4, r4, #3
 8003dfe:	2c02      	cmp	r4, #2
 8003e00:	d082      	beq.n	8003d08 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8003e02:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e04:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003e08:	f04f 0c03 	mov.w	ip, #3
 8003e0c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003e10:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e14:	684c      	ldr	r4, [r1, #4]
 8003e16:	f004 0403 	and.w	r4, r4, #3
 8003e1a:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e1e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003e22:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e24:	684c      	ldr	r4, [r1, #4]
 8003e26:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003e2a:	d0c1      	beq.n	8003db0 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e2c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003e30:	f10c 0502 	add.w	r5, ip, #2
 8003e34:	4c0e      	ldr	r4, [pc, #56]	; (8003e70 <HAL_GPIO_Init+0x198>)
 8003e36:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003e3a:	f003 0403 	and.w	r4, r3, #3
 8003e3e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003e42:	2407      	movs	r4, #7
 8003e44:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e48:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e4c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003e50:	f43f af71 	beq.w	8003d36 <HAL_GPIO_Init+0x5e>
 8003e54:	4c08      	ldr	r4, [pc, #32]	; (8003e78 <HAL_GPIO_Init+0x1a0>)
 8003e56:	42a0      	cmp	r0, r4
 8003e58:	d006      	beq.n	8003e68 <HAL_GPIO_Init+0x190>
 8003e5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e5e:	42a0      	cmp	r0, r4
 8003e60:	f43f af67 	beq.w	8003d32 <HAL_GPIO_Init+0x5a>
 8003e64:	2407      	movs	r4, #7
 8003e66:	e767      	b.n	8003d38 <HAL_GPIO_Init+0x60>
 8003e68:	2401      	movs	r4, #1
 8003e6a:	e765      	b.n	8003d38 <HAL_GPIO_Init+0x60>
  }
}
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	58000800 	.word	0x58000800
 8003e78:	48000400 	.word	0x48000400

08003e7c <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003e7c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e7e:	fa31 f203 	lsrs.w	r2, r1, r3
 8003e82:	d071      	beq.n	8003f68 <HAL_GPIO_DeInit+0xec>
{
 8003e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e86:	e02e      	b.n	8003ee6 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003e88:	2502      	movs	r5, #2
 8003e8a:	e000      	b.n	8003e8e <HAL_GPIO_DeInit+0x12>
 8003e8c:	2500      	movs	r5, #0
 8003e8e:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003e92:	45a4      	cmp	ip, r4
 8003e94:	d049      	beq.n	8003f2a <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003e96:	6804      	ldr	r4, [r0, #0]
 8003e98:	005d      	lsls	r5, r3, #1
 8003e9a:	f04f 0c03 	mov.w	ip, #3
 8003e9e:	fa0c fc05 	lsl.w	ip, ip, r5
 8003ea2:	ea44 040c 	orr.w	r4, r4, ip
 8003ea6:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003ea8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003eac:	f10e 0e08 	add.w	lr, lr, #8
 8003eb0:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003eb4:	f003 0507 	and.w	r5, r3, #7
 8003eb8:	00ae      	lsls	r6, r5, #2
 8003eba:	250f      	movs	r5, #15
 8003ebc:	40b5      	lsls	r5, r6
 8003ebe:	ea24 0405 	bic.w	r4, r4, r5
 8003ec2:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ec6:	6884      	ldr	r4, [r0, #8]
 8003ec8:	ea24 040c 	bic.w	r4, r4, ip
 8003ecc:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ece:	6844      	ldr	r4, [r0, #4]
 8003ed0:	ea24 0202 	bic.w	r2, r4, r2
 8003ed4:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed6:	68c2      	ldr	r2, [r0, #12]
 8003ed8:	ea22 020c 	bic.w	r2, r2, ip
 8003edc:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003ede:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003ee0:	fa31 f203 	lsrs.w	r2, r1, r3
 8003ee4:	d03f      	beq.n	8003f66 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003eea:	ea12 0701 	ands.w	r7, r2, r1
 8003eee:	d0f6      	beq.n	8003ede <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003ef0:	089e      	lsrs	r6, r3, #2
 8003ef2:	1cb5      	adds	r5, r6, #2
 8003ef4:	4c1d      	ldr	r4, [pc, #116]	; (8003f6c <HAL_GPIO_DeInit+0xf0>)
 8003ef6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003efa:	f003 0c03 	and.w	ip, r3, #3
 8003efe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003f02:	f04f 0e07 	mov.w	lr, #7
 8003f06:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003f0a:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f0e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003f12:	d0bb      	beq.n	8003e8c <HAL_GPIO_DeInit+0x10>
 8003f14:	4d16      	ldr	r5, [pc, #88]	; (8003f70 <HAL_GPIO_DeInit+0xf4>)
 8003f16:	42a8      	cmp	r0, r5
 8003f18:	d005      	beq.n	8003f26 <HAL_GPIO_DeInit+0xaa>
 8003f1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f1e:	42a8      	cmp	r0, r5
 8003f20:	d0b2      	beq.n	8003e88 <HAL_GPIO_DeInit+0xc>
 8003f22:	2507      	movs	r5, #7
 8003f24:	e7b3      	b.n	8003e8e <HAL_GPIO_DeInit+0x12>
 8003f26:	2501      	movs	r5, #1
 8003f28:	e7b1      	b.n	8003e8e <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8003f2a:	4c12      	ldr	r4, [pc, #72]	; (8003f74 <HAL_GPIO_DeInit+0xf8>)
 8003f2c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8003f30:	ea25 0507 	bic.w	r5, r5, r7
 8003f34:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003f38:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8003f3c:	ea25 0507 	bic.w	r5, r5, r7
 8003f40:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003f44:	6825      	ldr	r5, [r4, #0]
 8003f46:	ea25 0507 	bic.w	r5, r5, r7
 8003f4a:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003f4c:	6865      	ldr	r5, [r4, #4]
 8003f4e:	ea25 0707 	bic.w	r7, r5, r7
 8003f52:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003f54:	4d05      	ldr	r5, [pc, #20]	; (8003f6c <HAL_GPIO_DeInit+0xf0>)
 8003f56:	3602      	adds	r6, #2
 8003f58:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8003f5c:	ea24 040e 	bic.w	r4, r4, lr
 8003f60:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8003f64:	e797      	b.n	8003e96 <HAL_GPIO_DeInit+0x1a>
  }
}
 8003f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	48000400 	.word	0x48000400
 8003f74:	58000800 	.word	0x58000800

08003f78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f78:	b10a      	cbz	r2, 8003f7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f7a:	6181      	str	r1, [r0, #24]
 8003f7c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f7e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003f80:	4770      	bx	lr

08003f82 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f82:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f84:	ea01 0203 	and.w	r2, r1, r3
 8003f88:	ea21 0103 	bic.w	r1, r1, r3
 8003f8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003f90:	6181      	str	r1, [r0, #24]
}
 8003f92:	4770      	bx	lr

08003f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f94:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4203      	tst	r3, r0
 8003f9c:	d100      	bne.n	8003fa0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003f9e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003fa2:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fa4:	f7fe fbf4 	bl	8002790 <HAL_GPIO_EXTI_Callback>
}
 8003fa8:	e7f9      	b.n	8003f9e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003faa:	bf00      	nop
 8003fac:	58000800 	.word	0x58000800

08003fb0 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb0:	4a02      	ldr	r2, [pc, #8]	; (8003fbc <HAL_PWR_EnableBkUpAccess+0xc>)
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]
}
 8003fba:	4770      	bx	lr
 8003fbc:	58000400 	.word	0x58000400

08003fc0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003fc4:	b9a0      	cbnz	r0, 8003ff0 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003fce:	d10a      	bne.n	8003fe6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fd0:	4a0d      	ldr	r2, [pc, #52]	; (8004008 <HAL_PWR_EnterSLEEPMode+0x48>)
 8003fd2:	6913      	ldr	r3, [r2, #16]
 8003fd4:	f023 0304 	bic.w	r3, r3, #4
 8003fd8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003fda:	2c01      	cmp	r4, #1
 8003fdc:	d010      	beq.n	8004000 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003fde:	bf40      	sev
    __WFE();
 8003fe0:	bf20      	wfe
    __WFE();
 8003fe2:	bf20      	wfe
  }
}
 8003fe4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003fe6:	f000 f821 	bl	800402c <HAL_PWREx_DisableLowPowerRunMode>
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_PWR_EnterSLEEPMode+0x10>
 8003fee:	e7f9      	b.n	8003fe4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003ff0:	4b04      	ldr	r3, [pc, #16]	; (8004004 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003ff8:	d1ea      	bne.n	8003fd0 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003ffa:	f000 f80f 	bl	800401c <HAL_PWREx_EnableLowPowerRunMode>
 8003ffe:	e7e7      	b.n	8003fd0 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004000:	bf30      	wfi
 8004002:	e7ef      	b.n	8003fe4 <HAL_PWR_EnterSLEEPMode+0x24>
 8004004:	58000400 	.word	0x58000400
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800400c:	4b02      	ldr	r3, [pc, #8]	; (8004018 <HAL_PWREx_GetVoltageRange+0xc>)
 800400e:	6818      	ldr	r0, [r3, #0]
}
 8004010:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	58000400 	.word	0x58000400

0800401c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800401c:	4a02      	ldr	r2, [pc, #8]	; (8004028 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800401e:	6813      	ldr	r3, [r2, #0]
 8004020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004024:	6013      	str	r3, [r2, #0]
}
 8004026:	4770      	bx	lr
 8004028:	58000400 	.word	0x58000400

0800402c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800402c:	4a0f      	ldr	r2, [pc, #60]	; (800406c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004034:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004036:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2232      	movs	r2, #50	; 0x32
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	4a0c      	ldr	r2, [pc, #48]	; (8004074 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004048:	e000      	b.n	800404c <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800404a:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800404c:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800404e:	6952      	ldr	r2, [r2, #20]
 8004050:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004054:	d001      	beq.n	800405a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f7      	bne.n	800404a <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004062:	d101      	bne.n	8004068 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8004064:	2000      	movs	r0, #0
 8004066:	4770      	bx	lr
    return HAL_TIMEOUT;
 8004068:	2003      	movs	r0, #3
}
 800406a:	4770      	bx	lr
 800406c:	58000400 	.word	0x58000400
 8004070:	20000070 	.word	0x20000070
 8004074:	431bde83 	.word	0x431bde83

08004078 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004078:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800407a:	6813      	ldr	r3, [r2, #0]
 800407c:	f023 0307 	bic.w	r3, r3, #7
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004088:	6913      	ldr	r3, [r2, #16]
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004090:	2801      	cmp	r0, #1
 8004092:	d008      	beq.n	80040a6 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004094:	bf40      	sev
    __WFE();
 8004096:	bf20      	wfe
    __WFE();
 8004098:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800409a:	4a05      	ldr	r2, [pc, #20]	; (80040b0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800409c:	6913      	ldr	r3, [r2, #16]
 800409e:	f023 0304 	bic.w	r3, r3, #4
 80040a2:	6113      	str	r3, [r2, #16]
}
 80040a4:	4770      	bx	lr
    __WFI();
 80040a6:	bf30      	wfi
 80040a8:	e7f7      	b.n	800409a <HAL_PWREx_EnterSTOP2Mode+0x22>
 80040aa:	bf00      	nop
 80040ac:	58000400 	.word	0x58000400
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80040b4:	b530      	push	{r4, r5, lr}
 80040b6:	b089      	sub	sp, #36	; 0x24
 80040b8:	4604      	mov	r4, r0
 80040ba:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80040bc:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <RCC_SetFlashLatency+0xb4>)
 80040be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80040c2:	9006      	str	r0, [sp, #24]
 80040c4:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80040c8:	f103 0208 	add.w	r2, r3, #8
 80040cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040d0:	9004      	str	r0, [sp, #16]
 80040d2:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80040d6:	ad01      	add	r5, sp, #4
 80040d8:	3310      	adds	r3, #16
 80040da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040de:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80040e6:	d007      	beq.n	80040f8 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	e014      	b.n	8004116 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80040ec:	aa08      	add	r2, sp, #32
 80040ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80040f2:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80040f6:	e01e      	b.n	8004136 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d808      	bhi.n	8004110 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80040fe:	aa08      	add	r2, sp, #32
 8004100:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004104:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004108:	42a2      	cmp	r2, r4
 800410a:	d2ef      	bcs.n	80040ec <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800410c:	3301      	adds	r3, #1
 800410e:	e7f4      	b.n	80040fa <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004110:	2500      	movs	r5, #0
 8004112:	e010      	b.n	8004136 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004114:	3301      	adds	r3, #1
 8004116:	2b02      	cmp	r3, #2
 8004118:	d80c      	bhi.n	8004134 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800411a:	aa08      	add	r2, sp, #32
 800411c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004120:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004124:	42a2      	cmp	r2, r4
 8004126:	d3f5      	bcc.n	8004114 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004128:	aa08      	add	r2, sp, #32
 800412a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800412e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004132:	e000      	b.n	8004136 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004134:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004136:	4a0d      	ldr	r2, [pc, #52]	; (800416c <RCC_SetFlashLatency+0xb8>)
 8004138:	6813      	ldr	r3, [r2, #0]
 800413a:	f023 0307 	bic.w	r3, r3, #7
 800413e:	432b      	orrs	r3, r5
 8004140:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004142:	f7fd fba9 	bl	8001898 <HAL_GetTick>
 8004146:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004148:	4b08      	ldr	r3, [pc, #32]	; (800416c <RCC_SetFlashLatency+0xb8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	42ab      	cmp	r3, r5
 8004152:	d006      	beq.n	8004162 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004154:	f7fd fba0 	bl	8001898 <HAL_GetTick>
 8004158:	1b00      	subs	r0, r0, r4
 800415a:	2802      	cmp	r0, #2
 800415c:	d9f4      	bls.n	8004148 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800415e:	2003      	movs	r0, #3
 8004160:	e000      	b.n	8004164 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8004162:	2000      	movs	r0, #0
}
 8004164:	b009      	add	sp, #36	; 0x24
 8004166:	bd30      	pop	{r4, r5, pc}
 8004168:	08011018 	.word	0x08011018
 800416c:	58004000 	.word	0x58004000

08004170 <RCC_SetFlashLatencyFromMSIRange>:
{
 8004170:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004172:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8004178:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800417c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004180:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	4a08      	ldr	r2, [pc, #32]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 800418a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800418e:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004192:	f7ff ff3b 	bl	800400c <HAL_PWREx_GetVoltageRange>
 8004196:	4601      	mov	r1, r0
 8004198:	4805      	ldr	r0, [pc, #20]	; (80041b0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 800419a:	fba0 3004 	umull	r3, r0, r0, r4
 800419e:	0c80      	lsrs	r0, r0, #18
 80041a0:	f7ff ff88 	bl	80040b4 <RCC_SetFlashLatency>
}
 80041a4:	bd10      	pop	{r4, pc}
 80041a6:	bf00      	nop
 80041a8:	08011578 	.word	0x08011578
 80041ac:	08011518 	.word	0x08011518
 80041b0:	431bde83 	.word	0x431bde83

080041b4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b8:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041c0:	f011 010c 	ands.w	r1, r1, #12
 80041c4:	d00a      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x28>
 80041c6:	290c      	cmp	r1, #12
 80041c8:	d006      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ca:	2904      	cmp	r1, #4
 80041cc:	d047      	beq.n	800425e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ce:	2908      	cmp	r1, #8
 80041d0:	d03b      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80041d2:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80041d4:	4610      	mov	r0, r2
 80041d6:	e026      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d1f6      	bne.n	80041ca <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f013 0308 	ands.w	r3, r3, #8
 80041e6:	d00d      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x50>
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f013 0308 	ands.w	r3, r3, #8
 80041f2:	d124      	bne.n	800423e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80041f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f8:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80041fc:	4a2e      	ldr	r2, [pc, #184]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80041fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004202:	e00e      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	f012 0f08 	tst.w	r2, #8
 800420e:	d112      	bne.n	8004236 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004218:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800421c:	4a26      	ldr	r2, [pc, #152]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800421e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004222:	b1d1      	cbz	r1, 800425a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004224:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d01a      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004234:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	e7ee      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x68>
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004244:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004248:	e7d8      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800424a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8004254:	d106      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8004256:	4819      	ldr	r0, [pc, #100]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004258:	e7e5      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800425a:	4610      	mov	r0, r2
 800425c:	e7e3      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800425e:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004260:	4817      	ldr	r0, [pc, #92]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004262:	e7e0      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004264:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8004266:	4816      	ldr	r0, [pc, #88]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004268:	e7dd      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004274:	2b02      	cmp	r3, #2
 8004276:	d009      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0xd8>
 8004278:	2b03      	cmp	r3, #3
 800427a:	d108      	bne.n	800428e <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004286:	d115      	bne.n	80042b4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004288:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 800428a:	e000      	b.n	800428e <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 800428c:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800428e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004292:	68d8      	ldr	r0, [r3, #12]
 8004294:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004298:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800429c:	68d8      	ldr	r0, [r3, #12]
 800429e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80042a2:	3001      	adds	r0, #1
 80042a4:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042a8:	68d8      	ldr	r0, [r3, #12]
 80042aa:	0f40      	lsrs	r0, r0, #29
 80042ac:	3001      	adds	r0, #1
 80042ae:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80042b2:	e7bf      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80042b4:	4a02      	ldr	r2, [pc, #8]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042b6:	e7ea      	b.n	800428e <HAL_RCC_GetSysClockFreq+0xda>
 80042b8:	08011578 	.word	0x08011578
 80042bc:	01e84800 	.word	0x01e84800
 80042c0:	00f42400 	.word	0x00f42400

080042c4 <HAL_RCC_GetHCLKFreq>:
{
 80042c4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80042c6:	f7ff ff75 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042d4:	4a02      	ldr	r2, [pc, #8]	; (80042e0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80042d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80042da:	fbb0 f0f3 	udiv	r0, r0, r3
 80042de:	bd08      	pop	{r3, pc}
 80042e0:	08011518 	.word	0x08011518

080042e4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80042e4:	2800      	cmp	r0, #0
 80042e6:	f000 8319 	beq.w	800491c <HAL_RCC_OscConfig+0x638>
{
 80042ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ec:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	689d      	ldr	r5, [r3, #8]
 80042f4:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042f8:	68de      	ldr	r6, [r3, #12]
 80042fa:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042fe:	6803      	ldr	r3, [r0, #0]
 8004300:	f013 0f20 	tst.w	r3, #32
 8004304:	f000 808f 	beq.w	8004426 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004308:	b1ed      	cbz	r5, 8004346 <HAL_RCC_OscConfig+0x62>
 800430a:	2d0c      	cmp	r5, #12
 800430c:	d019      	beq.n	8004342 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800430e:	6a23      	ldr	r3, [r4, #32]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80bc 	beq.w	800448e <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800431a:	6813      	ldr	r3, [r2, #0]
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004322:	f7fd fab9 	bl	8001898 <HAL_GetTick>
 8004326:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f013 0f02 	tst.w	r3, #2
 8004332:	d165      	bne.n	8004400 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004334:	f7fd fab0 	bl	8001898 <HAL_GetTick>
 8004338:	1bc0      	subs	r0, r0, r7
 800433a:	2802      	cmp	r0, #2
 800433c:	d9f4      	bls.n	8004328 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800433e:	2003      	movs	r0, #3
 8004340:	e2f9      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004342:	2e01      	cmp	r6, #1
 8004344:	d1e3      	bne.n	800430e <HAL_RCC_OscConfig+0x2a>
 8004346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f013 0f02 	tst.w	r3, #2
 8004350:	d003      	beq.n	800435a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004352:	6a23      	ldr	r3, [r4, #32]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 82e3 	beq.w	8004920 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800435a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800435c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f013 0f08 	tst.w	r3, #8
 8004366:	d029      	beq.n	80043bc <HAL_RCC_OscConfig+0xd8>
 8004368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004372:	4298      	cmp	r0, r3
 8004374:	d92a      	bls.n	80043cc <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004376:	f7ff fefb 	bl	8004170 <RCC_SetFlashLatencyFromMSIRange>
 800437a:	2800      	cmp	r0, #0
 800437c:	f040 82d2 	bne.w	8004924 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	f042 0208 	orr.w	r2, r2, #8
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004392:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004398:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80043a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80043a4:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80043a6:	f7ff ff8d 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 80043aa:	4bb0      	ldr	r3, [pc, #704]	; (800466c <HAL_RCC_OscConfig+0x388>)
 80043ac:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80043ae:	4bb0      	ldr	r3, [pc, #704]	; (8004670 <HAL_RCC_OscConfig+0x38c>)
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	f7fd fa6f 	bl	8001894 <HAL_InitTick>
        if (status != HAL_OK)
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d035      	beq.n	8004426 <HAL_RCC_OscConfig+0x142>
 80043ba:	e2bc      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ca:	e7d2      	b.n	8004372 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	f042 0208 	orr.w	r2, r2, #8
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80043de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80043e0:	430a      	orrs	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80043ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80043f0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80043f4:	f7ff febc 	bl	8004170 <RCC_SetFlashLatencyFromMSIRange>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d0d4      	beq.n	80043a6 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 80043fc:	2001      	movs	r0, #1
 80043fe:	e29a      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	f042 0208 	orr.w	r2, r2, #8
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004412:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004418:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004420:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004424:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f013 0f01 	tst.w	r3, #1
 800442c:	d051      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800442e:	2d08      	cmp	r5, #8
 8004430:	d045      	beq.n	80044be <HAL_RCC_OscConfig+0x1da>
 8004432:	2d0c      	cmp	r5, #12
 8004434:	d041      	beq.n	80044ba <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004440:	68a1      	ldr	r1, [r4, #8]
 8004442:	430b      	orrs	r3, r1
 8004444:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004446:	6863      	ldr	r3, [r4, #4]
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d063      	beq.n	8004516 <HAL_RCC_OscConfig+0x232>
 800444e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004452:	d065      	beq.n	8004520 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800445e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004466:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d063      	beq.n	8004536 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 800446e:	f7fd fa13 	bl	8001898 <HAL_GetTick>
 8004472:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800447e:	d128      	bne.n	80044d2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004480:	f7fd fa0a 	bl	8001898 <HAL_GetTick>
 8004484:	1bc0      	subs	r0, r0, r7
 8004486:	2864      	cmp	r0, #100	; 0x64
 8004488:	d9f4      	bls.n	8004474 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 800448a:	2003      	movs	r0, #3
 800448c:	e253      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800448e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004492:	6813      	ldr	r3, [r2, #0]
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800449a:	f7fd f9fd 	bl	8001898 <HAL_GetTick>
 800449e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80044a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f013 0f02 	tst.w	r3, #2
 80044aa:	d0bc      	beq.n	8004426 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ac:	f7fd f9f4 	bl	8001898 <HAL_GetTick>
 80044b0:	1bc0      	subs	r0, r0, r7
 80044b2:	2802      	cmp	r0, #2
 80044b4:	d9f4      	bls.n	80044a0 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80044b6:	2003      	movs	r0, #3
 80044b8:	e23d      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044ba:	2e03      	cmp	r6, #3
 80044bc:	d1bb      	bne.n	8004436 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80044c8:	d003      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 822b 	beq.w	8004928 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	f013 0f02 	tst.w	r3, #2
 80044d8:	d052      	beq.n	8004580 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044da:	2d04      	cmp	r5, #4
 80044dc:	d03d      	beq.n	800455a <HAL_RCC_OscConfig+0x276>
 80044de:	2d0c      	cmp	r5, #12
 80044e0:	d039      	beq.n	8004556 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044e2:	6923      	ldr	r3, [r4, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8091 	beq.w	800460c <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80044ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80044f6:	f7fd f9cf 	bl	8001898 <HAL_GetTick>
 80044fa:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004506:	d177      	bne.n	80045f8 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004508:	f7fd f9c6 	bl	8001898 <HAL_GetTick>
 800450c:	1b80      	subs	r0, r0, r6
 800450e:	2802      	cmp	r0, #2
 8004510:	d9f4      	bls.n	80044fc <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004512:	2003      	movs	r0, #3
 8004514:	e20f      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
}
 800451e:	e7a3      	b.n	8004468 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800452a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004532:	601a      	str	r2, [r3, #0]
}
 8004534:	e798      	b.n	8004468 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8004536:	f7fd f9af 	bl	8001898 <HAL_GetTick>
 800453a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800453c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004546:	d0c4      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fd f9a6 	bl	8001898 <HAL_GetTick>
 800454c:	1bc0      	subs	r0, r0, r7
 800454e:	2864      	cmp	r0, #100	; 0x64
 8004550:	d9f4      	bls.n	800453c <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8004552:	2003      	movs	r0, #3
 8004554:	e1ef      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004556:	2e02      	cmp	r6, #2
 8004558:	d1c3      	bne.n	80044e2 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800455a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004564:	d003      	beq.n	800456e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 81df 	beq.w	800492c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004574:	6853      	ldr	r3, [r2, #4]
 8004576:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800457a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800457e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	f013 0f08 	tst.w	r3, #8
 8004586:	f000 808e 	beq.w	80046a6 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800458a:	69a3      	ldr	r3, [r4, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d071      	beq.n	8004674 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004598:	69e1      	ldr	r1, [r4, #28]
 800459a:	f003 0210 	and.w	r2, r3, #16
 800459e:	4291      	cmp	r1, r2
 80045a0:	d011      	beq.n	80045c6 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80045a2:	f003 0203 	and.w	r2, r3, #3
 80045a6:	2a02      	cmp	r2, #2
 80045a8:	f000 81c2 	beq.w	8004930 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80045ac:	f013 0f01 	tst.w	r3, #1
 80045b0:	d142      	bne.n	8004638 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80045b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80045ba:	f023 0310 	bic.w	r3, r3, #16
 80045be:	69e1      	ldr	r1, [r4, #28]
 80045c0:	430b      	orrs	r3, r1
 80045c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80045c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ca:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80045d6:	f7fd f95f 	bl	8001898 <HAL_GetTick>
 80045da:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80045dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e4:	f013 0f02 	tst.w	r3, #2
 80045e8:	d15d      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ea:	f7fd f955 	bl	8001898 <HAL_GetTick>
 80045ee:	1b80      	subs	r0, r0, r6
 80045f0:	2811      	cmp	r0, #17
 80045f2:	d9f3      	bls.n	80045dc <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 80045f4:	2003      	movs	r0, #3
 80045f6:	e19e      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80045fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fe:	6853      	ldr	r3, [r2, #4]
 8004600:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004604:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004608:	6053      	str	r3, [r2, #4]
}
 800460a:	e7b9      	b.n	8004580 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800460c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004610:	6813      	ldr	r3, [r2, #0]
 8004612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004616:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004618:	f7fd f93e 	bl	8001898 <HAL_GetTick>
 800461c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004628:	d0aa      	beq.n	8004580 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462a:	f7fd f935 	bl	8001898 <HAL_GetTick>
 800462e:	1b80      	subs	r0, r0, r6
 8004630:	2802      	cmp	r0, #2
 8004632:	d9f4      	bls.n	800461e <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004634:	2003      	movs	r0, #3
 8004636:	e17e      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800463c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004648:	f7fd f926 	bl	8001898 <HAL_GetTick>
 800464c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800464e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004656:	f013 0f02 	tst.w	r3, #2
 800465a:	d0aa      	beq.n	80045b2 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465c:	f7fd f91c 	bl	8001898 <HAL_GetTick>
 8004660:	1b80      	subs	r0, r0, r6
 8004662:	2811      	cmp	r0, #17
 8004664:	d9f3      	bls.n	800464e <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8004666:	2003      	movs	r0, #3
 8004668:	e165      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
 800466a:	bf00      	nop
 800466c:	20000070 	.word	0x20000070
 8004670:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004678:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004684:	f7fd f908 	bl	8001898 <HAL_GetTick>
 8004688:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800468a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	f013 0f02 	tst.w	r3, #2
 8004696:	d006      	beq.n	80046a6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004698:	f7fd f8fe 	bl	8001898 <HAL_GetTick>
 800469c:	1b80      	subs	r0, r0, r6
 800469e:	2811      	cmp	r0, #17
 80046a0:	d9f3      	bls.n	800468a <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 80046a2:	2003      	movs	r0, #3
 80046a4:	e147      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	f013 0f04 	tst.w	r3, #4
 80046ac:	f000 80b1 	beq.w	8004812 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80046b0:	4ba8      	ldr	r3, [pc, #672]	; (8004954 <HAL_RCC_OscConfig+0x670>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046b8:	d110      	bne.n	80046dc <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 80046ba:	f7ff fc79 	bl	8003fb0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80046be:	f7fd f8eb 	bl	8001898 <HAL_GetTick>
 80046c2:	4606      	mov	r6, r0
 80046c4:	4ba3      	ldr	r3, [pc, #652]	; (8004954 <HAL_RCC_OscConfig+0x670>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046cc:	d106      	bne.n	80046dc <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ce:	f7fd f8e3 	bl	8001898 <HAL_GetTick>
 80046d2:	1b80      	subs	r0, r0, r6
 80046d4:	2802      	cmp	r0, #2
 80046d6:	d9f5      	bls.n	80046c4 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 80046d8:	2003      	movs	r0, #3
 80046da:	e12c      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046dc:	68e3      	ldr	r3, [r4, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d061      	beq.n	80047a6 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80046e2:	2b85      	cmp	r3, #133	; 0x85
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80046fa:	f7fd f8cd 	bl	8001898 <HAL_GetTick>
 80046fe:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004704:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	f013 0f02 	tst.w	r3, #2
 800471c:	d108      	bne.n	8004730 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7fd f8bb 	bl	8001898 <HAL_GetTick>
 8004722:	1b80      	subs	r0, r0, r6
 8004724:	f241 3388 	movw	r3, #5000	; 0x1388
 8004728:	4298      	cmp	r0, r3
 800472a:	d9f1      	bls.n	8004710 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 800472c:	2003      	movs	r0, #3
 800472e:	e102      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004730:	68e3      	ldr	r3, [r4, #12]
 8004732:	2b81      	cmp	r3, #129	; 0x81
 8004734:	d001      	beq.n	800473a <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004736:	2b85      	cmp	r3, #133	; 0x85
 8004738:	d11a      	bne.n	8004770 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 800473a:	f7fd f8ad 	bl	8001898 <HAL_GetTick>
 800473e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004744:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800475c:	d159      	bne.n	8004812 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fd f89b 	bl	8001898 <HAL_GetTick>
 8004762:	1b80      	subs	r0, r0, r6
 8004764:	f241 3388 	movw	r3, #5000	; 0x1388
 8004768:	4298      	cmp	r0, r3
 800476a:	d9f1      	bls.n	8004750 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 800476c:	2003      	movs	r0, #3
 800476e:	e0e2      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8004770:	f7fd f892 	bl	8001898 <HAL_GetTick>
 8004774:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800477a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800477e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004792:	d03e      	beq.n	8004812 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fd f880 	bl	8001898 <HAL_GetTick>
 8004798:	1b80      	subs	r0, r0, r6
 800479a:	f241 3388 	movw	r3, #5000	; 0x1388
 800479e:	4298      	cmp	r0, r3
 80047a0:	d9f1      	bls.n	8004786 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 80047a2:	2003      	movs	r0, #3
 80047a4:	e0c7      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80047a6:	f7fd f877 	bl	8001898 <HAL_GetTick>
 80047aa:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047c8:	d008      	beq.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7fd f865 	bl	8001898 <HAL_GetTick>
 80047ce:	1b80      	subs	r0, r0, r6
 80047d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80047d4:	4298      	cmp	r0, r3
 80047d6:	d9f1      	bls.n	80047bc <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 80047d8:	2003      	movs	r0, #3
 80047da:	e0ac      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80047dc:	f7fd f85c 	bl	8001898 <HAL_GetTick>
 80047e0:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f013 0f02 	tst.w	r3, #2
 80047fe:	d008      	beq.n	8004812 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fd f84a 	bl	8001898 <HAL_GetTick>
 8004804:	1b80      	subs	r0, r0, r6
 8004806:	f241 3388 	movw	r3, #5000	; 0x1388
 800480a:	4298      	cmp	r0, r3
 800480c:	d9f1      	bls.n	80047f2 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 800480e:	2003      	movs	r0, #3
 8004810:	e091      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004812:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 808d 	beq.w	8004934 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800481a:	2d0c      	cmp	r5, #12
 800481c:	d062      	beq.n	80048e4 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800481e:	2b02      	cmp	r3, #2
 8004820:	d01f      	beq.n	8004862 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800482c:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	f022 0203 	bic.w	r2, r2, #3
 8004834:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800483c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004840:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004842:	f7fd f829 	bl	8001898 <HAL_GetTick>
 8004846:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004852:	d073      	beq.n	800493c <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fd f820 	bl	8001898 <HAL_GetTick>
 8004858:	1b00      	subs	r0, r0, r4
 800485a:	280a      	cmp	r0, #10
 800485c:	d9f4      	bls.n	8004848 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 800485e:	2003      	movs	r0, #3
 8004860:	e069      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800486c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800486e:	f7fd f813 	bl	8001898 <HAL_GetTick>
 8004872:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800487e:	d12a      	bne.n	80048d6 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004884:	68d3      	ldr	r3, [r2, #12]
 8004886:	4934      	ldr	r1, [pc, #208]	; (8004958 <HAL_RCC_OscConfig+0x674>)
 8004888:	4019      	ands	r1, r3
 800488a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800488c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800488e:	4303      	orrs	r3, r0
 8004890:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004892:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004896:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004898:	4303      	orrs	r3, r0
 800489a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800489c:	4303      	orrs	r3, r0
 800489e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80048a0:	4303      	orrs	r3, r0
 80048a2:	430b      	orrs	r3, r1
 80048a4:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ac:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048ae:	68d3      	ldr	r3, [r2, #12]
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b4:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80048b6:	f7fc ffef 	bl	8001898 <HAL_GetTick>
 80048ba:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80048c6:	d137      	bne.n	8004938 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fc ffe6 	bl	8001898 <HAL_GetTick>
 80048cc:	1b00      	subs	r0, r0, r4
 80048ce:	280a      	cmp	r0, #10
 80048d0:	d9f4      	bls.n	80048bc <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 80048d2:	2003      	movs	r0, #3
 80048d4:	e02f      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fc ffdf 	bl	8001898 <HAL_GetTick>
 80048da:	1b40      	subs	r0, r0, r5
 80048dc:	280a      	cmp	r0, #10
 80048de:	d9c9      	bls.n	8004874 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 80048e0:	2003      	movs	r0, #3
 80048e2:	e028      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d02b      	beq.n	8004940 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ec:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80048ee:	f003 0103 	and.w	r1, r3, #3
 80048f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048f4:	4291      	cmp	r1, r2
 80048f6:	d125      	bne.n	8004944 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80048f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048fe:	428a      	cmp	r2, r1
 8004900:	d122      	bne.n	8004948 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004902:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004906:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004908:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800490c:	d11e      	bne.n	800494c <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800490e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004912:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004914:	4293      	cmp	r3, r2
 8004916:	d11b      	bne.n	8004950 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8004918:	2000      	movs	r0, #0
 800491a:	e00c      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 800491c:	2001      	movs	r0, #1
}
 800491e:	4770      	bx	lr
        return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8004924:	2001      	movs	r0, #1
 8004926:	e006      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004928:	2001      	movs	r0, #1
 800492a:	e004      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 800492c:	2001      	movs	r0, #1
 800492e:	e002      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004930:	2001      	movs	r0, #1
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8004934:	2000      	movs	r0, #0
}
 8004936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004938:	2000      	movs	r0, #0
 800493a:	e7fc      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
 800493c:	2000      	movs	r0, #0
 800493e:	e7fa      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004940:	2001      	movs	r0, #1
 8004942:	e7f8      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004944:	2001      	movs	r0, #1
 8004946:	e7f6      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
 8004948:	2001      	movs	r0, #1
 800494a:	e7f4      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
 800494c:	2001      	movs	r0, #1
 800494e:	e7f2      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
 8004950:	2001      	movs	r0, #1
 8004952:	e7f0      	b.n	8004936 <HAL_RCC_OscConfig+0x652>
 8004954:	58000400 	.word	0x58000400
 8004958:	11c1808c 	.word	0x11c1808c

0800495c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800495c:	2800      	cmp	r0, #0
 800495e:	f000 8127 	beq.w	8004bb0 <HAL_RCC_ClockConfig+0x254>
{
 8004962:	b570      	push	{r4, r5, r6, lr}
 8004964:	460c      	mov	r4, r1
 8004966:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b93      	ldr	r3, [pc, #588]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	428b      	cmp	r3, r1
 8004972:	d32d      	bcc.n	80049d0 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	f013 0f02 	tst.w	r3, #2
 800497a:	d13f      	bne.n	80049fc <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	f013 0f20 	tst.w	r3, #32
 8004982:	d153      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	f013 0f40 	tst.w	r3, #64	; 0x40
 800498a:	d16a      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	f013 0f04 	tst.w	r3, #4
 8004992:	f040 8083 	bne.w	8004a9c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	f013 0f08 	tst.w	r3, #8
 800499c:	f040 8097 	bne.w	8004ace <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	f013 0f01 	tst.w	r3, #1
 80049a6:	f000 80de 	beq.w	8004b66 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	686b      	ldr	r3, [r5, #4]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f000 80a8 	beq.w	8004b02 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	f000 80ad 	beq.w	8004b12 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 80b2 	bne.w	8004b22 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80049be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	f012 0f02 	tst.w	r2, #2
 80049c8:	f040 80b1 	bne.w	8004b2e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80049cc:	2001      	movs	r0, #1
 80049ce:	e0ee      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d0:	4a79      	ldr	r2, [pc, #484]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	f023 0307 	bic.w	r3, r3, #7
 80049d8:	430b      	orrs	r3, r1
 80049da:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80049dc:	f7fc ff5c 	bl	8001898 <HAL_GetTick>
 80049e0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	42a3      	cmp	r3, r4
 80049ec:	d0c2      	beq.n	8004974 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049ee:	f7fc ff53 	bl	8001898 <HAL_GetTick>
 80049f2:	1b80      	subs	r0, r0, r6
 80049f4:	2802      	cmp	r0, #2
 80049f6:	d9f4      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80049f8:	2003      	movs	r0, #3
 80049fa:	e0d8      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80049fc:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80049fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a02:	688a      	ldr	r2, [r1, #8]
 8004a04:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004a0c:	f7fc ff44 	bl	8001898 <HAL_GetTick>
 8004a10:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a1c:	d1ae      	bne.n	800497c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a1e:	f7fc ff3b 	bl	8001898 <HAL_GetTick>
 8004a22:	1b80      	subs	r0, r0, r6
 8004a24:	2802      	cmp	r0, #2
 8004a26:	d9f4      	bls.n	8004a12 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004a28:	2003      	movs	r0, #3
 8004a2a:	e0c0      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004a2c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a32:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8004a36:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004a40:	f7fc ff2a 	bl	8001898 <HAL_GetTick>
 8004a44:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a52:	d197      	bne.n	8004984 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a54:	f7fc ff20 	bl	8001898 <HAL_GetTick>
 8004a58:	1b80      	subs	r0, r0, r6
 8004a5a:	2802      	cmp	r0, #2
 8004a5c:	d9f3      	bls.n	8004a46 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004a5e:	2003      	movs	r0, #3
 8004a60:	e0a5      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004a62:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a68:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004a6c:	f023 030f 	bic.w	r3, r3, #15
 8004a70:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004a74:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004a78:	f7fc ff0e 	bl	8001898 <HAL_GetTick>
 8004a7c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a86:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a8a:	f47f af7f 	bne.w	800498c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a8e:	f7fc ff03 	bl	8001898 <HAL_GetTick>
 8004a92:	1b80      	subs	r0, r0, r6
 8004a94:	2802      	cmp	r0, #2
 8004a96:	d9f2      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004a98:	2003      	movs	r0, #3
 8004a9a:	e088      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004a9c:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa2:	688a      	ldr	r2, [r1, #8]
 8004aa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004aac:	f7fc fef4 	bl	8001898 <HAL_GetTick>
 8004ab0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004abc:	f47f af6b 	bne.w	8004996 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ac0:	f7fc feea 	bl	8001898 <HAL_GetTick>
 8004ac4:	1b80      	subs	r0, r0, r6
 8004ac6:	2802      	cmp	r0, #2
 8004ac8:	d9f3      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004aca:	2003      	movs	r0, #3
 8004acc:	e06f      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004ace:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad4:	6893      	ldr	r3, [r2, #8]
 8004ad6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004ada:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ade:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004ae0:	f7fc feda 	bl	8001898 <HAL_GetTick>
 8004ae4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004af0:	f47f af56 	bne.w	80049a0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004af4:	f7fc fed0 	bl	8001898 <HAL_GetTick>
 8004af8:	1b80      	subs	r0, r0, r6
 8004afa:	2802      	cmp	r0, #2
 8004afc:	d9f3      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004afe:	2003      	movs	r0, #3
 8004b00:	e055      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004b0c:	d10f      	bne.n	8004b2e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004b0e:	2001      	movs	r0, #1
 8004b10:	e04d      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004b1e:	2001      	movs	r0, #1
 8004b20:	e045      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004b2c:	d042      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b32:	688a      	ldr	r2, [r1, #8]
 8004b34:	f022 0203 	bic.w	r2, r2, #3
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004b3c:	f7fc feac 	bl	8001898 <HAL_GetTick>
 8004b40:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4c:	686a      	ldr	r2, [r5, #4]
 8004b4e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b52:	d008      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b54:	f7fc fea0 	bl	8001898 <HAL_GetTick>
 8004b58:	1b80      	subs	r0, r0, r6
 8004b5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b5e:	4298      	cmp	r0, r3
 8004b60:	d9ef      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004b62:	2003      	movs	r0, #3
 8004b64:	e023      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b66:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	d915      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004b74:	6813      	ldr	r3, [r2, #0]
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	4323      	orrs	r3, r4
 8004b7c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004b7e:	f7fc fe8b 	bl	8001898 <HAL_GetTick>
 8004b82:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b84:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <HAL_RCC_ClockConfig+0x25c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	42a3      	cmp	r3, r4
 8004b8e:	d006      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b90:	f7fc fe82 	bl	8001898 <HAL_GetTick>
 8004b94:	1b40      	subs	r0, r0, r5
 8004b96:	2802      	cmp	r0, #2
 8004b98:	d9f4      	bls.n	8004b84 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004b9a:	2003      	movs	r0, #3
 8004b9c:	e007      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b9e:	f7ff fb91 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCC_ClockConfig+0x260>)
 8004ba4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <HAL_RCC_ClockConfig+0x264>)
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f7fc fe73 	bl	8001894 <HAL_InitTick>
}
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004bb0:	2001      	movs	r0, #1
}
 8004bb2:	4770      	bx	lr
        return HAL_ERROR;
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	e7fa      	b.n	8004bae <HAL_RCC_ClockConfig+0x252>
 8004bb8:	58004000 	.word	0x58004000
 8004bbc:	20000070 	.word	0x20000070
 8004bc0:	20000074 	.word	0x20000074

08004bc4 <HAL_RCC_GetPCLK1Freq>:
{
 8004bc4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bc6:	f7ff fb7d 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004bd4:	4a02      	ldr	r2, [pc, #8]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004bda:	40d8      	lsrs	r0, r3
 8004bdc:	bd08      	pop	{r3, pc}
 8004bde:	bf00      	nop
 8004be0:	08011558 	.word	0x08011558

08004be4 <HAL_RCC_GetPCLK2Freq>:
{
 8004be4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004be6:	f7ff fb6d 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004bf4:	4a02      	ldr	r2, [pc, #8]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004bfa:	40d8      	lsrs	r0, r3
 8004bfc:	bd08      	pop	{r3, pc}
 8004bfe:	bf00      	nop
 8004c00:	08011558 	.word	0x08011558

08004c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c08:	6803      	ldr	r3, [r0, #0]
 8004c0a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c0e:	f040 80ab 	bne.w	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c12:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	f013 0f01 	tst.w	r3, #1
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c1c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c22:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c26:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004c2a:	b292      	uxth	r2, r2
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	f013 0f02 	tst.w	r3, #2
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c3a:	68a2      	ldr	r2, [r4, #8]
 8004c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c40:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c44:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004c48:	b292      	uxth	r2, r2
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	f013 0f20 	tst.w	r3, #32
 8004c56:	d009      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c58:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004c72:	d00c      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c74:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c7a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c7e:	0c02      	lsrs	r2, r0, #16
 8004c80:	0412      	lsls	r2, r2, #16
 8004c82:	ea23 0302 	bic.w	r3, r3, r2
 8004c86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c94:	d00c      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c9c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ca0:	0c02      	lsrs	r2, r0, #16
 8004ca2:	0412      	lsls	r2, r2, #16
 8004ca4:	ea23 0302 	bic.w	r3, r3, r2
 8004ca8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004cb8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cbe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004cc2:	0c02      	lsrs	r2, r0, #16
 8004cc4:	0412      	lsls	r2, r2, #16
 8004cc6:	ea23 0302 	bic.w	r3, r3, r2
 8004cca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004cd8:	f040 809e 	bne.w	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ce2:	f040 80aa 	bne.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004cec:	f040 80b6 	bne.w	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	f013 0f10 	tst.w	r3, #16
 8004cf6:	d00e      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004cf8:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cfe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004d0c:	68e3      	ldr	r3, [r4, #12]
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	f000 80b4 	beq.w	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004d1c:	d00f      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d28:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d34:	b91b      	cbnz	r3, 8004d3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004d36:	68cb      	ldr	r3, [r1, #12]
 8004d38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004d44:	d00e      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004d48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004d5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d60:	f000 8092 	beq.w	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004d64:	4628      	mov	r0, r5
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004d68:	f7ff f922 	bl	8003fb0 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004d6c:	f7fc fd94 	bl	8001898 <HAL_GetTick>
 8004d70:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004d72:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7c:	f7fc fd8c 	bl	8001898 <HAL_GetTick>
 8004d80:	1b40      	subs	r0, r0, r5
 8004d82:	2802      	cmp	r0, #2
 8004d84:	d9f5      	bls.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8004d86:	2503      	movs	r5, #3
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004d8a:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	f47f af41 	bne.w	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004d9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d024      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004dac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004db0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004db4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004db8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004dbc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004dc0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004dc4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004dc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004dcc:	f012 0f02 	tst.w	r2, #2
 8004dd0:	d10f      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	f47f af1e 	bne.w	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dde:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004de2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004dec:	e712      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004dee:	2200      	movs	r2, #0
 8004df0:	e7ec      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8004df2:	f7fc fd51 	bl	8001898 <HAL_GetTick>
 8004df6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	f013 0f02 	tst.w	r3, #2
 8004e04:	d1e5      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e06:	f7fc fd47 	bl	8001898 <HAL_GetTick>
 8004e0a:	1b80      	subs	r0, r0, r6
 8004e0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e10:	4298      	cmp	r0, r3
 8004e12:	d9f1      	bls.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8004e14:	2503      	movs	r5, #3
 8004e16:	e7dc      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e18:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e1a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004e1e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e22:	0919      	lsrs	r1, r3, #4
 8004e24:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004e28:	ea22 0201 	bic.w	r2, r2, r1
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004e38:	e750      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e3a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e3c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004e40:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e44:	0919      	lsrs	r1, r3, #4
 8004e46:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004e4a:	ea22 0201 	bic.w	r2, r2, r1
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004e5a:	e744      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e5c:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e5e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004e62:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e66:	0919      	lsrs	r1, r3, #4
 8004e68:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004e6c:	ea22 0201 	bic.w	r2, r2, r1
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004e7c:	e738      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004e7e:	68cb      	ldr	r3, [r1, #12]
 8004e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e84:	60cb      	str	r3, [r1, #12]
 8004e86:	e746      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e88:	68cb      	ldr	r3, [r1, #12]
 8004e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8e:	60cb      	str	r3, [r1, #12]
 8004e90:	e768      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e92:	bf00      	nop
 8004e94:	58000400 	.word	0x58000400

08004e98 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e98:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d036      	beq.n	8004f0e <HAL_RTC_DeactivateAlarm+0x76>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004eae:	22ca      	movs	r2, #202	; 0xca
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24
 8004eb2:	2253      	movs	r2, #83	; 0x53
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004eb6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004eba:	d019      	beq.n	8004ef0 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004ebc:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004ec4:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ec8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ecc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004ece:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004ed0:	f022 0202 	bic.w	r2, r2, #2
 8004ed4:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eda:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004edc:	22ff      	movs	r2, #255	; 0xff
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004eec:	4618      	mov	r0, r3
 8004eee:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004ef6:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004efe:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004f00:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004f08:	2201      	movs	r2, #1
 8004f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f0c:	e7e5      	b.n	8004eda <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8004f0e:	2002      	movs	r0, #2
}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40002800 	.word	0x40002800

08004f18 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004f1e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004f20:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004f22:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004f24:	f015 0f01 	tst.w	r5, #1
 8004f28:	d106      	bne.n	8004f38 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004f2a:	f015 0f02 	tst.w	r5, #2
 8004f2e:	d109      	bne.n	8004f44 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004f3e:	f7fc fe53 	bl	8001be8 <HAL_RTC_AlarmAEventCallback>
 8004f42:	e7f2      	b.n	8004f2a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004f46:	2202      	movs	r2, #2
 8004f48:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f9e6 	bl	800531c <HAL_RTCEx_AlarmBEventCallback>
 8004f50:	e7ee      	b.n	8004f30 <HAL_RTC_AlarmIRQHandler+0x18>
 8004f52:	bf00      	nop
 8004f54:	40002800 	.word	0x40002800

08004f58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f58:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004f5a:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <HAL_RTC_WaitForSynchro+0x30>)
 8004f5c:	68d3      	ldr	r3, [r2, #12]
 8004f5e:	f023 0320 	bic.w	r3, r3, #32
 8004f62:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004f64:	f7fc fc98 	bl	8001898 <HAL_GetTick>
 8004f68:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <HAL_RTC_WaitForSynchro+0x30>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f013 0f20 	tst.w	r3, #32
 8004f72:	d107      	bne.n	8004f84 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f74:	f7fc fc90 	bl	8001898 <HAL_GetTick>
 8004f78:	1b00      	subs	r0, r0, r4
 8004f7a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f7e:	d9f4      	bls.n	8004f6a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004f80:	2003      	movs	r0, #3
 8004f82:	e000      	b.n	8004f86 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004f84:	2000      	movs	r0, #0
}
 8004f86:	bd10      	pop	{r4, pc}
 8004f88:	40002800 	.word	0x40002800

08004f8c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f8c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <RTC_EnterInitMode+0x48>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f96:	d002      	beq.n	8004f9e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004f98:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
 8004f9e:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004fa0:	4a0c      	ldr	r2, [pc, #48]	; (8004fd4 <RTC_EnterInitMode+0x48>)
 8004fa2:	68d3      	ldr	r3, [r2, #12]
 8004fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004faa:	f7fc fc75 	bl	8001898 <HAL_GetTick>
 8004fae:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004fb0:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <RTC_EnterInitMode+0x48>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004fba:	d1ee      	bne.n	8004f9a <RTC_EnterInitMode+0xe>
 8004fbc:	2c03      	cmp	r4, #3
 8004fbe:	d0ec      	beq.n	8004f9a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004fc0:	f7fc fc6a 	bl	8001898 <HAL_GetTick>
 8004fc4:	1b43      	subs	r3, r0, r5
 8004fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fca:	d9f2      	bls.n	8004fb2 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fcc:	2403      	movs	r4, #3
 8004fce:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8004fd2:	e7ee      	b.n	8004fb2 <RTC_EnterInitMode+0x26>
 8004fd4:	40002800 	.word	0x40002800

08004fd8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <RTC_ExitInitMode+0x4c>)
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fe4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f013 0f20 	tst.w	r3, #32
 8004fec:	d107      	bne.n	8004ffe <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fee:	f7ff ffb3 	bl	8004f58 <HAL_RTC_WaitForSynchro>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	b1a0      	cbz	r0, 8005020 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004ffc:	e010      	b.n	8005020 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ffe:	4a09      	ldr	r2, [pc, #36]	; (8005024 <RTC_ExitInitMode+0x4c>)
 8005000:	6993      	ldr	r3, [r2, #24]
 8005002:	f023 0320 	bic.w	r3, r3, #32
 8005006:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005008:	f7ff ffa6 	bl	8004f58 <HAL_RTC_WaitForSynchro>
 800500c:	4603      	mov	r3, r0
 800500e:	b110      	cbz	r0, 8005016 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005016:	4903      	ldr	r1, [pc, #12]	; (8005024 <RTC_ExitInitMode+0x4c>)
 8005018:	698a      	ldr	r2, [r1, #24]
 800501a:	f042 0220 	orr.w	r2, r2, #32
 800501e:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8005020:	4618      	mov	r0, r3
 8005022:	bd10      	pop	{r4, pc}
 8005024:	40002800 	.word	0x40002800

08005028 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005028:	2800      	cmp	r0, #0
 800502a:	d04a      	beq.n	80050c2 <HAL_RTC_Init+0x9a>
{
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005030:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005034:	b19b      	cbz	r3, 800505e <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005036:	2302      	movs	r3, #2
 8005038:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800503c:	4b22      	ldr	r3, [pc, #136]	; (80050c8 <HAL_RTC_Init+0xa0>)
 800503e:	22ca      	movs	r2, #202	; 0xca
 8005040:	625a      	str	r2, [r3, #36]	; 0x24
 8005042:	2253      	movs	r2, #83	; 0x53
 8005044:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8005046:	4620      	mov	r0, r4
 8005048:	f7ff ffa0 	bl	8004f8c <RTC_EnterInitMode>
    if (status == HAL_OK)
 800504c:	b160      	cbz	r0, 8005068 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800504e:	4b1e      	ldr	r3, [pc, #120]	; (80050c8 <HAL_RTC_Init+0xa0>)
 8005050:	22ff      	movs	r2, #255	; 0xff
 8005052:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005054:	b910      	cbnz	r0, 800505c <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8005056:	2301      	movs	r3, #1
 8005058:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800505c:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800505e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8005062:	f7fc fa7b 	bl	800155c <HAL_RTC_MspInit>
 8005066:	e7e6      	b.n	8005036 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005068:	4b17      	ldr	r3, [pc, #92]	; (80050c8 <HAL_RTC_Init+0xa0>)
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8005070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005074:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005076:	6999      	ldr	r1, [r3, #24]
 8005078:	6862      	ldr	r2, [r4, #4]
 800507a:	6920      	ldr	r0, [r4, #16]
 800507c:	4302      	orrs	r2, r0
 800507e:	69a0      	ldr	r0, [r4, #24]
 8005080:	4302      	orrs	r2, r0
 8005082:	430a      	orrs	r2, r1
 8005084:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005086:	68e2      	ldr	r2, [r4, #12]
 8005088:	68a1      	ldr	r1, [r4, #8]
 800508a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800508e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005096:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005098:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800509a:	4301      	orrs	r1, r0
 800509c:	430a      	orrs	r2, r1
 800509e:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 80050a0:	4620      	mov	r0, r4
 80050a2:	f7ff ff99 	bl	8004fd8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d1d1      	bne.n	800504e <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 80050aa:	4907      	ldr	r1, [pc, #28]	; (80050c8 <HAL_RTC_Init+0xa0>)
 80050ac:	698b      	ldr	r3, [r1, #24]
 80050ae:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80050b2:	6a22      	ldr	r2, [r4, #32]
 80050b4:	69e5      	ldr	r5, [r4, #28]
 80050b6:	432a      	orrs	r2, r5
 80050b8:	6965      	ldr	r5, [r4, #20]
 80050ba:	432a      	orrs	r2, r5
 80050bc:	4313      	orrs	r3, r2
 80050be:	618b      	str	r3, [r1, #24]
 80050c0:	e7c5      	b.n	800504e <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 80050c2:	2001      	movs	r0, #1
}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40002800 	.word	0x40002800

080050cc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80050cc:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80050ce:	e002      	b.n	80050d6 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80050d0:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80050d2:	380a      	subs	r0, #10
 80050d4:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80050d6:	2809      	cmp	r0, #9
 80050d8:	d8fa      	bhi.n	80050d0 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	b2db      	uxtb	r3, r3
}
 80050de:	4318      	orrs	r0, r3
 80050e0:	4770      	bx	lr
	...

080050e4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80050e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	f000 80b0 	beq.w	800524e <HAL_RTC_SetAlarm_IT+0x16a>
{
 80050ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f2:	4605      	mov	r5, r0
 80050f4:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80050f6:	2301      	movs	r3, #1
 80050f8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050fc:	2302      	movs	r3, #2
 80050fe:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005102:	4b54      	ldr	r3, [pc, #336]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 8005104:	68de      	ldr	r6, [r3, #12]
 8005106:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800510a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800510e:	d043      	beq.n	8005198 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005110:	bb12      	cbnz	r2, 8005158 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005118:	d101      	bne.n	800511e <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800511a:	2300      	movs	r3, #0
 800511c:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800511e:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005122:	7820      	ldrb	r0, [r4, #0]
 8005124:	f7ff ffd2 	bl	80050cc <RTC_ByteToBcd2>
 8005128:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800512a:	7860      	ldrb	r0, [r4, #1]
 800512c:	f7ff ffce 	bl	80050cc <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005130:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005134:	78a0      	ldrb	r0, [r4, #2]
 8005136:	f7ff ffc9 	bl	80050cc <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800513a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800513c:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800513e:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005142:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8005146:	f7ff ffc1 	bl	80050cc <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800514a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800514e:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005150:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005152:	ea48 0000 	orr.w	r0, r8, r0
 8005156:	e020      	b.n	800519a <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005158:	6948      	ldr	r0, [r1, #20]
 800515a:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800515e:	d009      	beq.n	8005174 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005160:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005164:	d006      	beq.n	8005174 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005166:	4b3b      	ldr	r3, [pc, #236]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800516e:	d101      	bne.n	8005174 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005170:	2300      	movs	r3, #0
 8005172:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005174:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005176:	7863      	ldrb	r3, [r4, #1]
 8005178:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800517a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800517e:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005180:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005182:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005184:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005188:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800518c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005190:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005192:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005194:	4318      	orrs	r0, r3
 8005196:	e000      	b.n	800519a <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8005198:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800519a:	4b2e      	ldr	r3, [pc, #184]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 800519c:	22ca      	movs	r2, #202	; 0xca
 800519e:	625a      	str	r2, [r3, #36]	; 0x24
 80051a0:	2253      	movs	r2, #83	; 0x53
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80051a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80051a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051aa:	d02a      	beq.n	8005202 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 80051ae:	699a      	ldr	r2, [r3, #24]
 80051b0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80051b4:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80051b6:	2202      	movs	r2, #2
 80051b8:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80051ba:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80051be:	d040      	beq.n	8005242 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80051c0:	4b24      	ldr	r3, [pc, #144]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 80051c2:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80051c4:	69a2      	ldr	r2, [r4, #24]
 80051c6:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80051c8:	6862      	ldr	r2, [r4, #4]
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 80051cc:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80051ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80051d0:	f042 0202 	orr.w	r2, r2, #2
 80051d4:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80051dc:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80051de:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <HAL_RTC_SetAlarm_IT+0x174>)
 80051e0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80051e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 80051ee:	22ff      	movs	r2, #255	; 0xff
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80051f8:	2000      	movs	r0, #0
 80051fa:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80051fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005202:	4b14      	ldr	r3, [pc, #80]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800520a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800520c:	2201      	movs	r2, #1
 800520e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005210:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005214:	d00f      	beq.n	8005236 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 8005218:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800521a:	69a2      	ldr	r2, [r4, #24]
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800521e:	6862      	ldr	r2, [r4, #4]
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 8005222:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005224:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005232:	619a      	str	r2, [r3, #24]
 8005234:	e7d3      	b.n	80051de <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005236:	69a3      	ldr	r3, [r4, #24]
 8005238:	69e2      	ldr	r2, [r4, #28]
 800523a:	4313      	orrs	r3, r2
 800523c:	4a05      	ldr	r2, [pc, #20]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 800523e:	6453      	str	r3, [r2, #68]	; 0x44
 8005240:	e7ed      	b.n	800521e <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005242:	69a3      	ldr	r3, [r4, #24]
 8005244:	69e2      	ldr	r2, [r4, #28]
 8005246:	4313      	orrs	r3, r2
 8005248:	4a02      	ldr	r2, [pc, #8]	; (8005254 <HAL_RTC_SetAlarm_IT+0x170>)
 800524a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800524c:	e7bc      	b.n	80051c8 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800524e:	2002      	movs	r0, #2
}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40002800 	.word	0x40002800
 8005258:	58000800 	.word	0x58000800

0800525c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800525c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d017      	beq.n	8005294 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005264:	2101      	movs	r1, #1
 8005266:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800526a:	2302      	movs	r3, #2
 800526c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005272:	22ca      	movs	r2, #202	; 0xca
 8005274:	625a      	str	r2, [r3, #36]	; 0x24
 8005276:	2253      	movs	r2, #83	; 0x53
 8005278:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	f042 0220 	orr.w	r2, r2, #32
 8005280:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005282:	22ff      	movs	r2, #255	; 0xff
 8005284:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005286:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800528a:	2300      	movs	r3, #0
 800528c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005290:	4618      	mov	r0, r3
 8005292:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005294:	2002      	movs	r0, #2
}
 8005296:	4770      	bx	lr
 8005298:	40002800 	.word	0x40002800

0800529c <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800529c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d020      	beq.n	80052e6 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80052a4:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80052a6:	2101      	movs	r1, #1
 80052a8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052ac:	2302      	movs	r3, #2
 80052ae:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052b2:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <HAL_RTCEx_SetSSRU_IT+0x50>)
 80052b4:	22ca      	movs	r2, #202	; 0xca
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24
 80052b8:	2253      	movs	r2, #83	; 0x53
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052c2:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80052c4:	4c0a      	ldr	r4, [pc, #40]	; (80052f0 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80052c6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80052ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80052ce:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052d2:	22ff      	movs	r2, #255	; 0xff
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80052d6:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052da:	2300      	movs	r3, #0
 80052dc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80052e0:	4618      	mov	r0, r3
}
 80052e2:	bc10      	pop	{r4}
 80052e4:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80052e6:	2002      	movs	r0, #2
}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40002800 	.word	0x40002800
 80052f0:	58000800 	.word	0x58000800

080052f4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80052f4:	b510      	push	{r4, lr}
 80052f6:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80052f8:	4b07      	ldr	r3, [pc, #28]	; (8005318 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005300:	d103      	bne.n	800530a <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005302:	2301      	movs	r3, #1
 8005304:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005308:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800530a:	4b03      	ldr	r3, [pc, #12]	; (8005318 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800530c:	2240      	movs	r2, #64	; 0x40
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005310:	f7fc fc6e 	bl	8001bf0 <HAL_RTCEx_SSRUEventCallback>
 8005314:	e7f5      	b.n	8005302 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8005316:	bf00      	nop
 8005318:	40002800 	.word	0x40002800

0800531c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800531c:	4770      	bx	lr

0800531e <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800531e:	0089      	lsls	r1, r1, #2
 8005320:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005324:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005328:	600a      	str	r2, [r1, #0]
}
 800532a:	4770      	bx	lr

0800532c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800532c:	0089      	lsls	r1, r1, #2
 800532e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005332:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005336:	6808      	ldr	r0, [r1, #0]
}
 8005338:	4770      	bx	lr
	...

0800533c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <SUBGHZSPI_Init+0x20>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005344:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005346:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800534a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800534c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005350:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005358:	601a      	str	r2, [r3, #0]
}
 800535a:	4770      	bx	lr
 800535c:	58010000 	.word	0x58010000

08005360 <HAL_SUBGHZ_Init>:
{
 8005360:	b530      	push	{r4, r5, lr}
 8005362:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005364:	2800      	cmp	r0, #0
 8005366:	d04e      	beq.n	8005406 <HAL_SUBGHZ_Init+0xa6>
 8005368:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800536a:	7983      	ldrb	r3, [r0, #6]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d03b      	beq.n	80053e8 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005370:	2302      	movs	r3, #2
 8005372:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005378:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800537c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005380:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005384:	4b21      	ldr	r3, [pc, #132]	; (800540c <HAL_SUBGHZ_Init+0xac>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800538c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005390:	2264      	movs	r2, #100	; 0x64
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8005398:	9b01      	ldr	r3, [sp, #4]
 800539a:	b34b      	cbz	r3, 80053f0 <HAL_SUBGHZ_Init+0x90>
    count--;
 800539c:	9b01      	ldr	r3, [sp, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80053a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053aa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80053ae:	d1f3      	bne.n	8005398 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80053b0:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80053b2:	4b17      	ldr	r3, [pc, #92]	; (8005410 <HAL_SUBGHZ_Init+0xb0>)
 80053b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80053b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80053c0:	4914      	ldr	r1, [pc, #80]	; (8005414 <HAL_SUBGHZ_Init+0xb4>)
 80053c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80053c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d4:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80053d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053da:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80053dc:	b15d      	cbz	r5, 80053f6 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80053de:	2301      	movs	r3, #1
 80053e0:	71a3      	strb	r3, [r4, #6]
}
 80053e2:	4628      	mov	r0, r5
 80053e4:	b003      	add	sp, #12
 80053e6:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80053e8:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80053ea:	f7fc f967 	bl	80016bc <HAL_SUBGHZ_MspInit>
 80053ee:	e7bf      	b.n	8005370 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80053f0:	2501      	movs	r5, #1
 80053f2:	60a5      	str	r5, [r4, #8]
      break;
 80053f4:	e7dd      	b.n	80053b2 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80053f6:	6820      	ldr	r0, [r4, #0]
 80053f8:	f7ff ffa0 	bl	800533c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80053fc:	2301      	movs	r3, #1
 80053fe:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005400:	2300      	movs	r3, #0
 8005402:	60a3      	str	r3, [r4, #8]
 8005404:	e7eb      	b.n	80053de <HAL_SUBGHZ_Init+0x7e>
    return status;
 8005406:	2501      	movs	r5, #1
 8005408:	e7eb      	b.n	80053e2 <HAL_SUBGHZ_Init+0x82>
 800540a:	bf00      	nop
 800540c:	20000070 	.word	0x20000070
 8005410:	58000400 	.word	0x58000400
 8005414:	58000800 	.word	0x58000800

08005418 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005418:	b082      	sub	sp, #8
 800541a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <SUBGHZSPI_Transmit+0x70>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005424:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005428:	2064      	movs	r0, #100	; 0x64
 800542a:	fb00 f303 	mul.w	r3, r0, r3
 800542e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005430:	9b01      	ldr	r3, [sp, #4]
 8005432:	b14b      	cbz	r3, 8005448 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005434:	9b01      	ldr	r3, [sp, #4]
 8005436:	3b01      	subs	r3, #1
 8005438:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800543a:	4b14      	ldr	r3, [pc, #80]	; (800548c <SUBGHZSPI_Transmit+0x74>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f013 0f02 	tst.w	r3, #2
 8005442:	d0f5      	beq.n	8005430 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005444:	2000      	movs	r0, #0
 8005446:	e001      	b.n	800544c <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005448:	2001      	movs	r0, #1
 800544a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <SUBGHZSPI_Transmit+0x74>)
 800544e:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <SUBGHZSPI_Transmit+0x70>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005458:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800545c:	2164      	movs	r1, #100	; 0x64
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005464:	9b01      	ldr	r3, [sp, #4]
 8005466:	b143      	cbz	r3, 800547a <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005468:	9b01      	ldr	r3, [sp, #4]
 800546a:	3b01      	subs	r3, #1
 800546c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <SUBGHZSPI_Transmit+0x74>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f013 0f01 	tst.w	r3, #1
 8005476:	d0f5      	beq.n	8005464 <SUBGHZSPI_Transmit+0x4c>
 8005478:	e001      	b.n	800547e <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800547a:	2001      	movs	r0, #1
 800547c:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800547e:	4b03      	ldr	r3, [pc, #12]	; (800548c <SUBGHZSPI_Transmit+0x74>)
 8005480:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8005482:	b002      	add	sp, #8
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000070 	.word	0x20000070
 800548c:	58010000 	.word	0x58010000

08005490 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005490:	b082      	sub	sp, #8
 8005492:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005494:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <SUBGHZSPI_Receive+0x78>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800549c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054a0:	2064      	movs	r0, #100	; 0x64
 80054a2:	fb00 f303 	mul.w	r3, r0, r3
 80054a6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80054a8:	9b01      	ldr	r3, [sp, #4]
 80054aa:	b14b      	cbz	r3, 80054c0 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80054ac:	9b01      	ldr	r3, [sp, #4]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <SUBGHZSPI_Receive+0x7c>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f013 0f02 	tst.w	r3, #2
 80054ba:	d0f5      	beq.n	80054a8 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80054bc:	2000      	movs	r0, #0
 80054be:	e001      	b.n	80054c4 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054c0:	2001      	movs	r0, #1
 80054c2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80054c4:	4b11      	ldr	r3, [pc, #68]	; (800550c <SUBGHZSPI_Receive+0x7c>)
 80054c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80054ca:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80054ce:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <SUBGHZSPI_Receive+0x78>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80054d6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054da:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80054de:	fb0c f303 	mul.w	r3, ip, r3
 80054e2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80054e4:	9b01      	ldr	r3, [sp, #4]
 80054e6:	b143      	cbz	r3, 80054fa <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80054e8:	9b01      	ldr	r3, [sp, #4]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80054ee:	4b07      	ldr	r3, [pc, #28]	; (800550c <SUBGHZSPI_Receive+0x7c>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f013 0f01 	tst.w	r3, #1
 80054f6:	d0f5      	beq.n	80054e4 <SUBGHZSPI_Receive+0x54>
 80054f8:	e001      	b.n	80054fe <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054fa:	2001      	movs	r0, #1
 80054fc:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80054fe:	4b03      	ldr	r3, [pc, #12]	; (800550c <SUBGHZSPI_Receive+0x7c>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005504:	b002      	add	sp, #8
 8005506:	4770      	bx	lr
 8005508:	20000070 	.word	0x20000070
 800550c:	58010000 	.word	0x58010000

08005510 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005510:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005512:	4b13      	ldr	r3, [pc, #76]	; (8005560 <SUBGHZ_WaitOnBusy+0x50>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800551a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800551e:	2264      	movs	r2, #100	; 0x64
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	e006      	b.n	8005536 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005528:	2302      	movs	r3, #2
 800552a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 800552c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800552e:	b002      	add	sp, #8
 8005530:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005532:	4213      	tst	r3, r2
 8005534:	d012      	beq.n	800555c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005536:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <SUBGHZ_WaitOnBusy+0x54>)
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f013 0304 	ands.w	r3, r3, #4
 800553e:	d000      	beq.n	8005542 <SUBGHZ_WaitOnBusy+0x32>
 8005540:	2301      	movs	r3, #1
    if (count == 0U)
 8005542:	9a01      	ldr	r2, [sp, #4]
 8005544:	2a00      	cmp	r2, #0
 8005546:	d0ef      	beq.n	8005528 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005548:	9a01      	ldr	r2, [sp, #4]
 800554a:	3a01      	subs	r2, #1
 800554c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800554e:	4a05      	ldr	r2, [pc, #20]	; (8005564 <SUBGHZ_WaitOnBusy+0x54>)
 8005550:	6952      	ldr	r2, [r2, #20]
 8005552:	f012 0202 	ands.w	r2, r2, #2
 8005556:	d0ec      	beq.n	8005532 <SUBGHZ_WaitOnBusy+0x22>
 8005558:	2201      	movs	r2, #1
 800555a:	e7ea      	b.n	8005532 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 800555c:	2000      	movs	r0, #0
 800555e:	e7e6      	b.n	800552e <SUBGHZ_WaitOnBusy+0x1e>
 8005560:	20000070 	.word	0x20000070
 8005564:	58000400 	.word	0x58000400

08005568 <SUBGHZ_CheckDeviceReady>:
{
 8005568:	b500      	push	{lr}
 800556a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800556c:	7903      	ldrb	r3, [r0, #4]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d004      	beq.n	800557c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005572:	f7ff ffcd 	bl	8005510 <SUBGHZ_WaitOnBusy>
}
 8005576:	b003      	add	sp, #12
 8005578:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <SUBGHZ_CheckDeviceReady+0x4c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005584:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8005588:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800558a:	4a0b      	ldr	r2, [pc, #44]	; (80055b8 <SUBGHZ_CheckDeviceReady+0x50>)
 800558c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8005598:	9b01      	ldr	r3, [sp, #4]
 800559a:	3b01      	subs	r3, #1
 800559c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 800559e:	9b01      	ldr	r3, [sp, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f9      	bne.n	8005598 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055a4:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <SUBGHZ_CheckDeviceReady+0x50>)
 80055a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80055b2:	e7de      	b.n	8005572 <SUBGHZ_CheckDeviceReady+0xa>
 80055b4:	20000070 	.word	0x20000070
 80055b8:	58000400 	.word	0x58000400

080055bc <HAL_SUBGHZ_WriteRegisters>:
{
 80055bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80055c2:	7980      	ldrb	r0, [r0, #6]
 80055c4:	fa5f f880 	uxtb.w	r8, r0
 80055c8:	f1b8 0f01 	cmp.w	r8, #1
 80055cc:	d13e      	bne.n	800564c <HAL_SUBGHZ_WriteRegisters+0x90>
 80055ce:	460c      	mov	r4, r1
 80055d0:	4617      	mov	r7, r2
 80055d2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80055d4:	796b      	ldrb	r3, [r5, #5]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d03b      	beq.n	8005652 <HAL_SUBGHZ_WriteRegisters+0x96>
 80055da:	2301      	movs	r3, #1
 80055dc:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80055de:	2302      	movs	r3, #2
 80055e0:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80055e2:	4628      	mov	r0, r5
 80055e4:	f7ff ffc0 	bl	8005568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055e8:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80055ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80055ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80055f6:	210d      	movs	r1, #13
 80055f8:	4628      	mov	r0, r5
 80055fa:	f7ff ff0d 	bl	8005418 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80055fe:	0a21      	lsrs	r1, r4, #8
 8005600:	4628      	mov	r0, r5
 8005602:	f7ff ff09 	bl	8005418 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005606:	b2e1      	uxtb	r1, r4
 8005608:	4628      	mov	r0, r5
 800560a:	f7ff ff05 	bl	8005418 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800560e:	2400      	movs	r4, #0
 8005610:	e005      	b.n	800561e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005612:	5d39      	ldrb	r1, [r7, r4]
 8005614:	4628      	mov	r0, r5
 8005616:	f7ff feff 	bl	8005418 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800561a:	3401      	adds	r4, #1
 800561c:	b2a4      	uxth	r4, r4
 800561e:	42b4      	cmp	r4, r6
 8005620:	d3f7      	bcc.n	8005612 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005622:	4a0d      	ldr	r2, [pc, #52]	; (8005658 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005624:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005630:	4628      	mov	r0, r5
 8005632:	f7ff ff6d 	bl	8005510 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005636:	68ab      	ldr	r3, [r5, #8]
 8005638:	b90b      	cbnz	r3, 800563e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800563a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800563e:	2301      	movs	r3, #1
 8005640:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005642:	2300      	movs	r3, #0
 8005644:	716b      	strb	r3, [r5, #5]
}
 8005646:	4640      	mov	r0, r8
 8005648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800564c:	f04f 0802 	mov.w	r8, #2
 8005650:	e7f9      	b.n	8005646 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005652:	f04f 0802 	mov.w	r8, #2
 8005656:	e7f6      	b.n	8005646 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005658:	58000400 	.word	0x58000400

0800565c <HAL_SUBGHZ_ReadRegisters>:
{
 800565c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005660:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005662:	7980      	ldrb	r0, [r0, #6]
 8005664:	fa5f f880 	uxtb.w	r8, r0
 8005668:	f1b8 0f01 	cmp.w	r8, #1
 800566c:	d141      	bne.n	80056f2 <HAL_SUBGHZ_ReadRegisters+0x96>
 800566e:	460c      	mov	r4, r1
 8005670:	4615      	mov	r5, r2
 8005672:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005674:	7973      	ldrb	r3, [r6, #5]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d03e      	beq.n	80056f8 <HAL_SUBGHZ_ReadRegisters+0x9c>
 800567a:	2301      	movs	r3, #1
 800567c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff ff72 	bl	8005568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005684:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005686:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800568a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800568e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005692:	211d      	movs	r1, #29
 8005694:	4630      	mov	r0, r6
 8005696:	f7ff febf 	bl	8005418 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800569a:	0a21      	lsrs	r1, r4, #8
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff febb 	bl	8005418 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80056a2:	b2e1      	uxtb	r1, r4
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7ff feb7 	bl	8005418 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80056aa:	2100      	movs	r1, #0
 80056ac:	4630      	mov	r0, r6
 80056ae:	f7ff feb3 	bl	8005418 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80056b2:	2400      	movs	r4, #0
 80056b4:	e006      	b.n	80056c4 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80056b6:	4629      	mov	r1, r5
 80056b8:	4630      	mov	r0, r6
 80056ba:	f7ff fee9 	bl	8005490 <SUBGHZSPI_Receive>
      pData++;
 80056be:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80056c0:	3401      	adds	r4, #1
 80056c2:	b2a4      	uxth	r4, r4
 80056c4:	42bc      	cmp	r4, r7
 80056c6:	d3f6      	bcc.n	80056b6 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056c8:	4a0d      	ldr	r2, [pc, #52]	; (8005700 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80056ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80056d6:	4630      	mov	r0, r6
 80056d8:	f7ff ff1a 	bl	8005510 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80056dc:	68b3      	ldr	r3, [r6, #8]
 80056de:	b90b      	cbnz	r3, 80056e4 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80056e0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80056e4:	2301      	movs	r3, #1
 80056e6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80056e8:	2300      	movs	r3, #0
 80056ea:	7173      	strb	r3, [r6, #5]
}
 80056ec:	4640      	mov	r0, r8
 80056ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80056f2:	f04f 0802 	mov.w	r8, #2
 80056f6:	e7f9      	b.n	80056ec <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80056f8:	f04f 0802 	mov.w	r8, #2
 80056fc:	e7f6      	b.n	80056ec <HAL_SUBGHZ_ReadRegisters+0x90>
 80056fe:	bf00      	nop
 8005700:	58000400 	.word	0x58000400

08005704 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005708:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800570a:	7980      	ldrb	r0, [r0, #6]
 800570c:	fa5f f980 	uxtb.w	r9, r0
 8005710:	f1b9 0f01 	cmp.w	r9, #1
 8005714:	d143      	bne.n	800579e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8005716:	4688      	mov	r8, r1
 8005718:	4617      	mov	r7, r2
 800571a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800571c:	796b      	ldrb	r3, [r5, #5]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d040      	beq.n	80057a4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005722:	2301      	movs	r3, #1
 8005724:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005726:	4628      	mov	r0, r5
 8005728:	f7ff ff1e 	bl	8005568 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800572c:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005730:	d005      	beq.n	800573e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005732:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8005736:	d002      	beq.n	800573e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	712b      	strb	r3, [r5, #4]
 800573c:	e001      	b.n	8005742 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800573e:	2301      	movs	r3, #1
 8005740:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005744:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005748:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800574c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005750:	4641      	mov	r1, r8
 8005752:	4628      	mov	r0, r5
 8005754:	f7ff fe60 	bl	8005418 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005758:	2400      	movs	r4, #0
 800575a:	e005      	b.n	8005768 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800575c:	5d39      	ldrb	r1, [r7, r4]
 800575e:	4628      	mov	r0, r5
 8005760:	f7ff fe5a 	bl	8005418 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005764:	3401      	adds	r4, #1
 8005766:	b2a4      	uxth	r4, r4
 8005768:	42b4      	cmp	r4, r6
 800576a:	d3f7      	bcc.n	800575c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800576c:	4a0f      	ldr	r2, [pc, #60]	; (80057ac <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800576e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800577a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800577e:	d10a      	bne.n	8005796 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005780:	68ab      	ldr	r3, [r5, #8]
 8005782:	b90b      	cbnz	r3, 8005788 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8005784:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005788:	2301      	movs	r3, #1
 800578a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800578c:	2300      	movs	r3, #0
 800578e:	716b      	strb	r3, [r5, #5]
}
 8005790:	4648      	mov	r0, r9
 8005792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005796:	4628      	mov	r0, r5
 8005798:	f7ff feba 	bl	8005510 <SUBGHZ_WaitOnBusy>
 800579c:	e7f0      	b.n	8005780 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800579e:	f04f 0902 	mov.w	r9, #2
 80057a2:	e7f5      	b.n	8005790 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80057a4:	f04f 0902 	mov.w	r9, #2
 80057a8:	e7f2      	b.n	8005790 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80057aa:	bf00      	nop
 80057ac:	58000400 	.word	0x58000400

080057b0 <HAL_SUBGHZ_ExecGetCmd>:
{
 80057b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80057b6:	7980      	ldrb	r0, [r0, #6]
 80057b8:	fa5f f880 	uxtb.w	r8, r0
 80057bc:	f1b8 0f01 	cmp.w	r8, #1
 80057c0:	d139      	bne.n	8005836 <HAL_SUBGHZ_ExecGetCmd+0x86>
 80057c2:	460c      	mov	r4, r1
 80057c4:	4615      	mov	r5, r2
 80057c6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80057c8:	7973      	ldrb	r3, [r6, #5]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d036      	beq.n	800583c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80057ce:	2301      	movs	r3, #1
 80057d0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80057d2:	4630      	mov	r0, r6
 80057d4:	f7ff fec8 	bl	8005568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057d8:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80057da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80057e6:	4621      	mov	r1, r4
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7ff fe15 	bl	8005418 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80057ee:	2100      	movs	r1, #0
 80057f0:	4630      	mov	r0, r6
 80057f2:	f7ff fe11 	bl	8005418 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80057f6:	2400      	movs	r4, #0
 80057f8:	e006      	b.n	8005808 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80057fa:	4629      	mov	r1, r5
 80057fc:	4630      	mov	r0, r6
 80057fe:	f7ff fe47 	bl	8005490 <SUBGHZSPI_Receive>
      pData++;
 8005802:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005804:	3401      	adds	r4, #1
 8005806:	b2a4      	uxth	r4, r4
 8005808:	42bc      	cmp	r4, r7
 800580a:	d3f6      	bcc.n	80057fa <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800580c:	4a0d      	ldr	r2, [pc, #52]	; (8005844 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800580e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff fe78 	bl	8005510 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005820:	68b3      	ldr	r3, [r6, #8]
 8005822:	b90b      	cbnz	r3, 8005828 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005824:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005828:	2301      	movs	r3, #1
 800582a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800582c:	2300      	movs	r3, #0
 800582e:	7173      	strb	r3, [r6, #5]
}
 8005830:	4640      	mov	r0, r8
 8005832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005836:	f04f 0802 	mov.w	r8, #2
 800583a:	e7f9      	b.n	8005830 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 800583c:	f04f 0802 	mov.w	r8, #2
 8005840:	e7f6      	b.n	8005830 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005842:	bf00      	nop
 8005844:	58000400 	.word	0x58000400

08005848 <HAL_SUBGHZ_IRQHandler>:
{
 8005848:	b530      	push	{r4, r5, lr}
 800584a:	b083      	sub	sp, #12
 800584c:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800584e:	2300      	movs	r3, #0
 8005850:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005854:	2302      	movs	r3, #2
 8005856:	aa01      	add	r2, sp, #4
 8005858:	2112      	movs	r1, #18
 800585a:	f7ff ffa9 	bl	80057b0 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800585e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005862:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005866:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800586a:	f013 0f01 	tst.w	r3, #1
 800586e:	d126      	bne.n	80058be <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005870:	f014 0f02 	tst.w	r4, #2
 8005874:	d127      	bne.n	80058c6 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005876:	f014 0f04 	tst.w	r4, #4
 800587a:	d128      	bne.n	80058ce <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800587c:	f014 0f08 	tst.w	r4, #8
 8005880:	d129      	bne.n	80058d6 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005882:	f014 0f10 	tst.w	r4, #16
 8005886:	d12a      	bne.n	80058de <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005888:	f014 0f20 	tst.w	r4, #32
 800588c:	d12b      	bne.n	80058e6 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800588e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8005892:	d12c      	bne.n	80058ee <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005894:	f014 0f80 	tst.w	r4, #128	; 0x80
 8005898:	d006      	beq.n	80058a8 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800589a:	f414 7f80 	tst.w	r4, #256	; 0x100
 800589e:	d02a      	beq.n	80058f6 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80058a0:	2101      	movs	r1, #1
 80058a2:	4628      	mov	r0, r5
 80058a4:	f00a fbc6 	bl	8010034 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80058a8:	f414 7f00 	tst.w	r4, #512	; 0x200
 80058ac:	d128      	bne.n	8005900 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80058ae:	2302      	movs	r3, #2
 80058b0:	aa01      	add	r2, sp, #4
 80058b2:	4619      	mov	r1, r3
 80058b4:	4628      	mov	r0, r5
 80058b6:	f7ff ff25 	bl	8005704 <HAL_SUBGHZ_ExecSetCmd>
}
 80058ba:	b003      	add	sp, #12
 80058bc:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80058be:	4628      	mov	r0, r5
 80058c0:	f00a fba0 	bl	8010004 <HAL_SUBGHZ_TxCpltCallback>
 80058c4:	e7d4      	b.n	8005870 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80058c6:	4628      	mov	r0, r5
 80058c8:	f00a fba4 	bl	8010014 <HAL_SUBGHZ_RxCpltCallback>
 80058cc:	e7d3      	b.n	8005876 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80058ce:	4628      	mov	r0, r5
 80058d0:	f00a fbd4 	bl	801007c <HAL_SUBGHZ_PreambleDetectedCallback>
 80058d4:	e7d2      	b.n	800587c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80058d6:	4628      	mov	r0, r5
 80058d8:	f00a fbd8 	bl	801008c <HAL_SUBGHZ_SyncWordValidCallback>
 80058dc:	e7d1      	b.n	8005882 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80058de:	4628      	mov	r0, r5
 80058e0:	f00a fbdc 	bl	801009c <HAL_SUBGHZ_HeaderValidCallback>
 80058e4:	e7d0      	b.n	8005888 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80058e6:	4628      	mov	r0, r5
 80058e8:	f00a fbc0 	bl	801006c <HAL_SUBGHZ_HeaderErrorCallback>
 80058ec:	e7cf      	b.n	800588e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80058ee:	4628      	mov	r0, r5
 80058f0:	f00a fb98 	bl	8010024 <HAL_SUBGHZ_CRCErrorCallback>
 80058f4:	e7ce      	b.n	8005894 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80058f6:	2100      	movs	r1, #0
 80058f8:	4628      	mov	r0, r5
 80058fa:	f00a fb9b 	bl	8010034 <HAL_SUBGHZ_CADStatusCallback>
 80058fe:	e7d3      	b.n	80058a8 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005900:	4628      	mov	r0, r5
 8005902:	f00a fba9 	bl	8010058 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005906:	e7d2      	b.n	80058ae <HAL_SUBGHZ_IRQHandler+0x66>

08005908 <HAL_SUBGHZ_WriteBuffer>:
{
 8005908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800590e:	7980      	ldrb	r0, [r0, #6]
 8005910:	fa5f f880 	uxtb.w	r8, r0
 8005914:	f1b8 0f01 	cmp.w	r8, #1
 8005918:	d138      	bne.n	800598c <HAL_SUBGHZ_WriteBuffer+0x84>
 800591a:	460c      	mov	r4, r1
 800591c:	4617      	mov	r7, r2
 800591e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005920:	796b      	ldrb	r3, [r5, #5]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d035      	beq.n	8005992 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8005926:	2301      	movs	r3, #1
 8005928:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800592a:	4628      	mov	r0, r5
 800592c:	f7ff fe1c 	bl	8005568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005930:	4a19      	ldr	r2, [pc, #100]	; (8005998 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005932:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800593a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800593e:	210e      	movs	r1, #14
 8005940:	4628      	mov	r0, r5
 8005942:	f7ff fd69 	bl	8005418 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005946:	4621      	mov	r1, r4
 8005948:	4628      	mov	r0, r5
 800594a:	f7ff fd65 	bl	8005418 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800594e:	2400      	movs	r4, #0
 8005950:	e005      	b.n	800595e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005952:	5d39      	ldrb	r1, [r7, r4]
 8005954:	4628      	mov	r0, r5
 8005956:	f7ff fd5f 	bl	8005418 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800595a:	3401      	adds	r4, #1
 800595c:	b2a4      	uxth	r4, r4
 800595e:	42b4      	cmp	r4, r6
 8005960:	d3f7      	bcc.n	8005952 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005962:	4a0d      	ldr	r2, [pc, #52]	; (8005998 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005964:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005970:	4628      	mov	r0, r5
 8005972:	f7ff fdcd 	bl	8005510 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005976:	68ab      	ldr	r3, [r5, #8]
 8005978:	b90b      	cbnz	r3, 800597e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800597a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800597e:	2301      	movs	r3, #1
 8005980:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005982:	2300      	movs	r3, #0
 8005984:	716b      	strb	r3, [r5, #5]
}
 8005986:	4640      	mov	r0, r8
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800598c:	f04f 0802 	mov.w	r8, #2
 8005990:	e7f9      	b.n	8005986 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8005992:	f04f 0802 	mov.w	r8, #2
 8005996:	e7f6      	b.n	8005986 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8005998:	58000400 	.word	0x58000400

0800599c <HAL_SUBGHZ_ReadBuffer>:
{
 800599c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80059a2:	7980      	ldrb	r0, [r0, #6]
 80059a4:	fa5f f880 	uxtb.w	r8, r0
 80059a8:	f1b8 0f01 	cmp.w	r8, #1
 80059ac:	d13d      	bne.n	8005a2a <HAL_SUBGHZ_ReadBuffer+0x8e>
 80059ae:	460c      	mov	r4, r1
 80059b0:	4615      	mov	r5, r2
 80059b2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80059b4:	7973      	ldrb	r3, [r6, #5]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d03a      	beq.n	8005a30 <HAL_SUBGHZ_ReadBuffer+0x94>
 80059ba:	2301      	movs	r3, #1
 80059bc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80059be:	4630      	mov	r0, r6
 80059c0:	f7ff fdd2 	bl	8005568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059c4:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80059c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80059d2:	211e      	movs	r1, #30
 80059d4:	4630      	mov	r0, r6
 80059d6:	f7ff fd1f 	bl	8005418 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80059da:	4621      	mov	r1, r4
 80059dc:	4630      	mov	r0, r6
 80059de:	f7ff fd1b 	bl	8005418 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80059e2:	2100      	movs	r1, #0
 80059e4:	4630      	mov	r0, r6
 80059e6:	f7ff fd17 	bl	8005418 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059ea:	2400      	movs	r4, #0
 80059ec:	e006      	b.n	80059fc <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80059ee:	4629      	mov	r1, r5
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7ff fd4d 	bl	8005490 <SUBGHZSPI_Receive>
      pData++;
 80059f6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80059f8:	3401      	adds	r4, #1
 80059fa:	b2a4      	uxth	r4, r4
 80059fc:	42bc      	cmp	r4, r7
 80059fe:	d3f6      	bcc.n	80059ee <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a00:	4a0d      	ldr	r2, [pc, #52]	; (8005a38 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005a02:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7ff fd7e 	bl	8005510 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a14:	68b3      	ldr	r3, [r6, #8]
 8005a16:	b90b      	cbnz	r3, 8005a1c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005a18:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005a20:	2300      	movs	r3, #0
 8005a22:	7173      	strb	r3, [r6, #5]
}
 8005a24:	4640      	mov	r0, r8
 8005a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005a2a:	f04f 0802 	mov.w	r8, #2
 8005a2e:	e7f9      	b.n	8005a24 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005a30:	f04f 0802 	mov.w	r8, #2
 8005a34:	e7f6      	b.n	8005a24 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005a36:	bf00      	nop
 8005a38:	58000400 	.word	0x58000400

08005a3c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005a3c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	e852 3f00 	ldrex	r3, [r2]
 8005a42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	e842 3100 	strex	r1, r3, [r2]
 8005a4a:	2900      	cmp	r1, #0
 8005a4c:	d1f6      	bne.n	8005a3c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005a4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	f102 0308 	add.w	r3, r2, #8
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	3208      	adds	r2, #8
 8005a5e:	e842 3100 	strex	r1, r3, [r2]
 8005a62:	2900      	cmp	r1, #0
 8005a64:	d1f3      	bne.n	8005a4e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a66:	2320      	movs	r3, #32
 8005a68:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8005a6c:	4770      	bx	lr

08005a6e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	e852 3f00 	ldrex	r3, [r2]
 8005a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	e842 3100 	strex	r1, r3, [r2]
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	d1f6      	bne.n	8005a6e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a80:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	f102 0308 	add.w	r3, r2, #8
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	3208      	adds	r2, #8
 8005a94:	e842 3100 	strex	r1, r3, [r2]
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	d1f1      	bne.n	8005a80 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a9c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d006      	beq.n	8005ab0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	2320      	movs	r3, #32
 8005aa4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aac:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005aae:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	e852 3f00 	ldrex	r3, [r2]
 8005ab6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	e842 3100 	strex	r1, r3, [r2]
 8005abe:	2900      	cmp	r1, #0
 8005ac0:	d1f6      	bne.n	8005ab0 <UART_EndRxTransfer+0x42>
 8005ac2:	e7ee      	b.n	8005aa2 <UART_EndRxTransfer+0x34>

08005ac4 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d14c      	bne.n	8005b66 <HAL_UART_Transmit_DMA+0xa2>
{
 8005acc:	b510      	push	{r4, lr}
 8005ace:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	d04a      	beq.n	8005b6a <HAL_UART_Transmit_DMA+0xa6>
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	d04a      	beq.n	8005b6e <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8005ad8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d048      	beq.n	8005b72 <HAL_UART_Transmit_DMA+0xae>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005ae6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005ae8:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005aec:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af6:	2321      	movs	r3, #33	; 0x21
 8005af8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8005afc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005afe:	b1f3      	cbz	r3, 8005b3e <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b00:	491d      	ldr	r1, [pc, #116]	; (8005b78 <HAL_UART_Transmit_DMA+0xb4>)
 8005b02:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b04:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005b06:	491d      	ldr	r1, [pc, #116]	; (8005b7c <HAL_UART_Transmit_DMA+0xb8>)
 8005b08:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b0a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005b0c:	491c      	ldr	r1, [pc, #112]	; (8005b80 <HAL_UART_Transmit_DMA+0xbc>)
 8005b0e:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005b10:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005b12:	2100      	movs	r1, #0
 8005b14:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b16:	6801      	ldr	r1, [r0, #0]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8005b1e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005b20:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005b22:	f7fd fe0f 	bl	8003744 <HAL_DMA_Start_IT>
 8005b26:	b150      	cbz	r0, 8005b3e <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b28:	2310      	movs	r3, #16
 8005b2a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005b34:	2320      	movs	r3, #32
 8005b36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	e012      	b.n	8005b64 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	2240      	movs	r2, #64	; 0x40
 8005b42:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005b44:	2300      	movs	r3, #0
 8005b46:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b4a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	f102 0308 	add.w	r3, r2, #8
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	3208      	adds	r2, #8
 8005b5a:	e842 3100 	strex	r1, r3, [r2]
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d1f3      	bne.n	8005b4a <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8005b62:	2000      	movs	r0, #0
}
 8005b64:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005b66:	2002      	movs	r0, #2
}
 8005b68:	4770      	bx	lr
      return HAL_ERROR;
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	e7fa      	b.n	8005b64 <HAL_UART_Transmit_DMA+0xa0>
 8005b6e:	2001      	movs	r0, #1
 8005b70:	e7f8      	b.n	8005b64 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8005b72:	2002      	movs	r0, #2
 8005b74:	e7f6      	b.n	8005b64 <HAL_UART_Transmit_DMA+0xa0>
 8005b76:	bf00      	nop
 8005b78:	08005b85 	.word	0x08005b85
 8005b7c:	08005bf3 	.word	0x08005bf3
 8005b80:	08005bff 	.word	0x08005bff

08005b84 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b84:	b508      	push	{r3, lr}
 8005b86:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b88:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f013 0f20 	tst.w	r3, #32
 8005b92:	d118      	bne.n	8005bc6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	f102 0308 	add.w	r3, r2, #8
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	3208      	adds	r2, #8
 8005baa:	e842 3100 	strex	r1, r3, [r2]
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	d1f3      	bne.n	8005b9a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bb2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	e852 3f00 	ldrex	r3, [r2]
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	e842 3100 	strex	r1, r3, [r2]
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	d1f6      	bne.n	8005bb2 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bc4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005bc6:	f7fc f953 	bl	8001e70 <HAL_UART_TxCpltCallback>
}
 8005bca:	e7fb      	b.n	8005bc4 <UART_DMATransmitCplt+0x40>

08005bcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bcc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	e852 3f00 	ldrex	r3, [r2]
 8005bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	e842 3100 	strex	r1, r3, [r2]
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d1f6      	bne.n	8005bce <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005be0:	2320      	movs	r3, #32
 8005be2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bea:	f7fc f941 	bl	8001e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bee:	bd08      	pop	{r3, pc}

08005bf0 <HAL_UART_TxHalfCpltCallback>:
}
 8005bf0:	4770      	bx	lr

08005bf2 <UART_DMATxHalfCplt>:
{
 8005bf2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005bf4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005bf6:	f7ff fffb 	bl	8005bf0 <HAL_UART_TxHalfCpltCallback>
}
 8005bfa:	bd08      	pop	{r3, pc}

08005bfc <HAL_UART_ErrorCallback>:
}
 8005bfc:	4770      	bx	lr

08005bfe <UART_DMAError>:
{
 8005bfe:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c00:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c02:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c06:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c12:	d001      	beq.n	8005c18 <UART_DMAError+0x1a>
 8005c14:	2a21      	cmp	r2, #33	; 0x21
 8005c16:	d010      	beq.n	8005c3a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c20:	d001      	beq.n	8005c26 <UART_DMAError+0x28>
 8005c22:	2d22      	cmp	r5, #34	; 0x22
 8005c24:	d010      	beq.n	8005c48 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c26:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005c2a:	f043 0310 	orr.w	r3, r3, #16
 8005c2e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8005c32:	4620      	mov	r0, r4
 8005c34:	f7ff ffe2 	bl	8005bfc <HAL_UART_ErrorCallback>
}
 8005c38:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005c40:	4620      	mov	r0, r4
 8005c42:	f7ff fefb 	bl	8005a3c <UART_EndTxTransfer>
 8005c46:	e7e7      	b.n	8005c18 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f7ff ff0d 	bl	8005a6e <UART_EndRxTransfer>
 8005c54:	e7e7      	b.n	8005c26 <UART_DMAError+0x28>

08005c56 <UART_DMAAbortOnError>:
{
 8005c56:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c58:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005c60:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005c64:	f7ff ffca 	bl	8005bfc <HAL_UART_ErrorCallback>
}
 8005c68:	bd08      	pop	{r3, pc}

08005c6a <HAL_UARTEx_RxEventCallback>:
}
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UART_IRQHandler>:
{
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c70:	6801      	ldr	r1, [r0, #0]
 8005c72:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c74:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c76:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c78:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005c7c:	401a      	ands	r2, r3
 8005c7e:	d108      	bne.n	8005c92 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c80:	f013 0f20 	tst.w	r3, #32
 8005c84:	d005      	beq.n	8005c92 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c86:	f010 0f20 	tst.w	r0, #32
 8005c8a:	d134      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c8c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005c90:	d131      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005c92:	b12a      	cbz	r2, 8005ca0 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005c94:	4a95      	ldr	r2, [pc, #596]	; (8005eec <HAL_UART_IRQHandler+0x280>)
 8005c96:	402a      	ands	r2, r5
 8005c98:	d133      	bne.n	8005d02 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005c9a:	4e95      	ldr	r6, [pc, #596]	; (8005ef0 <HAL_UART_IRQHandler+0x284>)
 8005c9c:	4230      	tst	r0, r6
 8005c9e:	d130      	bne.n	8005d02 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005ca2:	2a01      	cmp	r2, #1
 8005ca4:	f000 80c3 	beq.w	8005e2e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ca8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005cac:	d003      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x4a>
 8005cae:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005cb2:	f040 815b 	bne.w	8005f6c <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005cb6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cba:	d007      	beq.n	8005ccc <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005cbc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005cc0:	f040 815b 	bne.w	8005f7a <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005cc4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005cc8:	f040 8157 	bne.w	8005f7a <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ccc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005cd0:	d003      	beq.n	8005cda <HAL_UART_IRQHandler+0x6e>
 8005cd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cd6:	f040 8157 	bne.w	8005f88 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cda:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005cde:	d003      	beq.n	8005ce8 <HAL_UART_IRQHandler+0x7c>
 8005ce0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ce4:	f040 8154 	bne.w	8005f90 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ce8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005cec:	d002      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x88>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f2c0 8152 	blt.w	8005f98 <HAL_UART_IRQHandler+0x32c>
}
 8005cf4:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005cf6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0fb      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	4798      	blx	r3
      return;
 8005d00:	e7f8      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d02:	f013 0f01 	tst.w	r3, #1
 8005d06:	d009      	beq.n	8005d1c <HAL_UART_IRQHandler+0xb0>
 8005d08:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005d0c:	d006      	beq.n	8005d1c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d0e:	2601      	movs	r6, #1
 8005d10:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d12:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005d16:	4331      	orrs	r1, r6
 8005d18:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d1c:	f013 0f02 	tst.w	r3, #2
 8005d20:	d00b      	beq.n	8005d3a <HAL_UART_IRQHandler+0xce>
 8005d22:	f015 0f01 	tst.w	r5, #1
 8005d26:	d008      	beq.n	8005d3a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d28:	6821      	ldr	r1, [r4, #0]
 8005d2a:	2602      	movs	r6, #2
 8005d2c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d2e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005d32:	f041 0104 	orr.w	r1, r1, #4
 8005d36:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d3a:	f013 0f04 	tst.w	r3, #4
 8005d3e:	d00b      	beq.n	8005d58 <HAL_UART_IRQHandler+0xec>
 8005d40:	f015 0f01 	tst.w	r5, #1
 8005d44:	d008      	beq.n	8005d58 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d46:	6821      	ldr	r1, [r4, #0]
 8005d48:	2604      	movs	r6, #4
 8005d4a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d4c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005d50:	f041 0102 	orr.w	r1, r1, #2
 8005d54:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d58:	f013 0f08 	tst.w	r3, #8
 8005d5c:	d00b      	beq.n	8005d76 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d5e:	f010 0f20 	tst.w	r0, #32
 8005d62:	d100      	bne.n	8005d66 <HAL_UART_IRQHandler+0xfa>
 8005d64:	b13a      	cbz	r2, 8005d76 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d66:	6822      	ldr	r2, [r4, #0]
 8005d68:	2108      	movs	r1, #8
 8005d6a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d6c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005d70:	430a      	orrs	r2, r1
 8005d72:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d76:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005d7a:	d00c      	beq.n	8005d96 <HAL_UART_IRQHandler+0x12a>
 8005d7c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005d80:	d009      	beq.n	8005d96 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d88:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d8a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005d8e:	f042 0220 	orr.w	r2, r2, #32
 8005d92:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d96:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d0aa      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d9e:	f013 0f20 	tst.w	r3, #32
 8005da2:	d009      	beq.n	8005db8 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005da4:	f010 0f20 	tst.w	r0, #32
 8005da8:	d102      	bne.n	8005db0 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005daa:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005dae:	d003      	beq.n	8005db8 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005db0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005db2:	b10b      	cbz	r3, 8005db8 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005db4:	4620      	mov	r0, r4
 8005db6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005db8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dc4:	d102      	bne.n	8005dcc <HAL_UART_IRQHandler+0x160>
 8005dc6:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005dca:	d029      	beq.n	8005e20 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f7ff fe4e 	bl	8005a6e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dda:	d01d      	beq.n	8005e18 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ddc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	f102 0308 	add.w	r3, r2, #8
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	3208      	adds	r2, #8
 8005dec:	e842 3100 	strex	r1, r3, [r2]
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d1f3      	bne.n	8005ddc <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005df4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005df6:	b15b      	cbz	r3, 8005e10 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005df8:	4a3e      	ldr	r2, [pc, #248]	; (8005ef4 <HAL_UART_IRQHandler+0x288>)
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dfc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005dfe:	f7fd fd27 	bl	8003850 <HAL_DMA_Abort_IT>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	f43f af76 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e08:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005e0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005e0c:	4798      	blx	r3
 8005e0e:	e771      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff fef3 	bl	8005bfc <HAL_UART_ErrorCallback>
 8005e16:	e76d      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f7ff feef 	bl	8005bfc <HAL_UART_ErrorCallback>
 8005e1e:	e769      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005e20:	4620      	mov	r0, r4
 8005e22:	f7ff feeb 	bl	8005bfc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005e2c:	e762      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005e2e:	f013 0f10 	tst.w	r3, #16
 8005e32:	f43f af39 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005e36:	f010 0f10 	tst.w	r0, #16
 8005e3a:	f43f af35 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e3e:	2310      	movs	r3, #16
 8005e40:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e4a:	d055      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e4c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f43f af4d 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005e5a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005e5e:	4299      	cmp	r1, r3
 8005e60:	f67f af48 	bls.w	8005cf4 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005e64:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e68:	6813      	ldr	r3, [r2, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f013 0f20 	tst.w	r3, #32
 8005e70:	d131      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	e852 3f00 	ldrex	r3, [r2]
 8005e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	e842 3100 	strex	r1, r3, [r2]
 8005e80:	2900      	cmp	r1, #0
 8005e82:	d1f6      	bne.n	8005e72 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e84:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	f102 0308 	add.w	r3, r2, #8
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	3208      	adds	r2, #8
 8005e94:	e842 3100 	strex	r1, r3, [r2]
 8005e98:	2900      	cmp	r1, #0
 8005e9a:	d1f3      	bne.n	8005e84 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	f102 0308 	add.w	r3, r2, #8
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	3208      	adds	r2, #8
 8005eac:	e842 3100 	strex	r1, r3, [r2]
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	d1f3      	bne.n	8005e9c <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ebe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	e852 3f00 	ldrex	r3, [r2]
 8005ec4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	e842 3100 	strex	r1, r3, [r2]
 8005ecc:	2900      	cmp	r1, #0
 8005ece:	d1f6      	bne.n	8005ebe <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ed0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005ed2:	f7fd fc83 	bl	80037dc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ed6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005eda:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	1ac9      	subs	r1, r1, r3
 8005ee2:	b289      	uxth	r1, r1
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f7ff fec0 	bl	8005c6a <HAL_UARTEx_RxEventCallback>
      return;
 8005eea:	e703      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
 8005eec:	10000001 	.word	0x10000001
 8005ef0:	04000120 	.word	0x04000120
 8005ef4:	08005c57 	.word	0x08005c57
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ef8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005efc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	1ac9      	subs	r1, r1, r3
 8005f04:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8005f06:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f43f aef1 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8005f12:	2900      	cmp	r1, #0
 8005f14:	f43f aeee 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f18:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	e852 3f00 	ldrex	r3, [r2]
 8005f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	e842 3000 	strex	r0, r3, [r2]
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d1f6      	bne.n	8005f18 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	f102 0308 	add.w	r3, r2, #8
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f38:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	3208      	adds	r2, #8
 8005f3e:	e842 3000 	strex	r0, r3, [r2]
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d1f1      	bne.n	8005f2a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005f46:	2320      	movs	r3, #32
 8005f48:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005f50:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	e852 3f00 	ldrex	r3, [r2]
 8005f58:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	e842 3000 	strex	r0, r3, [r2]
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d1f6      	bne.n	8005f52 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff fe80 	bl	8005c6a <HAL_UARTEx_RxEventCallback>
      return;
 8005f6a:	e6c3      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f70:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 fe1c 	bl	8006bb0 <HAL_UARTEx_WakeupCallback>
    return;
 8005f78:	e6bc      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005f7a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f43f aeb9 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005f82:	4620      	mov	r0, r4
 8005f84:	4798      	blx	r3
    return;
 8005f86:	e6b5      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f7ff fe1f 	bl	8005bcc <UART_EndTransmit_IT>
    return;
 8005f8e:	e6b1      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 fe0f 	bl	8006bb4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005f96:	e6ad      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 fe0a 	bl	8006bb2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005f9e:	e6a9      	b.n	8005cf4 <HAL_UART_IRQHandler+0x88>

08005fa0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fa0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005fa2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fa6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005faa:	2a22      	cmp	r2, #34	; 0x22
 8005fac:	d005      	beq.n	8005fba <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fae:	6802      	ldr	r2, [r0, #0]
 8005fb0:	6993      	ldr	r3, [r2, #24]
 8005fb2:	f043 0308 	orr.w	r3, r3, #8
 8005fb6:	6193      	str	r3, [r2, #24]
  }
}
 8005fb8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fba:	6802      	ldr	r2, [r0, #0]
 8005fbc:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005fc2:	400b      	ands	r3, r1
 8005fc4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005fc6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005fc8:	3301      	adds	r3, #1
 8005fca:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005fcc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005fda:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e9      	bne.n	8005fb8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fe4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	e852 3f00 	ldrex	r3, [r2]
 8005fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	e842 3100 	strex	r1, r3, [r2]
 8005ff2:	2900      	cmp	r1, #0
 8005ff4:	d1f6      	bne.n	8005fe4 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	f102 0308 	add.w	r3, r2, #8
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	3208      	adds	r2, #8
 8006006:	e842 3100 	strex	r1, r3, [r2]
 800600a:	2900      	cmp	r1, #0
 800600c:	d1f3      	bne.n	8005ff6 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800600e:	2320      	movs	r3, #32
 8006010:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006018:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d116      	bne.n	800604c <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601e:	2300      	movs	r3, #0
 8006020:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006022:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	e852 3f00 	ldrex	r3, [r2]
 8006028:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	e842 3100 	strex	r1, r3, [r2]
 8006030:	2900      	cmp	r1, #0
 8006032:	d1f6      	bne.n	8006022 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006034:	6803      	ldr	r3, [r0, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	f012 0f10 	tst.w	r2, #16
 800603c:	d001      	beq.n	8006042 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800603e:	2210      	movs	r2, #16
 8006040:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006042:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006046:	f7ff fe10 	bl	8005c6a <HAL_UARTEx_RxEventCallback>
 800604a:	e7b5      	b.n	8005fb8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800604c:	f7fb ff20 	bl	8001e90 <HAL_UART_RxCpltCallback>
 8006050:	e7b2      	b.n	8005fb8 <UART_RxISR_8BIT+0x18>

08006052 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006052:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006054:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006058:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800605c:	2b22      	cmp	r3, #34	; 0x22
 800605e:	d005      	beq.n	800606c <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006060:	6802      	ldr	r2, [r0, #0]
 8006062:	6993      	ldr	r3, [r2, #24]
 8006064:	f043 0308 	orr.w	r3, r3, #8
 8006068:	6193      	str	r3, [r2, #24]
  }
}
 800606a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800606c:	6803      	ldr	r3, [r0, #0]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006070:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006072:	4013      	ands	r3, r2
 8006074:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8006076:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006078:	3302      	adds	r3, #2
 800607a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800607c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29b      	uxth	r3, r3
 8006086:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800608a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1ea      	bne.n	800606a <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006094:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	e852 3f00 	ldrex	r3, [r2]
 800609a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	e842 3100 	strex	r1, r3, [r2]
 80060a2:	2900      	cmp	r1, #0
 80060a4:	d1f6      	bne.n	8006094 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	f102 0308 	add.w	r3, r2, #8
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	3208      	adds	r2, #8
 80060b6:	e842 3100 	strex	r1, r3, [r2]
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d1f3      	bne.n	80060a6 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80060be:	2320      	movs	r3, #32
 80060c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d116      	bne.n	80060fc <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ce:	2300      	movs	r3, #0
 80060d0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	e852 3f00 	ldrex	r3, [r2]
 80060d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	e842 3100 	strex	r1, r3, [r2]
 80060e0:	2900      	cmp	r1, #0
 80060e2:	d1f6      	bne.n	80060d2 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060e4:	6803      	ldr	r3, [r0, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	f012 0f10 	tst.w	r2, #16
 80060ec:	d001      	beq.n	80060f2 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ee:	2210      	movs	r2, #16
 80060f0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060f2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80060f6:	f7ff fdb8 	bl	8005c6a <HAL_UARTEx_RxEventCallback>
 80060fa:	e7b6      	b.n	800606a <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80060fc:	f7fb fec8 	bl	8001e90 <HAL_UART_RxCpltCallback>
 8006100:	e7b3      	b.n	800606a <UART_RxISR_16BIT+0x18>
	...

08006104 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006108:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800610c:	6803      	ldr	r3, [r0, #0]
 800610e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006110:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006114:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006118:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800611c:	2a22      	cmp	r2, #34	; 0x22
 800611e:	d005      	beq.n	800612c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	f042 0208 	orr.w	r2, r2, #8
 8006126:	619a      	str	r2, [r3, #24]
  }
}
 8006128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800612e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006132:	e008      	b.n	8006146 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006134:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d14c      	bne.n	80061d6 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800613c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d04e      	beq.n	80061e4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006146:	2f00      	cmp	r7, #0
 8006148:	f000 8087 	beq.w	800625a <UART_RxISR_8BIT_FIFOEN+0x156>
 800614c:	f015 0f20 	tst.w	r5, #32
 8006150:	f000 8083 	beq.w	800625a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006158:	b2f3      	uxtb	r3, r6
 800615a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800615c:	400b      	ands	r3, r1
 800615e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006160:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006162:	3301      	adds	r3, #1
 8006164:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006166:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29b      	uxth	r3, r3
 8006170:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006178:	f015 0f07 	tst.w	r5, #7
 800617c:	d0de      	beq.n	800613c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800617e:	f015 0f01 	tst.w	r5, #1
 8006182:	d009      	beq.n	8006198 <UART_RxISR_8BIT_FIFOEN+0x94>
 8006184:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006188:	d006      	beq.n	8006198 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800618a:	2201      	movs	r2, #1
 800618c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800618e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006198:	f015 0f02 	tst.w	r5, #2
 800619c:	d00b      	beq.n	80061b6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800619e:	f018 0f01 	tst.w	r8, #1
 80061a2:	d008      	beq.n	80061b6 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	2202      	movs	r2, #2
 80061a8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80061ae:	f043 0304 	orr.w	r3, r3, #4
 80061b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b6:	f015 0f04 	tst.w	r5, #4
 80061ba:	d0bb      	beq.n	8006134 <UART_RxISR_8BIT_FIFOEN+0x30>
 80061bc:	f018 0f01 	tst.w	r8, #1
 80061c0:	d0b8      	beq.n	8006134 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	2204      	movs	r2, #4
 80061c6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061c8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80061cc:	f043 0302 	orr.w	r3, r3, #2
 80061d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80061d4:	e7ae      	b.n	8006134 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7ff fd10 	bl	8005bfc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80061e2:	e7ab      	b.n	800613c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	e852 3f00 	ldrex	r3, [r2]
 80061ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	e842 3100 	strex	r1, r3, [r2]
 80061f2:	2900      	cmp	r1, #0
 80061f4:	d1f6      	bne.n	80061e4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	f102 0308 	add.w	r3, r2, #8
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006204:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	3208      	adds	r2, #8
 800620a:	e842 3100 	strex	r1, r3, [r2]
 800620e:	2900      	cmp	r1, #0
 8006210:	d1f1      	bne.n	80061f6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8006212:	2320      	movs	r3, #32
 8006214:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8006218:	2300      	movs	r3, #0
 800621a:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800621c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800621e:	2b01      	cmp	r3, #1
 8006220:	d003      	beq.n	800622a <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8006222:	4620      	mov	r0, r4
 8006224:	f7fb fe34 	bl	8001e90 <HAL_UART_RxCpltCallback>
 8006228:	e78d      	b.n	8006146 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	2300      	movs	r3, #0
 800622c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	e852 3f00 	ldrex	r3, [r2]
 8006234:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	e842 3100 	strex	r1, r3, [r2]
 800623c:	2900      	cmp	r1, #0
 800623e:	d1f6      	bne.n	800622e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	f012 0f10 	tst.w	r2, #16
 8006248:	d001      	beq.n	800624e <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800624a:	2210      	movs	r2, #16
 800624c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800624e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006252:	4620      	mov	r0, r4
 8006254:	f7ff fd09 	bl	8005c6a <HAL_UARTEx_RxEventCallback>
 8006258:	e775      	b.n	8006146 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800625a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800625e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006260:	2b00      	cmp	r3, #0
 8006262:	f43f af61 	beq.w	8006128 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006266:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800626a:	429a      	cmp	r2, r3
 800626c:	f67f af5c 	bls.w	8006128 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006270:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	f102 0308 	add.w	r3, r2, #8
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	3208      	adds	r2, #8
 8006280:	e842 3100 	strex	r1, r3, [r2]
 8006284:	2900      	cmp	r1, #0
 8006286:	d1f3      	bne.n	8006270 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800628a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800628c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	e852 3f00 	ldrex	r3, [r2]
 8006292:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	e842 3100 	strex	r1, r3, [r2]
 800629a:	2900      	cmp	r1, #0
 800629c:	d1f6      	bne.n	800628c <UART_RxISR_8BIT_FIFOEN+0x188>
 800629e:	e743      	b.n	8006128 <UART_RxISR_8BIT_FIFOEN+0x24>
 80062a0:	08005fa1 	.word	0x08005fa1

080062a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80062a8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80062ac:	6803      	ldr	r3, [r0, #0]
 80062ae:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80062b0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80062b4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062b8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80062bc:	2a22      	cmp	r2, #34	; 0x22
 80062be:	d005      	beq.n	80062cc <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	f042 0208 	orr.w	r2, r2, #8
 80062c6:	619a      	str	r2, [r3, #24]
  }
}
 80062c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062cc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80062ce:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062d2:	e008      	b.n	80062e6 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d14b      	bne.n	8006374 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80062dc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d04d      	beq.n	8006382 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062e6:	2f00      	cmp	r7, #0
 80062e8:	f000 8086 	beq.w	80063f8 <UART_RxISR_16BIT_FIFOEN+0x154>
 80062ec:	f015 0f20 	tst.w	r5, #32
 80062f0:	f000 8082 	beq.w	80063f8 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80062fa:	4033      	ands	r3, r6
 80062fc:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80062fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006300:	3302      	adds	r3, #2
 8006302:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006304:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29b      	uxth	r3, r3
 800630e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006316:	f015 0f07 	tst.w	r5, #7
 800631a:	d0df      	beq.n	80062dc <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800631c:	f015 0f01 	tst.w	r5, #1
 8006320:	d009      	beq.n	8006336 <UART_RxISR_16BIT_FIFOEN+0x92>
 8006322:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006326:	d006      	beq.n	8006336 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006328:	2201      	movs	r2, #1
 800632a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800632c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006336:	f015 0f02 	tst.w	r5, #2
 800633a:	d00b      	beq.n	8006354 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800633c:	f018 0f01 	tst.w	r8, #1
 8006340:	d008      	beq.n	8006354 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	2202      	movs	r2, #2
 8006346:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006348:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800634c:	f043 0304 	orr.w	r3, r3, #4
 8006350:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006354:	f015 0f04 	tst.w	r5, #4
 8006358:	d0bc      	beq.n	80062d4 <UART_RxISR_16BIT_FIFOEN+0x30>
 800635a:	f018 0f01 	tst.w	r8, #1
 800635e:	d0b9      	beq.n	80062d4 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	2204      	movs	r2, #4
 8006364:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006366:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800636a:	f043 0302 	orr.w	r3, r3, #2
 800636e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006372:	e7af      	b.n	80062d4 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006374:	4620      	mov	r0, r4
 8006376:	f7ff fc41 	bl	8005bfc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637a:	2300      	movs	r3, #0
 800637c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006380:	e7ac      	b.n	80062dc <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006382:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	e852 3f00 	ldrex	r3, [r2]
 8006388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	e842 3100 	strex	r1, r3, [r2]
 8006390:	2900      	cmp	r1, #0
 8006392:	d1f6      	bne.n	8006382 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006394:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	f102 0308 	add.w	r3, r2, #8
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	3208      	adds	r2, #8
 80063a8:	e842 3100 	strex	r1, r3, [r2]
 80063ac:	2900      	cmp	r1, #0
 80063ae:	d1f1      	bne.n	8006394 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80063b0:	2320      	movs	r3, #32
 80063b2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d003      	beq.n	80063c8 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80063c0:	4620      	mov	r0, r4
 80063c2:	f7fb fd65 	bl	8001e90 <HAL_UART_RxCpltCallback>
 80063c6:	e78e      	b.n	80062e6 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c8:	2300      	movs	r3, #0
 80063ca:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	e852 3f00 	ldrex	r3, [r2]
 80063d2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	e842 3100 	strex	r1, r3, [r2]
 80063da:	2900      	cmp	r1, #0
 80063dc:	d1f6      	bne.n	80063cc <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	69da      	ldr	r2, [r3, #28]
 80063e2:	f012 0f10 	tst.w	r2, #16
 80063e6:	d001      	beq.n	80063ec <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063e8:	2210      	movs	r2, #16
 80063ea:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff fc3a 	bl	8005c6a <HAL_UARTEx_RxEventCallback>
 80063f6:	e776      	b.n	80062e6 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80063f8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80063fc:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f43f af62 	beq.w	80062c8 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006404:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006408:	429a      	cmp	r2, r3
 800640a:	f67f af5d 	bls.w	80062c8 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800640e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	f102 0308 	add.w	r3, r2, #8
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	3208      	adds	r2, #8
 800641e:	e842 3100 	strex	r1, r3, [r2]
 8006422:	2900      	cmp	r1, #0
 8006424:	d1f3      	bne.n	800640e <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8006428:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800642a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	e852 3f00 	ldrex	r3, [r2]
 8006430:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	e842 3100 	strex	r1, r3, [r2]
 8006438:	2900      	cmp	r1, #0
 800643a:	d1f6      	bne.n	800642a <UART_RxISR_16BIT_FIFOEN+0x186>
 800643c:	e744      	b.n	80062c8 <UART_RxISR_16BIT_FIFOEN+0x24>
 800643e:	bf00      	nop
 8006440:	08006053 	.word	0x08006053

08006444 <UART_SetConfig>:
{
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006448:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800644a:	6883      	ldr	r3, [r0, #8]
 800644c:	6902      	ldr	r2, [r0, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	6942      	ldr	r2, [r0, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	69c2      	ldr	r2, [r0, #28]
 8006456:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006458:	6808      	ldr	r0, [r1, #0]
 800645a:	4a9d      	ldr	r2, [pc, #628]	; (80066d0 <UART_SetConfig+0x28c>)
 800645c:	4002      	ands	r2, r0
 800645e:	4313      	orrs	r3, r2
 8006460:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	6853      	ldr	r3, [r2, #4]
 8006466:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800646a:	68e1      	ldr	r1, [r4, #12]
 800646c:	430b      	orrs	r3, r1
 800646e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006470:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	4b97      	ldr	r3, [pc, #604]	; (80066d4 <UART_SetConfig+0x290>)
 8006476:	429a      	cmp	r2, r3
 8006478:	d001      	beq.n	800647e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800647a:	6a23      	ldr	r3, [r4, #32]
 800647c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800647e:	6893      	ldr	r3, [r2, #8]
 8006480:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006484:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006488:	430b      	orrs	r3, r1
 800648a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800648c:	6822      	ldr	r2, [r4, #0]
 800648e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006490:	f023 030f 	bic.w	r3, r3, #15
 8006494:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006496:	430b      	orrs	r3, r1
 8006498:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	4a8e      	ldr	r2, [pc, #568]	; (80066d8 <UART_SetConfig+0x294>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d01c      	beq.n	80064dc <UART_SetConfig+0x98>
 80064a2:	4a8e      	ldr	r2, [pc, #568]	; (80066dc <UART_SetConfig+0x298>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d031      	beq.n	800650c <UART_SetConfig+0xc8>
 80064a8:	4a8a      	ldr	r2, [pc, #552]	; (80066d4 <UART_SetConfig+0x290>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d04b      	beq.n	8006546 <UART_SetConfig+0x102>
 80064ae:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80064b0:	4988      	ldr	r1, [pc, #544]	; (80066d4 <UART_SetConfig+0x290>)
 80064b2:	428b      	cmp	r3, r1
 80064b4:	d068      	beq.n	8006588 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b6:	69e0      	ldr	r0, [r4, #28]
 80064b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80064bc:	f000 80a5 	beq.w	800660a <UART_SetConfig+0x1c6>
    switch (clocksource)
 80064c0:	2a08      	cmp	r2, #8
 80064c2:	f200 811f 	bhi.w	8006704 <UART_SetConfig+0x2c0>
 80064c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80064ca:	00d3      	.short	0x00d3
 80064cc:	00d100f5 	.word	0x00d100f5
 80064d0:	00f8011d 	.word	0x00f8011d
 80064d4:	011d011d 	.word	0x011d011d
 80064d8:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80064dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064e0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80064e4:	f002 0203 	and.w	r2, r2, #3
 80064e8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ec:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 80064f0:	2a03      	cmp	r2, #3
 80064f2:	d809      	bhi.n	8006508 <UART_SetConfig+0xc4>
 80064f4:	e8df f002 	tbb	[pc, r2]
 80064f8:	063c0402 	.word	0x063c0402
 80064fc:	2201      	movs	r2, #1
 80064fe:	e7d7      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006500:	2204      	movs	r2, #4
 8006502:	e7d5      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006504:	2208      	movs	r2, #8
 8006506:	e7d3      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006508:	2210      	movs	r2, #16
 800650a:	e7d1      	b.n	80064b0 <UART_SetConfig+0x6c>
 800650c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006510:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006514:	f002 020c 	and.w	r2, r2, #12
 8006518:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800651c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8006520:	2a0c      	cmp	r2, #12
 8006522:	d80e      	bhi.n	8006542 <UART_SetConfig+0xfe>
 8006524:	e8df f002 	tbb	[pc, r2]
 8006528:	0d0d0d07 	.word	0x0d0d0d07
 800652c:	0d0d0d09 	.word	0x0d0d0d09
 8006530:	0d0d0d26 	.word	0x0d0d0d26
 8006534:	0b          	.byte	0x0b
 8006535:	00          	.byte	0x00
 8006536:	2200      	movs	r2, #0
 8006538:	e7ba      	b.n	80064b0 <UART_SetConfig+0x6c>
 800653a:	2204      	movs	r2, #4
 800653c:	e7b8      	b.n	80064b0 <UART_SetConfig+0x6c>
 800653e:	2208      	movs	r2, #8
 8006540:	e7b6      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006542:	2210      	movs	r2, #16
 8006544:	e7b4      	b.n	80064b0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800654a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800654e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006552:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006556:	d00f      	beq.n	8006578 <UART_SetConfig+0x134>
 8006558:	d805      	bhi.n	8006566 <UART_SetConfig+0x122>
 800655a:	b17a      	cbz	r2, 800657c <UART_SetConfig+0x138>
 800655c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006560:	d10e      	bne.n	8006580 <UART_SetConfig+0x13c>
 8006562:	2204      	movs	r2, #4
 8006564:	e7a4      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006566:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800656a:	d10b      	bne.n	8006584 <UART_SetConfig+0x140>
 800656c:	2208      	movs	r2, #8
 800656e:	e79f      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006570:	2202      	movs	r2, #2
 8006572:	e79d      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006574:	2202      	movs	r2, #2
 8006576:	e79b      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006578:	2202      	movs	r2, #2
 800657a:	e799      	b.n	80064b0 <UART_SetConfig+0x6c>
 800657c:	2200      	movs	r2, #0
 800657e:	e797      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006580:	2210      	movs	r2, #16
 8006582:	e795      	b.n	80064b0 <UART_SetConfig+0x6c>
 8006584:	2210      	movs	r2, #16
 8006586:	e793      	b.n	80064b0 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006588:	2a08      	cmp	r2, #8
 800658a:	f200 809c 	bhi.w	80066c6 <UART_SetConfig+0x282>
 800658e:	e8df f002 	tbb	[pc, r2]
 8006592:	9a08      	.short	0x9a08
 8006594:	9a379a3a 	.word	0x9a379a3a
 8006598:	9a9a      	.short	0x9a9a
 800659a:	05          	.byte	0x05
 800659b:	00          	.byte	0x00
 800659c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80065a0:	e004      	b.n	80065ac <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a2:	f7fe fb0f 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f000 808f 	beq.w	80066ca <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065ae:	4b4c      	ldr	r3, [pc, #304]	; (80066e0 <UART_SetConfig+0x29c>)
 80065b0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80065b4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065b8:	6865      	ldr	r5, [r4, #4]
 80065ba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80065be:	4299      	cmp	r1, r3
 80065c0:	f200 8094 	bhi.w	80066ec <UART_SetConfig+0x2a8>
 80065c4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80065c8:	f200 8092 	bhi.w	80066f0 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065cc:	2600      	movs	r6, #0
 80065ce:	4633      	mov	r3, r6
 80065d0:	4631      	mov	r1, r6
 80065d2:	f7fa fae9 	bl	8000ba8 <__aeabi_uldivmod>
 80065d6:	0209      	lsls	r1, r1, #8
 80065d8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80065dc:	0200      	lsls	r0, r0, #8
 80065de:	086b      	lsrs	r3, r5, #1
 80065e0:	18c0      	adds	r0, r0, r3
 80065e2:	462a      	mov	r2, r5
 80065e4:	4633      	mov	r3, r6
 80065e6:	f141 0100 	adc.w	r1, r1, #0
 80065ea:	f7fa fadd 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065ee:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80065f2:	4b3c      	ldr	r3, [pc, #240]	; (80066e4 <UART_SetConfig+0x2a0>)
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d87d      	bhi.n	80066f4 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	60d8      	str	r0, [r3, #12]
 80065fc:	4630      	mov	r0, r6
 80065fe:	e050      	b.n	80066a2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006600:	f7fd fdd8 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
        break;
 8006604:	e7cf      	b.n	80065a6 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8006606:	4838      	ldr	r0, [pc, #224]	; (80066e8 <UART_SetConfig+0x2a4>)
 8006608:	e7d0      	b.n	80065ac <UART_SetConfig+0x168>
    switch (clocksource)
 800660a:	2a08      	cmp	r2, #8
 800660c:	d874      	bhi.n	80066f8 <UART_SetConfig+0x2b4>
 800660e:	e8df f002 	tbb	[pc, r2]
 8006612:	2707      	.short	0x2707
 8006614:	732a7305 	.word	0x732a7305
 8006618:	7373      	.short	0x7373
 800661a:	0b          	.byte	0x0b
 800661b:	00          	.byte	0x00
 800661c:	4832      	ldr	r0, [pc, #200]	; (80066e8 <UART_SetConfig+0x2a4>)
 800661e:	e003      	b.n	8006628 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006620:	f7fe fad0 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006624:	2800      	cmp	r0, #0
 8006626:	d069      	beq.n	80066fc <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006628:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800662a:	4b2d      	ldr	r3, [pc, #180]	; (80066e0 <UART_SetConfig+0x29c>)
 800662c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006630:	fbb0 f0f3 	udiv	r0, r0, r3
 8006634:	6862      	ldr	r2, [r4, #4]
 8006636:	0853      	lsrs	r3, r2, #1
 8006638:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800663c:	fbb0 f0f2 	udiv	r0, r0, r2
 8006640:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006642:	f1a0 0210 	sub.w	r2, r0, #16
 8006646:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800664a:	429a      	cmp	r2, r3
 800664c:	d858      	bhi.n	8006700 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800664e:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006652:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006656:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	60d8      	str	r0, [r3, #12]
 800665c:	2000      	movs	r0, #0
 800665e:	e020      	b.n	80066a2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006660:	f7fe fac0 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
        break;
 8006664:	e7de      	b.n	8006624 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006666:	f7fd fda5 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
        break;
 800666a:	e7db      	b.n	8006624 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800666c:	481e      	ldr	r0, [pc, #120]	; (80066e8 <UART_SetConfig+0x2a4>)
 800666e:	e003      	b.n	8006678 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fe faa8 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006674:	2800      	cmp	r0, #0
 8006676:	d047      	beq.n	8006708 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006678:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800667a:	4b19      	ldr	r3, [pc, #100]	; (80066e0 <UART_SetConfig+0x29c>)
 800667c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006680:	fbb0 f0f3 	udiv	r0, r0, r3
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800668a:	fbb0 f0f3 	udiv	r0, r0, r3
 800668e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006690:	f1a0 0210 	sub.w	r2, r0, #16
 8006694:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006698:	429a      	cmp	r2, r3
 800669a:	d837      	bhi.n	800670c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	60d8      	str	r0, [r3, #12]
 80066a0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066a8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80066b0:	6763      	str	r3, [r4, #116]	; 0x74
}
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b4:	f7fe fa96 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
        break;
 80066b8:	e7dc      	b.n	8006674 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80066ba:	f7fd fd7b 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
        break;
 80066be:	e7d9      	b.n	8006674 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80066c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80066c4:	e7d8      	b.n	8006678 <UART_SetConfig+0x234>
    switch (clocksource)
 80066c6:	2001      	movs	r0, #1
 80066c8:	e7eb      	b.n	80066a2 <UART_SetConfig+0x25e>
 80066ca:	2000      	movs	r0, #0
 80066cc:	e7e9      	b.n	80066a2 <UART_SetConfig+0x25e>
 80066ce:	bf00      	nop
 80066d0:	cfff69f3 	.word	0xcfff69f3
 80066d4:	40008000 	.word	0x40008000
 80066d8:	40013800 	.word	0x40013800
 80066dc:	40004400 	.word	0x40004400
 80066e0:	080115b8 	.word	0x080115b8
 80066e4:	000ffcff 	.word	0x000ffcff
 80066e8:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 80066ec:	2001      	movs	r0, #1
 80066ee:	e7d8      	b.n	80066a2 <UART_SetConfig+0x25e>
 80066f0:	2001      	movs	r0, #1
 80066f2:	e7d6      	b.n	80066a2 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 80066f4:	2001      	movs	r0, #1
 80066f6:	e7d4      	b.n	80066a2 <UART_SetConfig+0x25e>
    switch (clocksource)
 80066f8:	2001      	movs	r0, #1
 80066fa:	e7d2      	b.n	80066a2 <UART_SetConfig+0x25e>
 80066fc:	2000      	movs	r0, #0
 80066fe:	e7d0      	b.n	80066a2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006700:	2001      	movs	r0, #1
 8006702:	e7ce      	b.n	80066a2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006704:	2001      	movs	r0, #1
 8006706:	e7cc      	b.n	80066a2 <UART_SetConfig+0x25e>
 8006708:	2000      	movs	r0, #0
 800670a:	e7ca      	b.n	80066a2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800670c:	2001      	movs	r0, #1
 800670e:	e7c8      	b.n	80066a2 <UART_SetConfig+0x25e>

08006710 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006710:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006712:	f013 0f01 	tst.w	r3, #1
 8006716:	d006      	beq.n	8006726 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006718:	6802      	ldr	r2, [r0, #0]
 800671a:	6853      	ldr	r3, [r2, #4]
 800671c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006720:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006722:	430b      	orrs	r3, r1
 8006724:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006726:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006728:	f013 0f02 	tst.w	r3, #2
 800672c:	d006      	beq.n	800673c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800672e:	6802      	ldr	r2, [r0, #0]
 8006730:	6853      	ldr	r3, [r2, #4]
 8006732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006736:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006738:	430b      	orrs	r3, r1
 800673a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800673c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800673e:	f013 0f04 	tst.w	r3, #4
 8006742:	d006      	beq.n	8006752 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006744:	6802      	ldr	r2, [r0, #0]
 8006746:	6853      	ldr	r3, [r2, #4]
 8006748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800674c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800674e:	430b      	orrs	r3, r1
 8006750:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006752:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006754:	f013 0f08 	tst.w	r3, #8
 8006758:	d006      	beq.n	8006768 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675a:	6802      	ldr	r2, [r0, #0]
 800675c:	6853      	ldr	r3, [r2, #4]
 800675e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006762:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006764:	430b      	orrs	r3, r1
 8006766:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006768:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800676a:	f013 0f10 	tst.w	r3, #16
 800676e:	d006      	beq.n	800677e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006770:	6802      	ldr	r2, [r0, #0]
 8006772:	6893      	ldr	r3, [r2, #8]
 8006774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006778:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800677a:	430b      	orrs	r3, r1
 800677c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800677e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006780:	f013 0f20 	tst.w	r3, #32
 8006784:	d006      	beq.n	8006794 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006786:	6802      	ldr	r2, [r0, #0]
 8006788:	6893      	ldr	r3, [r2, #8]
 800678a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800678e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006790:	430b      	orrs	r3, r1
 8006792:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006794:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006796:	f013 0f40 	tst.w	r3, #64	; 0x40
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800679c:	6802      	ldr	r2, [r0, #0]
 800679e:	6853      	ldr	r3, [r2, #4]
 80067a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067a4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80067a6:	430b      	orrs	r3, r1
 80067a8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80067ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b0:	d00b      	beq.n	80067ca <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80067b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067b8:	d006      	beq.n	80067c8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ba:	6802      	ldr	r2, [r0, #0]
 80067bc:	6853      	ldr	r3, [r2, #4]
 80067be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80067c2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6053      	str	r3, [r2, #4]
}
 80067c8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067ca:	6802      	ldr	r2, [r0, #0]
 80067cc:	6853      	ldr	r3, [r2, #4]
 80067ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80067d2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80067d4:	430b      	orrs	r3, r1
 80067d6:	6053      	str	r3, [r2, #4]
 80067d8:	e7eb      	b.n	80067b2 <UART_AdvFeatureConfig+0xa2>

080067da <UART_WaitOnFlagUntilTimeout>:
{
 80067da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067de:	4605      	mov	r5, r0
 80067e0:	460f      	mov	r7, r1
 80067e2:	4616      	mov	r6, r2
 80067e4:	4699      	mov	r9, r3
 80067e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ea:	682c      	ldr	r4, [r5, #0]
 80067ec:	69e4      	ldr	r4, [r4, #28]
 80067ee:	ea37 0304 	bics.w	r3, r7, r4
 80067f2:	bf0c      	ite	eq
 80067f4:	f04f 0c01 	moveq.w	ip, #1
 80067f8:	f04f 0c00 	movne.w	ip, #0
 80067fc:	45b4      	cmp	ip, r6
 80067fe:	d157      	bne.n	80068b0 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8006800:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006804:	d0f1      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006806:	f7fb f847 	bl	8001898 <HAL_GetTick>
 800680a:	eba0 0009 	sub.w	r0, r0, r9
 800680e:	4540      	cmp	r0, r8
 8006810:	d82f      	bhi.n	8006872 <UART_WaitOnFlagUntilTimeout+0x98>
 8006812:	f1b8 0f00 	cmp.w	r8, #0
 8006816:	d02c      	beq.n	8006872 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f012 0f04 	tst.w	r2, #4
 8006820:	d0e3      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006828:	d0df      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800682a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800682e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006830:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	e852 3f00 	ldrex	r3, [r2]
 8006836:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	e842 3100 	strex	r1, r3, [r2]
 800683e:	2900      	cmp	r1, #0
 8006840:	d1f6      	bne.n	8006830 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	f102 0308 	add.w	r3, r2, #8
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	3208      	adds	r2, #8
 8006852:	e842 3100 	strex	r1, r3, [r2]
 8006856:	2900      	cmp	r1, #0
 8006858:	d1f3      	bne.n	8006842 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800685a:	2320      	movs	r3, #32
 800685c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006860:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006864:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8006868:	2300      	movs	r3, #0
 800686a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800686e:	2003      	movs	r0, #3
 8006870:	e01f      	b.n	80068b2 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006872:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	e852 3f00 	ldrex	r3, [r2]
 8006878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	e842 3100 	strex	r1, r3, [r2]
 8006880:	2900      	cmp	r1, #0
 8006882:	d1f6      	bne.n	8006872 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006884:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	f102 0308 	add.w	r3, r2, #8
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	3208      	adds	r2, #8
 8006894:	e842 3100 	strex	r1, r3, [r2]
 8006898:	2900      	cmp	r1, #0
 800689a:	d1f3      	bne.n	8006884 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800689c:	2320      	movs	r3, #32
 800689e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80068a2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80068a6:	2300      	movs	r3, #0
 80068a8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80068ac:	2003      	movs	r0, #3
 80068ae:	e000      	b.n	80068b2 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 80068b0:	2000      	movs	r0, #0
}
 80068b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080068b6 <UART_CheckIdleState>:
{
 80068b6:	b530      	push	{r4, r5, lr}
 80068b8:	b083      	sub	sp, #12
 80068ba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068bc:	2300      	movs	r3, #0
 80068be:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80068c2:	f7fa ffe9 	bl	8001898 <HAL_GetTick>
 80068c6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068c8:	6822      	ldr	r2, [r4, #0]
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	f012 0f08 	tst.w	r2, #8
 80068d0:	d10f      	bne.n	80068f2 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f013 0f04 	tst.w	r3, #4
 80068da:	d118      	bne.n	800690e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80068dc:	2320      	movs	r3, #32
 80068de:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80068e2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e6:	2000      	movs	r0, #0
 80068e8:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80068ea:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80068ee:	b003      	add	sp, #12
 80068f0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	4603      	mov	r3, r0
 80068fa:	2200      	movs	r2, #0
 80068fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006900:	4620      	mov	r0, r4
 8006902:	f7ff ff6a 	bl	80067da <UART_WaitOnFlagUntilTimeout>
 8006906:	2800      	cmp	r0, #0
 8006908:	d0e3      	beq.n	80068d2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800690a:	2003      	movs	r0, #3
 800690c:	e7ef      	b.n	80068ee <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800690e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	462b      	mov	r3, r5
 8006916:	2200      	movs	r2, #0
 8006918:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800691c:	4620      	mov	r0, r4
 800691e:	f7ff ff5c 	bl	80067da <UART_WaitOnFlagUntilTimeout>
 8006922:	2800      	cmp	r0, #0
 8006924:	d0da      	beq.n	80068dc <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006926:	2003      	movs	r0, #3
 8006928:	e7e1      	b.n	80068ee <UART_CheckIdleState+0x38>

0800692a <HAL_UART_Init>:
  if (huart == NULL)
 800692a:	b378      	cbz	r0, 800698c <HAL_UART_Init+0x62>
{
 800692c:	b510      	push	{r4, lr}
 800692e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006930:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006934:	b30b      	cbz	r3, 800697a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006936:	2324      	movs	r3, #36	; 0x24
 8006938:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006946:	4620      	mov	r0, r4
 8006948:	f7ff fd7c 	bl	8006444 <UART_SetConfig>
 800694c:	2801      	cmp	r0, #1
 800694e:	d013      	beq.n	8006978 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006950:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006952:	b9bb      	cbnz	r3, 8006984 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006954:	6822      	ldr	r2, [r4, #0]
 8006956:	6853      	ldr	r3, [r2, #4]
 8006958:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800695c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	6893      	ldr	r3, [r2, #8]
 8006962:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006966:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	6813      	ldr	r3, [r2, #0]
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006972:	4620      	mov	r0, r4
 8006974:	f7ff ff9f 	bl	80068b6 <UART_CheckIdleState>
}
 8006978:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800697a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800697e:	f7fb f973 	bl	8001c68 <HAL_UART_MspInit>
 8006982:	e7d8      	b.n	8006936 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006984:	4620      	mov	r0, r4
 8006986:	f7ff fec3 	bl	8006710 <UART_AdvFeatureConfig>
 800698a:	e7e3      	b.n	8006954 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800698c:	2001      	movs	r0, #1
}
 800698e:	4770      	bx	lr

08006990 <UART_Start_Receive_IT>:
{
 8006990:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006992:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006994:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006998:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80069a0:	6883      	ldr	r3, [r0, #8]
 80069a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a6:	d006      	beq.n	80069b6 <UART_Start_Receive_IT+0x26>
 80069a8:	b9a3      	cbnz	r3, 80069d4 <UART_Start_Receive_IT+0x44>
 80069aa:	6903      	ldr	r3, [r0, #16]
 80069ac:	b973      	cbnz	r3, 80069cc <UART_Start_Receive_IT+0x3c>
 80069ae:	23ff      	movs	r3, #255	; 0xff
 80069b0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80069b4:	e014      	b.n	80069e0 <UART_Start_Receive_IT+0x50>
 80069b6:	6903      	ldr	r3, [r0, #16]
 80069b8:	b923      	cbnz	r3, 80069c4 <UART_Start_Receive_IT+0x34>
 80069ba:	f240 13ff 	movw	r3, #511	; 0x1ff
 80069be:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80069c2:	e00d      	b.n	80069e0 <UART_Start_Receive_IT+0x50>
 80069c4:	23ff      	movs	r3, #255	; 0xff
 80069c6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80069ca:	e009      	b.n	80069e0 <UART_Start_Receive_IT+0x50>
 80069cc:	237f      	movs	r3, #127	; 0x7f
 80069ce:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80069d2:	e005      	b.n	80069e0 <UART_Start_Receive_IT+0x50>
 80069d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d8:	d030      	beq.n	8006a3c <UART_Start_Receive_IT+0xac>
 80069da:	2300      	movs	r3, #0
 80069dc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069e6:	2322      	movs	r3, #34	; 0x22
 80069e8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ec:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	f101 0308 	add.w	r3, r1, #8
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	3108      	adds	r1, #8
 80069fc:	e841 3400 	strex	r4, r3, [r1]
 8006a00:	2c00      	cmp	r4, #0
 8006a02:	d1f3      	bne.n	80069ec <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a04:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0a:	d021      	beq.n	8006a50 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0c:	6883      	ldr	r3, [r0, #8]
 8006a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a12:	d048      	beq.n	8006aa6 <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8006a14:	4b2c      	ldr	r3, [pc, #176]	; (8006ac8 <UART_Start_Receive_IT+0x138>)
 8006a16:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a1e:	6903      	ldr	r3, [r0, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d046      	beq.n	8006ab2 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a24:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	e852 3f00 	ldrex	r3, [r2]
 8006a2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	e842 3100 	strex	r1, r3, [r2]
 8006a32:	2900      	cmp	r1, #0
 8006a34:	d1f6      	bne.n	8006a24 <UART_Start_Receive_IT+0x94>
}
 8006a36:	2000      	movs	r0, #0
 8006a38:	bc10      	pop	{r4}
 8006a3a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006a3c:	6903      	ldr	r3, [r0, #16]
 8006a3e:	b91b      	cbnz	r3, 8006a48 <UART_Start_Receive_IT+0xb8>
 8006a40:	237f      	movs	r3, #127	; 0x7f
 8006a42:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006a46:	e7cb      	b.n	80069e0 <UART_Start_Receive_IT+0x50>
 8006a48:	233f      	movs	r3, #63	; 0x3f
 8006a4a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006a4e:	e7c7      	b.n	80069e0 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a50:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d8d9      	bhi.n	8006a0c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a58:	6883      	ldr	r3, [r0, #8]
 8006a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5e:	d01c      	beq.n	8006a9a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a60:	4b1a      	ldr	r3, [pc, #104]	; (8006acc <UART_Start_Receive_IT+0x13c>)
 8006a62:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006a64:	2300      	movs	r3, #0
 8006a66:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a6a:	6903      	ldr	r3, [r0, #16]
 8006a6c:	b143      	cbz	r3, 8006a80 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	e852 3f00 	ldrex	r3, [r2]
 8006a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	e842 3100 	strex	r1, r3, [r2]
 8006a7c:	2900      	cmp	r1, #0
 8006a7e:	d1f6      	bne.n	8006a6e <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a80:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	f102 0308 	add.w	r3, r2, #8
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	3208      	adds	r2, #8
 8006a90:	e842 3100 	strex	r1, r3, [r2]
 8006a94:	2900      	cmp	r1, #0
 8006a96:	d1f3      	bne.n	8006a80 <UART_Start_Receive_IT+0xf0>
 8006a98:	e7cd      	b.n	8006a36 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9a:	6903      	ldr	r3, [r0, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1df      	bne.n	8006a60 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <UART_Start_Receive_IT+0x140>)
 8006aa2:	6703      	str	r3, [r0, #112]	; 0x70
 8006aa4:	e7de      	b.n	8006a64 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa6:	6903      	ldr	r3, [r0, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1b3      	bne.n	8006a14 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <UART_Start_Receive_IT+0x144>)
 8006aae:	6703      	str	r3, [r0, #112]	; 0x70
 8006ab0:	e7b2      	b.n	8006a18 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ab2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	e852 3f00 	ldrex	r3, [r2]
 8006ab8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	e842 3100 	strex	r1, r3, [r2]
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d1f6      	bne.n	8006ab2 <UART_Start_Receive_IT+0x122>
 8006ac4:	e7b7      	b.n	8006a36 <UART_Start_Receive_IT+0xa6>
 8006ac6:	bf00      	nop
 8006ac8:	08005fa1 	.word	0x08005fa1
 8006acc:	08006105 	.word	0x08006105
 8006ad0:	080062a5 	.word	0x080062a5
 8006ad4:	08006053 	.word	0x08006053

08006ad8 <HAL_UART_Receive_IT>:
{
 8006ad8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ada:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d11e      	bne.n	8006b20 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8006ae2:	b1f9      	cbz	r1, 8006b24 <HAL_UART_Receive_IT+0x4c>
 8006ae4:	b302      	cbz	r2, 8006b28 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8006ae6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d01e      	beq.n	8006b2c <HAL_UART_Receive_IT+0x54>
 8006aee:	2301      	movs	r3, #1
 8006af0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af4:	2300      	movs	r3, #0
 8006af6:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006af8:	6803      	ldr	r3, [r0, #0]
 8006afa:	4c0d      	ldr	r4, [pc, #52]	; (8006b30 <HAL_UART_Receive_IT+0x58>)
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d00c      	beq.n	8006b1a <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006b06:	d008      	beq.n	8006b1a <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b08:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	e854 3f00 	ldrex	r3, [r4]
 8006b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	e844 3500 	strex	r5, r3, [r4]
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	d1f6      	bne.n	8006b08 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006b1a:	f7ff ff39 	bl	8006990 <UART_Start_Receive_IT>
 8006b1e:	e000      	b.n	8006b22 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8006b20:	2002      	movs	r0, #2
}
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006b24:	2001      	movs	r0, #1
 8006b26:	e7fc      	b.n	8006b22 <HAL_UART_Receive_IT+0x4a>
 8006b28:	2001      	movs	r0, #1
 8006b2a:	e7fa      	b.n	8006b22 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8006b2c:	2002      	movs	r0, #2
 8006b2e:	e7f8      	b.n	8006b22 <HAL_UART_Receive_IT+0x4a>
 8006b30:	40008000 	.word	0x40008000

08006b34 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006b34:	b082      	sub	sp, #8
 8006b36:	ab02      	add	r3, sp, #8
 8006b38:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006b3c:	6802      	ldr	r2, [r0, #0]
 8006b3e:	6853      	ldr	r3, [r2, #4]
 8006b40:	f023 0310 	bic.w	r3, r3, #16
 8006b44:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006b4c:	6802      	ldr	r2, [r0, #0]
 8006b4e:	6853      	ldr	r3, [r2, #4]
 8006b50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b54:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006b58:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006b5c:	6053      	str	r3, [r2, #4]
}
 8006b5e:	b002      	add	sp, #8
 8006b60:	4770      	bx	lr
	...

08006b64 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b64:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006b66:	b92b      	cbnz	r3, 8006b74 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b6e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006b72:	4770      	bx	lr
{
 8006b74:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b76:	6803      	ldr	r3, [r0, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b7e:	6899      	ldr	r1, [r3, #8]
 8006b80:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b82:	4d09      	ldr	r5, [pc, #36]	; (8006ba8 <UARTEx_SetNbDataToProcess+0x44>)
 8006b84:	5c6b      	ldrb	r3, [r5, r1]
 8006b86:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b88:	4c08      	ldr	r4, [pc, #32]	; (8006bac <UARTEx_SetNbDataToProcess+0x48>)
 8006b8a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b8c:	fb93 f3f1 	sdiv	r3, r3, r1
 8006b90:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b94:	5cab      	ldrb	r3, [r5, r2]
 8006b96:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b98:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b9e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006ba2:	bc30      	pop	{r4, r5}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	080115d8 	.word	0x080115d8
 8006bac:	080115d0 	.word	0x080115d0

08006bb0 <HAL_UARTEx_WakeupCallback>:
}
 8006bb0:	4770      	bx	lr

08006bb2 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	ab04      	add	r3, sp, #16
 8006bbc:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006bc0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d035      	beq.n	8006c34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006bc8:	4604      	mov	r4, r0
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006bd0:	2324      	movs	r3, #36	; 0x24
 8006bd2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006bd6:	6802      	ldr	r2, [r0, #0]
 8006bd8:	6813      	ldr	r3, [r2, #0]
 8006bda:	f023 0301 	bic.w	r3, r3, #1
 8006bde:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006be0:	6801      	ldr	r1, [r0, #0]
 8006be2:	688b      	ldr	r3, [r1, #8]
 8006be4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006be8:	9a02      	ldr	r2, [sp, #8]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006bee:	b1aa      	cbz	r2, 8006c1c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006bfa:	f7fa fe4d 	bl	8001898 <HAL_GetTick>
 8006bfe:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c00:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006c04:	9200      	str	r2, [sp, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f7ff fde4 	bl	80067da <UART_WaitOnFlagUntilTimeout>
 8006c12:	b948      	cbnz	r0, 8006c28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006c14:	2320      	movs	r3, #32
 8006c16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006c1a:	e006      	b.n	8006c2a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006c1c:	ab04      	add	r3, sp, #16
 8006c1e:	e913 0006 	ldmdb	r3, {r1, r2}
 8006c22:	f7ff ff87 	bl	8006b34 <UARTEx_Wakeup_AddressConfig>
 8006c26:	e7e3      	b.n	8006bf0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006c28:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006c30:	b004      	add	sp, #16
 8006c32:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006c34:	2002      	movs	r0, #2
 8006c36:	e7fb      	b.n	8006c30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006c38 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006c38:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d010      	beq.n	8006c62 <HAL_UARTEx_EnableStopMode+0x2a>
 8006c40:	2301      	movs	r3, #1
 8006c42:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006c46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	e852 3f00 	ldrex	r3, [r2]
 8006c4c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	e842 3100 	strex	r1, r3, [r2]
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d1f6      	bne.n	8006c46 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006c5e:	4618      	mov	r0, r3
 8006c60:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006c62:	2002      	movs	r0, #2
}
 8006c64:	4770      	bx	lr

08006c66 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006c66:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d01d      	beq.n	8006caa <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006c72:	2301      	movs	r3, #1
 8006c74:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006c78:	2324      	movs	r3, #36	; 0x24
 8006c7a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c7e:	6802      	ldr	r2, [r0, #0]
 8006c80:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006c82:	6811      	ldr	r1, [r2, #0]
 8006c84:	f021 0101 	bic.w	r1, r1, #1
 8006c88:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006c8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006c92:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c94:	6802      	ldr	r2, [r0, #0]
 8006c96:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006c98:	f7ff ff64 	bl	8006b64 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006ca8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006caa:	2002      	movs	r0, #2
}
 8006cac:	4770      	bx	lr

08006cae <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006cae:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006cb0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d01d      	beq.n	8006cf4 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006cb8:	4604      	mov	r4, r0
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006cc0:	2324      	movs	r3, #36	; 0x24
 8006cc2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc6:	6803      	ldr	r3, [r0, #0]
 8006cc8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	f022 0201 	bic.w	r2, r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cd2:	6802      	ldr	r2, [r0, #0]
 8006cd4:	6893      	ldr	r3, [r2, #8]
 8006cd6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006cda:	4319      	orrs	r1, r3
 8006cdc:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006cde:	f7ff ff41 	bl	8006b64 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006ce6:	2320      	movs	r3, #32
 8006ce8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006cec:	2000      	movs	r0, #0
 8006cee:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006cf4:	2002      	movs	r0, #2
 8006cf6:	e7fc      	b.n	8006cf2 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006cf8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006cf8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006cfa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d01d      	beq.n	8006d3e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006d02:	4604      	mov	r4, r0
 8006d04:	2301      	movs	r3, #1
 8006d06:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006d0a:	2324      	movs	r3, #36	; 0x24
 8006d0c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d10:	6803      	ldr	r3, [r0, #0]
 8006d12:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d1c:	6802      	ldr	r2, [r0, #0]
 8006d1e:	6893      	ldr	r3, [r2, #8]
 8006d20:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006d24:	4319      	orrs	r1, r3
 8006d26:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006d28:	f7ff ff1c 	bl	8006b64 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d30:	2320      	movs	r3, #32
 8006d32:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d36:	2000      	movs	r0, #0
 8006d38:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006d3c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006d3e:	2002      	movs	r0, #2
 8006d40:	e7fc      	b.n	8006d3c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006d44 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006d44:	2804      	cmp	r0, #4
 8006d46:	d807      	bhi.n	8006d58 <LmHandlerPackageIsInitialized+0x14>
{
 8006d48:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006d4a:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <LmHandlerPackageIsInitialized+0x1c>)
 8006d4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	b11b      	cbz	r3, 8006d5c <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006d54:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006d56:	bd08      	pop	{r3, pc}
        return false;
 8006d58:	2000      	movs	r0, #0
}
 8006d5a:	4770      	bx	lr
        return false;
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	e7fa      	b.n	8006d56 <LmHandlerPackageIsInitialized+0x12>
 8006d60:	20000574 	.word	0x20000574

08006d64 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	4605      	mov	r5, r0
 8006d68:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006d6a:	2400      	movs	r4, #0
 8006d6c:	e005      	b.n	8006d7a <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	b10b      	cbz	r3, 8006d76 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006d72:	4630      	mov	r0, r6
 8006d74:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006d76:	3401      	adds	r4, #1
 8006d78:	b264      	sxtb	r4, r4
 8006d7a:	2c04      	cmp	r4, #4
 8006d7c:	dc24      	bgt.n	8006dc8 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8006d7e:	4b13      	ldr	r3, [pc, #76]	; (8006dcc <LmHandlerPackagesNotify+0x68>)
 8006d80:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0f6      	beq.n	8006d76 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8006d88:	2d03      	cmp	r5, #3
 8006d8a:	d8f4      	bhi.n	8006d76 <LmHandlerPackagesNotify+0x12>
 8006d8c:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <LmHandlerPackagesNotify+0x30>)
 8006d8e:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006d6f 	.word	0x08006d6f
 8006d98:	08006da5 	.word	0x08006da5
 8006d9c:	08006db1 	.word	0x08006db1
 8006da0:	08006dbd 	.word	0x08006dbd
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0e5      	beq.n	8006d76 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006daa:	4630      	mov	r0, r6
 8006dac:	4798      	blx	r3
 8006dae:	e7e2      	b.n	8006d76 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0df      	beq.n	8006d76 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006db6:	4630      	mov	r0, r6
 8006db8:	4798      	blx	r3
 8006dba:	e7dc      	b.n	8006d76 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0d9      	beq.n	8006d76 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	4798      	blx	r3
 8006dc6:	e7d6      	b.n	8006d76 <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000574 	.word	0x20000574

08006dd0 <MlmeIndication>:
{
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006dd4:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <MlmeIndication+0x58>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006dda:	7842      	ldrb	r2, [r0, #1]
 8006ddc:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8006dde:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006de2:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8006de4:	f9b1 2000 	ldrsh.w	r2, [r1]
 8006de8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8006dea:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8006dee:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8006df0:	78ca      	ldrb	r2, [r1, #3]
 8006df2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8006df4:	6842      	ldr	r2, [r0, #4]
 8006df6:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 8006df8:	7803      	ldrb	r3, [r0, #0]
 8006dfa:	2b0a      	cmp	r3, #10
 8006dfc:	d007      	beq.n	8006e0e <MlmeIndication+0x3e>
 8006dfe:	2b0e      	cmp	r3, #14
 8006e00:	d005      	beq.n	8006e0e <MlmeIndication+0x3e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006e02:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <MlmeIndication+0x5c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4907      	ldr	r1, [pc, #28]	; (8006e28 <MlmeIndication+0x58>)
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8006e0e:	4621      	mov	r1, r4
 8006e10:	2003      	movs	r0, #3
 8006e12:	f7ff ffa7 	bl	8006d64 <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 8006e16:	7823      	ldrb	r3, [r4, #0]
 8006e18:	2b06      	cmp	r3, #6
 8006e1a:	d000      	beq.n	8006e1e <MlmeIndication+0x4e>
}
 8006e1c:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 8006e1e:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <MlmeIndication+0x60>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
}
 8006e24:	e7fa      	b.n	8006e1c <MlmeIndication+0x4c>
 8006e26:	bf00      	nop
 8006e28:	20000098 	.word	0x20000098
 8006e2c:	20000570 	.word	0x20000570
 8006e30:	2000056c 	.word	0x2000056c

08006e34 <McpsConfirm>:
{
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006e38:	480c      	ldr	r0, [pc, #48]	; (8006e6c <McpsConfirm+0x38>)
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006e3e:	7863      	ldrb	r3, [r4, #1]
 8006e40:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006e42:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006e46:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006e48:	68e3      	ldr	r3, [r4, #12]
 8006e4a:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006e4c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8006e50:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8006e52:	6923      	ldr	r3, [r4, #16]
 8006e54:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006e56:	7923      	ldrb	r3, [r4, #4]
 8006e58:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <McpsConfirm+0x3c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006e62:	4621      	mov	r1, r4
 8006e64:	2000      	movs	r0, #0
 8006e66:	f7ff ff7d 	bl	8006d64 <LmHandlerPackagesNotify>
}
 8006e6a:	bd10      	pop	{r4, pc}
 8006e6c:	200000ac 	.word	0x200000ac
 8006e70:	20000570 	.word	0x20000570

08006e74 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 8006e74:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006e76:	2400      	movs	r4, #0
 8006e78:	e001      	b.n	8006e7e <LmHandlerPackageIsTxPending+0xa>
 8006e7a:	3401      	adds	r4, #1
 8006e7c:	b264      	sxtb	r4, r4
 8006e7e:	2c04      	cmp	r4, #4
 8006e80:	dc0a      	bgt.n	8006e98 <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 8006e82:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <LmHandlerPackageIsTxPending+0x2c>)
 8006e84:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0f6      	beq.n	8006e7a <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	4798      	blx	r3
 8006e90:	4603      	mov	r3, r0
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0f1      	beq.n	8006e7a <LmHandlerPackageIsTxPending+0x6>
 8006e96:	e000      	b.n	8006e9a <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000574 	.word	0x20000574

08006ea4 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8006ea4:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006ea6:	2400      	movs	r4, #0
 8006ea8:	e001      	b.n	8006eae <LmHandlerPackagesProcess+0xa>
 8006eaa:	3401      	adds	r4, #1
 8006eac:	b264      	sxtb	r4, r4
 8006eae:	2c04      	cmp	r4, #4
 8006eb0:	dc12      	bgt.n	8006ed8 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006eb2:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <LmHandlerPackagesProcess+0x38>)
 8006eb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0f6      	beq.n	8006eaa <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006ebc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f3      	beq.n	8006eaa <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8006ec2:	b2e0      	uxtb	r0, r4
 8006ec4:	f7ff ff3e 	bl	8006d44 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d0ee      	beq.n	8006eaa <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8006ecc:	4b03      	ldr	r3, [pc, #12]	; (8006edc <LmHandlerPackagesProcess+0x38>)
 8006ece:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	4798      	blx	r3
 8006ed6:	e7e8      	b.n	8006eaa <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	20000574 	.word	0x20000574

08006ee0 <LmHandlerJoin>:
{
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	b08e      	sub	sp, #56	; 0x38
 8006ee4:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006eec:	4b26      	ldr	r3, [pc, #152]	; (8006f88 <LmHandlerJoin+0xa8>)
 8006eee:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8006ef2:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 8006ef6:	2802      	cmp	r0, #2
 8006ef8:	d021      	beq.n	8006f3e <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006efa:	2101      	movs	r1, #1
 8006efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8006f00:	4b22      	ldr	r3, [pc, #136]	; (8006f8c <LmHandlerJoin+0xac>)
 8006f02:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8006f04:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006f06:	2100      	movs	r1, #0
 8006f08:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 8006f0a:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 8006f0c:	4b20      	ldr	r3, [pc, #128]	; (8006f90 <LmHandlerJoin+0xb0>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	b1f3      	cbz	r3, 8006f50 <LmHandlerJoin+0x70>
        LoRaMacStart();
 8006f12:	f003 fa4d 	bl	800a3b0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006f1c:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006f20:	4668      	mov	r0, sp
 8006f22:	f003 fc4d 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 8006f26:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <LmHandlerJoin+0xb0>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <LmHandlerJoin+0x4e>
 8006f2c:	b114      	cbz	r4, 8006f34 <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 8006f2e:	a809      	add	r0, sp, #36	; 0x24
 8006f30:	f003 fecc 	bl	800accc <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8006f34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f36:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <LmHandlerJoin+0xb4>)
 8006f38:	601a      	str	r2, [r3, #0]
}
 8006f3a:	b00e      	add	sp, #56	; 0x38
 8006f3c:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <LmHandlerJoin+0xac>)
 8006f46:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8006f48:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 8006f4a:	f003 fa31 	bl	800a3b0 <LoRaMacStart>
 8006f4e:	e7ea      	b.n	8006f26 <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8006f50:	231f      	movs	r3, #31
 8006f52:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8006f56:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006f5a:	4668      	mov	r0, sp
 8006f5c:	f003 fc30 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8006f60:	2320      	movs	r3, #32
 8006f62:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8006f66:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <LmHandlerJoin+0xa8>)
 8006f68:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006f6c:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006f70:	4668      	mov	r0, sp
 8006f72:	f003 fc25 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8006f76:	2329      	movs	r3, #41	; 0x29
 8006f78:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <LmHandlerJoin+0xb8>)
 8006f7e:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8006f80:	4668      	mov	r0, sp
 8006f82:	f003 fc1d 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
 8006f86:	e7c4      	b.n	8006f12 <LmHandlerJoin+0x32>
 8006f88:	20000588 	.word	0x20000588
 8006f8c:	20000090 	.word	0x20000090
 8006f90:	20000566 	.word	0x20000566
 8006f94:	20000568 	.word	0x20000568
 8006f98:	01000400 	.word	0x01000400

08006f9c <LmHandlerDeviceTimeReq>:
{
 8006f9c:	b500      	push	{lr}
 8006f9e:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8006fa0:	2309      	movs	r3, #9
 8006fa2:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8006fa6:	a801      	add	r0, sp, #4
 8006fa8:	f003 fe90 	bl	800accc <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8006fac:	9a05      	ldr	r2, [sp, #20]
 8006fae:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <LmHandlerDeviceTimeReq+0x24>)
 8006fb0:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8006fb2:	b910      	cbnz	r0, 8006fba <LmHandlerDeviceTimeReq+0x1e>
}
 8006fb4:	b007      	add	sp, #28
 8006fb6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8006fba:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbe:	e7f9      	b.n	8006fb4 <LmHandlerDeviceTimeReq+0x18>
 8006fc0:	20000568 	.word	0x20000568

08006fc4 <LmHandlerGetDutyCycleWaitTime>:
}
 8006fc4:	4b01      	ldr	r3, [pc, #4]	; (8006fcc <LmHandlerGetDutyCycleWaitTime+0x8>)
 8006fc6:	6818      	ldr	r0, [r3, #0]
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20000568 	.word	0x20000568

08006fd0 <LmHandlerJoinStatus>:
{
 8006fd0:	b500      	push	{lr}
 8006fd2:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8006fda:	a801      	add	r0, sp, #4
 8006fdc:	f003 faa2 	bl	800a524 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8006fe0:	b920      	cbnz	r0, 8006fec <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006fe2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006fe6:	b110      	cbz	r0, 8006fee <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8006fe8:	2001      	movs	r0, #1
 8006fea:	e000      	b.n	8006fee <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8006fec:	2000      	movs	r0, #0
}
 8006fee:	b00b      	add	sp, #44	; 0x2c
 8006ff0:	f85d fb04 	ldr.w	pc, [sp], #4

08006ff4 <LmHandlerSend>:
{
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 8006ffe:	f002 ff91 	bl	8009f24 <LoRaMacIsBusy>
 8007002:	2800      	cmp	r0, #0
 8007004:	d164      	bne.n	80070d0 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007006:	f7ff ffe3 	bl	8006fd0 <LmHandlerJoinStatus>
 800700a:	2801      	cmp	r0, #1
 800700c:	d137      	bne.n	800707e <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 800700e:	4b33      	ldr	r3, [pc, #204]	; (80070dc <LmHandlerSend+0xe8>)
 8007010:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8007012:	3d00      	subs	r5, #0
 8007014:	bf18      	it	ne
 8007016:	2501      	movne	r5, #1
 8007018:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800701c:	4b30      	ldr	r3, [pc, #192]	; (80070e0 <LmHandlerSend+0xec>)
 800701e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007022:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007026:	4669      	mov	r1, sp
 8007028:	7860      	ldrb	r0, [r4, #1]
 800702a:	f003 fa0f 	bl	800a44c <LoRaMacQueryTxPossible>
 800702e:	b370      	cbz	r0, 800708e <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007030:	2300      	movs	r3, #0
 8007032:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007036:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007038:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800703c:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8007040:	4b26      	ldr	r3, [pc, #152]	; (80070dc <LmHandlerSend+0xe8>)
 8007042:	f103 0c10 	add.w	ip, r3, #16
 8007046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800704a:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800704e:	4a24      	ldr	r2, [pc, #144]	; (80070e0 <LmHandlerSend+0xec>)
 8007050:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007054:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007056:	4631      	mov	r1, r6
 8007058:	a801      	add	r0, sp, #4
 800705a:	f003 ff31 	bl	800aec0 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800705e:	9a05      	ldr	r2, [sp, #20]
 8007060:	4b20      	ldr	r3, [pc, #128]	; (80070e4 <LmHandlerSend+0xf0>)
 8007062:	601a      	str	r2, [r3, #0]
    switch (status)
 8007064:	2811      	cmp	r0, #17
 8007066:	d830      	bhi.n	80070ca <LmHandlerSend+0xd6>
 8007068:	e8df f000 	tbb	[pc, r0]
 800706c:	2f2f1c21 	.word	0x2f2f1c21
 8007070:	352f2f2f 	.word	0x352f2f2f
 8007074:	2c2f2f2f 	.word	0x2c2f2f2f
 8007078:	1c1c2f2f 	.word	0x1c1c2f2f
 800707c:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800707e:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <LmHandlerSend+0xf4>)
 8007080:	79d9      	ldrb	r1, [r3, #7]
 8007082:	7998      	ldrb	r0, [r3, #6]
 8007084:	f7ff ff2c 	bl	8006ee0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007088:	f06f 0502 	mvn.w	r5, #2
 800708c:	e00c      	b.n	80070a8 <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800708e:	7823      	ldrb	r3, [r4, #0]
 8007090:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007094:	7863      	ldrb	r3, [r4, #1]
 8007096:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800709a:	6863      	ldr	r3, [r4, #4]
 800709c:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800709e:	f04f 35ff 	mov.w	r5, #4294967295
 80070a2:	e7cd      	b.n	8007040 <LmHandlerSend+0x4c>
    switch (status)
 80070a4:	f06f 0501 	mvn.w	r5, #1
}
 80070a8:	4628      	mov	r0, r5
 80070aa:	b006      	add	sp, #24
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 80070ae:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <LmHandlerSend+0xf8>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 80070b4:	f115 0f07 	cmn.w	r5, #7
 80070b8:	d0f6      	beq.n	80070a8 <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80070ba:	2500      	movs	r5, #0
 80070bc:	e7f4      	b.n	80070a8 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80070be:	f06f 0504 	mvn.w	r5, #4
            break;
 80070c2:	e7f1      	b.n	80070a8 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80070c4:	f06f 0505 	mvn.w	r5, #5
            break;
 80070c8:	e7ee      	b.n	80070a8 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80070ca:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80070ce:	e7eb      	b.n	80070a8 <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80070d0:	f06f 0501 	mvn.w	r5, #1
 80070d4:	e7e8      	b.n	80070a8 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80070d6:	f06f 0502 	mvn.w	r5, #2
 80070da:	e7e5      	b.n	80070a8 <LmHandlerSend+0xb4>
 80070dc:	200000ac 	.word	0x200000ac
 80070e0:	20000588 	.word	0x20000588
 80070e4:	20000568 	.word	0x20000568
 80070e8:	20000090 	.word	0x20000090
 80070ec:	2000056c 	.word	0x2000056c

080070f0 <LmHandlerProcess>:
{
 80070f0:	b500      	push	{lr}
 80070f2:	b083      	sub	sp, #12
    LoRaMacProcess( );
 80070f4:	f002 ff30 	bl	8009f58 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 80070f8:	f7ff fed4 	bl	8006ea4 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 80070fc:	f7ff feba 	bl	8006e74 <LmHandlerPackageIsTxPending>
 8007100:	b910      	cbnz	r0, 8007108 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8007102:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <LmHandlerProcess+0x40>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b913      	cbnz	r3, 800710e <LmHandlerProcess+0x1e>
}
 8007108:	b003      	add	sp, #12
 800710a:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800710e:	2200      	movs	r2, #0
 8007110:	f88d 2000 	strb.w	r2, [sp]
 8007114:	f88d 2001 	strb.w	r2, [sp, #1]
 8007118:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800711a:	4b06      	ldr	r3, [pc, #24]	; (8007134 <LmHandlerProcess+0x44>)
 800711c:	78d9      	ldrb	r1, [r3, #3]
 800711e:	4668      	mov	r0, sp
 8007120:	f7ff ff68 	bl	8006ff4 <LmHandlerSend>
 8007124:	2800      	cmp	r0, #0
 8007126:	d1ef      	bne.n	8007108 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8007128:	4b01      	ldr	r3, [pc, #4]	; (8007130 <LmHandlerProcess+0x40>)
 800712a:	2200      	movs	r2, #0
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e7eb      	b.n	8007108 <LmHandlerProcess+0x18>
 8007130:	2000056c 	.word	0x2000056c
 8007134:	20000588 	.word	0x20000588

08007138 <LmHandlerRequestClass>:
{
 8007138:	b510      	push	{r4, lr}
 800713a:	b08a      	sub	sp, #40	; 0x28
 800713c:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800713e:	f002 fef1 	bl	8009f24 <LoRaMacIsBusy>
 8007142:	2800      	cmp	r0, #0
 8007144:	d136      	bne.n	80071b4 <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8007146:	f7ff ff43 	bl	8006fd0 <LmHandlerJoinStatus>
 800714a:	2801      	cmp	r0, #1
 800714c:	d135      	bne.n	80071ba <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 800714e:	2300      	movs	r3, #0
 8007150:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007154:	a801      	add	r0, sp, #4
 8007156:	f003 f9e5 	bl	800a524 <LoRaMacMibGetRequestConfirm>
 800715a:	bb88      	cbnz	r0, 80071c0 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 800715c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 8007160:	42a3      	cmp	r3, r4
 8007162:	d030      	beq.n	80071c6 <LmHandlerRequestClass+0x8e>
        switch( newClass )
 8007164:	2c01      	cmp	r4, #1
 8007166:	d030      	beq.n	80071ca <LmHandlerRequestClass+0x92>
 8007168:	2c02      	cmp	r4, #2
 800716a:	d014      	beq.n	8007196 <LmHandlerRequestClass+0x5e>
 800716c:	b114      	cbz	r4, 8007174 <LmHandlerRequestClass+0x3c>
 800716e:	2000      	movs	r0, #0
}
 8007170:	b00a      	add	sp, #40	; 0x28
 8007172:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8007174:	b90b      	cbnz	r3, 800717a <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007176:	2000      	movs	r0, #0
 8007178:	e7fa      	b.n	8007170 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 800717a:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800717e:	a801      	add	r0, sp, #4
 8007180:	f003 fb1e 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
 8007184:	bb20      	cbnz	r0, 80071d0 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007186:	4b19      	ldr	r3, [pc, #100]	; (80071ec <LmHandlerRequestClass+0xb4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	b31b      	cbz	r3, 80071d6 <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800718e:	4620      	mov	r0, r4
 8007190:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007192:	2000      	movs	r0, #0
 8007194:	e7ec      	b.n	8007170 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 8007196:	bb03      	cbnz	r3, 80071da <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 8007198:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800719c:	a801      	add	r0, sp, #4
 800719e:	f003 fb0f 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
 80071a2:	b9e8      	cbnz	r0, 80071e0 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80071a4:	4b11      	ldr	r3, [pc, #68]	; (80071ec <LmHandlerRequestClass+0xb4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	b1e3      	cbz	r3, 80071e6 <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80071ac:	4620      	mov	r0, r4
 80071ae:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071b0:	2000      	movs	r0, #0
 80071b2:	e7dd      	b.n	8007170 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80071b4:	f06f 0001 	mvn.w	r0, #1
 80071b8:	e7da      	b.n	8007170 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80071ba:	f06f 0002 	mvn.w	r0, #2
 80071be:	e7d7      	b.n	8007170 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	e7d4      	b.n	8007170 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071c6:	2000      	movs	r0, #0
 80071c8:	e7d2      	b.n	8007170 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 80071ca:	f04f 30ff 	mov.w	r0, #4294967295
 80071ce:	e7cf      	b.n	8007170 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80071d0:	f04f 30ff 	mov.w	r0, #4294967295
 80071d4:	e7cc      	b.n	8007170 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071d6:	2000      	movs	r0, #0
 80071d8:	e7ca      	b.n	8007170 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80071da:	f04f 30ff 	mov.w	r0, #4294967295
 80071de:	e7c7      	b.n	8007170 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	e7c4      	b.n	8007170 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071e6:	2000      	movs	r0, #0
 80071e8:	e7c2      	b.n	8007170 <LmHandlerRequestClass+0x38>
 80071ea:	bf00      	nop
 80071ec:	20000570 	.word	0x20000570

080071f0 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 80071f0:	b170      	cbz	r0, 8007210 <LmHandlerGetCurrentClass+0x20>
{
 80071f2:	b510      	push	{r4, lr}
 80071f4:	b08a      	sub	sp, #40	; 0x28
 80071f6:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 80071f8:	2300      	movs	r3, #0
 80071fa:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 80071fe:	a801      	add	r0, sp, #4
 8007200:	f003 f990 	bl	800a524 <LoRaMacMibGetRequestConfirm>
 8007204:	b938      	cbnz	r0, 8007216 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8007206:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800720a:	7023      	strb	r3, [r4, #0]
}
 800720c:	b00a      	add	sp, #40	; 0x28
 800720e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007210:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007214:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007216:	f04f 30ff 	mov.w	r0, #4294967295
 800721a:	e7f7      	b.n	800720c <LmHandlerGetCurrentClass+0x1c>

0800721c <McpsIndication>:
{
 800721c:	b530      	push	{r4, r5, lr}
 800721e:	b085      	sub	sp, #20
 8007220:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8007222:	2200      	movs	r2, #0
 8007224:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8007228:	491d      	ldr	r1, [pc, #116]	; (80072a0 <McpsIndication+0x84>)
 800722a:	2201      	movs	r2, #1
 800722c:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 800722e:	7842      	ldrb	r2, [r0, #1]
 8007230:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007232:	bb5a      	cbnz	r2, 800728c <McpsIndication+0x70>
 8007234:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007236:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800723a:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800723c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007240:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 8007242:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8007246:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007248:	78db      	ldrb	r3, [r3, #3]
 800724a:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800724c:	6903      	ldr	r3, [r0, #16]
 800724e:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8007250:	78c3      	ldrb	r3, [r0, #3]
 8007252:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8007256:	7b03      	ldrb	r3, [r0, #12]
 8007258:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800725c:	6883      	ldr	r3, [r0, #8]
 800725e:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8007260:	4d10      	ldr	r5, [pc, #64]	; (80072a4 <McpsIndication+0x88>)
 8007262:	682b      	ldr	r3, [r5, #0]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	a802      	add	r0, sp, #8
 8007268:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	b113      	cbz	r3, 8007276 <McpsIndication+0x5a>
 8007270:	7e22      	ldrb	r2, [r4, #24]
 8007272:	b102      	cbz	r2, 8007276 <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8007274:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8007276:	4621      	mov	r1, r4
 8007278:	2001      	movs	r0, #1
 800727a:	f7ff fd73 	bl	8006d64 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800727e:	f10d 0007 	add.w	r0, sp, #7
 8007282:	f7ff ffb5 	bl	80071f0 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 8007286:	7963      	ldrb	r3, [r4, #5]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d001      	beq.n	8007290 <McpsIndication+0x74>
}
 800728c:	b005      	add	sp, #20
 800728e:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 8007290:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f9      	bne.n	800728c <McpsIndication+0x70>
        IsUplinkTxPending = true;
 8007298:	4b03      	ldr	r3, [pc, #12]	; (80072a8 <McpsIndication+0x8c>)
 800729a:	2201      	movs	r2, #1
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	e7f5      	b.n	800728c <McpsIndication+0x70>
 80072a0:	20000098 	.word	0x20000098
 80072a4:	20000570 	.word	0x20000570
 80072a8:	2000056c 	.word	0x2000056c

080072ac <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 80072ac:	b180      	cbz	r0, 80072d0 <LmHandlerGetTxDatarate+0x24>
{
 80072ae:	b510      	push	{r4, lr}
 80072b0:	b08a      	sub	sp, #40	; 0x28
 80072b2:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80072b4:	2320      	movs	r3, #32
 80072b6:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 80072ba:	a801      	add	r0, sp, #4
 80072bc:	f003 f932 	bl	800a524 <LoRaMacMibGetRequestConfirm>
 80072c0:	b948      	cbnz	r0, 80072d6 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80072c2:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 80072c6:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80072c8:	4a04      	ldr	r2, [pc, #16]	; (80072dc <LmHandlerGetTxDatarate+0x30>)
 80072ca:	7113      	strb	r3, [r2, #4]
}
 80072cc:	b00a      	add	sp, #40	; 0x28
 80072ce:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80072d4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80072d6:	f04f 30ff 	mov.w	r0, #4294967295
 80072da:	e7f7      	b.n	80072cc <LmHandlerGetTxDatarate+0x20>
 80072dc:	20000588 	.word	0x20000588

080072e0 <MlmeConfirm>:
{
 80072e0:	b510      	push	{r4, lr}
 80072e2:	b08a      	sub	sp, #40	; 0x28
 80072e4:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80072e6:	4824      	ldr	r0, [pc, #144]	; (8007378 <MlmeConfirm+0x98>)
 80072e8:	2300      	movs	r3, #0
 80072ea:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 80072ec:	7863      	ldrb	r3, [r4, #1]
 80072ee:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80072f0:	4b22      	ldr	r3, [pc, #136]	; (800737c <MlmeConfirm+0x9c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f6:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80072f8:	4621      	mov	r1, r4
 80072fa:	2002      	movs	r0, #2
 80072fc:	f7ff fd32 	bl	8006d64 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007300:	7823      	ldrb	r3, [r4, #0]
 8007302:	2b04      	cmp	r3, #4
 8007304:	d029      	beq.n	800735a <MlmeConfirm+0x7a>
 8007306:	2b0b      	cmp	r3, #11
 8007308:	d02f      	beq.n	800736a <MlmeConfirm+0x8a>
 800730a:	2b01      	cmp	r3, #1
 800730c:	d001      	beq.n	8007312 <MlmeConfirm+0x32>
}
 800730e:	b00a      	add	sp, #40	; 0x28
 8007310:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8007312:	2306      	movs	r3, #6
 8007314:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007318:	a801      	add	r0, sp, #4
 800731a:	f003 f903 	bl	800a524 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800731e:	9a02      	ldr	r2, [sp, #8]
 8007320:	4b17      	ldr	r3, [pc, #92]	; (8007380 <MlmeConfirm+0xa0>)
 8007322:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007324:	4817      	ldr	r0, [pc, #92]	; (8007384 <MlmeConfirm+0xa4>)
 8007326:	f7ff ffc1 	bl	80072ac <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800732a:	7863      	ldrb	r3, [r4, #1]
 800732c:	b16b      	cbz	r3, 800734a <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800732e:	4b16      	ldr	r3, [pc, #88]	; (8007388 <MlmeConfirm+0xa8>)
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007334:	4b11      	ldr	r3, [pc, #68]	; (800737c <MlmeConfirm+0x9c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	4813      	ldr	r0, [pc, #76]	; (8007388 <MlmeConfirm+0xa8>)
 800733c:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800733e:	7863      	ldrb	r3, [r4, #1]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e4      	bne.n	800730e <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 8007344:	f006 ffec 	bl	800e320 <SecureElementPrintSessionKeys>
        break;
 8007348:	e7e1      	b.n	800730e <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <MlmeConfirm+0xa8>)
 800734c:	2200      	movs	r2, #0
 800734e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007350:	4b0e      	ldr	r3, [pc, #56]	; (800738c <MlmeConfirm+0xac>)
 8007352:	7858      	ldrb	r0, [r3, #1]
 8007354:	f7ff fef0 	bl	8007138 <LmHandlerRequestClass>
 8007358:	e7ec      	b.n	8007334 <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <MlmeConfirm+0xb0>)
 800735c:	2201      	movs	r2, #1
 800735e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007360:	7a22      	ldrb	r2, [r4, #8]
 8007362:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007364:	7a62      	ldrb	r2, [r4, #9]
 8007366:	74da      	strb	r2, [r3, #19]
        break;
 8007368:	e7d1      	b.n	800730e <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800736a:	7863      	ldrb	r3, [r4, #1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0ce      	beq.n	800730e <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 8007370:	f7ff fe14 	bl	8006f9c <LmHandlerDeviceTimeReq>
}
 8007374:	e7cb      	b.n	800730e <MlmeConfirm+0x2e>
 8007376:	bf00      	nop
 8007378:	200000ac 	.word	0x200000ac
 800737c:	20000570 	.word	0x20000570
 8007380:	20000078 	.word	0x20000078
 8007384:	20000094 	.word	0x20000094
 8007388:	20000090 	.word	0x20000090
 800738c:	20000588 	.word	0x20000588
 8007390:	20000098 	.word	0x20000098

08007394 <LmHandlerSetSystemMaxRxError>:
{
 8007394:	b500      	push	{lr}
 8007396:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007398:	2323      	movs	r3, #35	; 0x23
 800739a:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800739e:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80073a0:	a801      	add	r0, sp, #4
 80073a2:	f003 fa0d 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
 80073a6:	b910      	cbnz	r0, 80073ae <LmHandlerSetSystemMaxRxError+0x1a>
}
 80073a8:	b00b      	add	sp, #44	; 0x2c
 80073aa:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80073ae:	f04f 30ff 	mov.w	r0, #4294967295
 80073b2:	e7f9      	b.n	80073a8 <LmHandlerSetSystemMaxRxError+0x14>

080073b4 <LmHandlerConfigure>:
{
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	b090      	sub	sp, #64	; 0x40
 80073b8:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80073ba:	4c78      	ldr	r4, [pc, #480]	; (800759c <LmHandlerConfigure+0x1e8>)
 80073bc:	2214      	movs	r2, #20
 80073be:	4620      	mov	r0, r4
 80073c0:	f009 f8d4 	bl	801056c <UTIL_MEM_cpy_8>
    IsUplinkTxPending = false;
 80073c4:	4b76      	ldr	r3, [pc, #472]	; (80075a0 <LmHandlerConfigure+0x1ec>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 80073ca:	f7fb f9ff 	bl	80027cc <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80073ce:	7822      	ldrb	r2, [r4, #0]
 80073d0:	2301      	movs	r3, #1
 80073d2:	4093      	lsls	r3, r2
 80073d4:	6841      	ldr	r1, [r0, #4]
 80073d6:	420b      	tst	r3, r1
 80073d8:	d106      	bne.n	80073e8 <LmHandlerConfigure+0x34>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80073da:	4b72      	ldr	r3, [pc, #456]	; (80075a4 <LmHandlerConfigure+0x1f0>)
 80073dc:	2201      	movs	r2, #1
 80073de:	2100      	movs	r1, #0
 80073e0:	4608      	mov	r0, r1
 80073e2:	f008 ffad 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 80073e6:	e7fe      	b.n	80073e6 <LmHandlerConfigure+0x32>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80073e8:	496f      	ldr	r1, [pc, #444]	; (80075a8 <LmHandlerConfigure+0x1f4>)
 80073ea:	4870      	ldr	r0, [pc, #448]	; (80075ac <LmHandlerConfigure+0x1f8>)
 80073ec:	f002 fdfe 	bl	8009fec <LoRaMacInitialization>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f040 80cf 	bne.w	8007594 <LmHandlerConfigure+0x1e0>
    mibReq.Type = MIB_NVM_CTXS;
 80073f6:	2327      	movs	r3, #39	; 0x27
 80073f8:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80073fc:	a807      	add	r0, sp, #28
 80073fe:	f003 f9df 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
 8007402:	2800      	cmp	r0, #0
 8007404:	f040 8087 	bne.w	8007516 <LmHandlerConfigure+0x162>
        CtxRestoreDone = true;
 8007408:	4b69      	ldr	r3, [pc, #420]	; (80075b0 <LmHandlerConfigure+0x1fc>)
 800740a:	2201      	movs	r2, #1
 800740c:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 800740e:	4b68      	ldr	r3, [pc, #416]	; (80075b0 <LmHandlerConfigure+0x1fc>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80a8 	beq.w	8007568 <LmHandlerConfigure+0x1b4>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8007418:	4b66      	ldr	r3, [pc, #408]	; (80075b4 <LmHandlerConfigure+0x200>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	b10b      	cbz	r3, 8007424 <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007420:	2000      	movs	r0, #0
 8007422:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 8007424:	2306      	movs	r3, #6
 8007426:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800742a:	a807      	add	r0, sp, #28
 800742c:	f003 f87a 	bl	800a524 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007430:	9a08      	ldr	r2, [sp, #32]
 8007432:	4b61      	ldr	r3, [pc, #388]	; (80075b8 <LmHandlerConfigure+0x204>)
 8007434:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 8007436:	2327      	movs	r3, #39	; 0x27
 8007438:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800743c:	a807      	add	r0, sp, #28
 800743e:	f003 f871 	bl	800a524 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 8007442:	9a08      	ldr	r2, [sp, #32]
 8007444:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 8007448:	4b54      	ldr	r3, [pc, #336]	; (800759c <LmHandlerConfigure+0x1e8>)
 800744a:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800744c:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8007450:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8007452:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8007456:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 8007458:	2502      	movs	r5, #2
 800745a:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800745e:	a807      	add	r0, sp, #28
 8007460:	f003 f860 	bl	800a524 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8007464:	4c54      	ldr	r4, [pc, #336]	; (80075b8 <LmHandlerConfigure+0x204>)
 8007466:	2208      	movs	r2, #8
 8007468:	9908      	ldr	r1, [sp, #32]
 800746a:	4620      	mov	r0, r4
 800746c:	f007 f8bf 	bl	800e5ee <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8007470:	2303      	movs	r3, #3
 8007472:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007476:	a807      	add	r0, sp, #28
 8007478:	f003 f854 	bl	800a524 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800747c:	2208      	movs	r2, #8
 800747e:	9908      	ldr	r1, [sp, #32]
 8007480:	18a0      	adds	r0, r4, r2
 8007482:	f007 f8b4 	bl	800e5ee <memcpy1>
    SecureElementPrintKeys();
 8007486:	f006 feeb 	bl	800e260 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800748a:	7de3      	ldrb	r3, [r4, #23]
 800748c:	7da2      	ldrb	r2, [r4, #22]
 800748e:	7d61      	ldrb	r1, [r4, #21]
 8007490:	7d20      	ldrb	r0, [r4, #20]
 8007492:	9003      	str	r0, [sp, #12]
 8007494:	9102      	str	r1, [sp, #8]
 8007496:	9201      	str	r2, [sp, #4]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	4b48      	ldr	r3, [pc, #288]	; (80075bc <LmHandlerConfigure+0x208>)
 800749c:	2200      	movs	r2, #0
 800749e:	4611      	mov	r1, r2
 80074a0:	4628      	mov	r0, r5
 80074a2:	f008 ff4d 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80074a6:	260f      	movs	r6, #15
 80074a8:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80074b2:	a807      	add	r0, sp, #28
 80074b4:	f003 f984 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80074b8:	2310      	movs	r3, #16
 80074ba:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80074be:	2500      	movs	r5, #0
 80074c0:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80074c4:	a807      	add	r0, sp, #28
 80074c6:	f003 f97b 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80074ca:	2304      	movs	r3, #4
 80074cc:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80074d0:	4c32      	ldr	r4, [pc, #200]	; (800759c <LmHandlerConfigure+0x1e8>)
 80074d2:	78a3      	ldrb	r3, [r4, #2]
 80074d4:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80074d8:	a807      	add	r0, sp, #28
 80074da:	f003 f971 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 80074de:	2338      	movs	r3, #56	; 0x38
 80074e0:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80074e8:	a807      	add	r0, sp, #28
 80074ea:	f003 f969 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80074ee:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80074f2:	a905      	add	r1, sp, #20
 80074f4:	7820      	ldrb	r0, [r4, #0]
 80074f6:	f004 fe69 	bl	800c1cc <RegionGetPhyParam>
 80074fa:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 80074fc:	1b43      	subs	r3, r0, r5
 80074fe:	bf18      	it	ne
 8007500:	2301      	movne	r3, #1
 8007502:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 8007504:	2014      	movs	r0, #20
 8007506:	f7ff ff45 	bl	8007394 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800750a:	79a0      	ldrb	r0, [r4, #6]
 800750c:	f003 fdc6 	bl	800b09c <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007510:	4628      	mov	r0, r5
}
 8007512:	b010      	add	sp, #64	; 0x40
 8007514:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8007516:	2328      	movs	r3, #40	; 0x28
 8007518:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800751c:	4b25      	ldr	r3, [pc, #148]	; (80075b4 <LmHandlerConfigure+0x200>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	b14b      	cbz	r3, 8007538 <LmHandlerConfigure+0x184>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007524:	a807      	add	r0, sp, #28
 8007526:	f002 fffd 	bl	800a524 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800752a:	4b22      	ldr	r3, [pc, #136]	; (80075b4 <LmHandlerConfigure+0x200>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f240 518c 	movw	r1, #1420	; 0x58c
 8007534:	9808      	ldr	r0, [sp, #32]
 8007536:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8007538:	2327      	movs	r3, #39	; 0x27
 800753a:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800753e:	a807      	add	r0, sp, #28
 8007540:	f003 f93e 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
 8007544:	2800      	cmp	r0, #0
 8007546:	f47f af62 	bne.w	800740e <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800754a:	2301      	movs	r3, #1
 800754c:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007550:	a807      	add	r0, sp, #28
 8007552:	f002 ffe7 	bl	800a524 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 8007556:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f43f af57 	beq.w	800740e <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 8007560:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <LmHandlerConfigure+0x1fc>)
 8007562:	2201      	movs	r2, #1
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	e752      	b.n	800740e <LmHandlerConfigure+0x5a>
        mibReq.Type = MIB_NET_ID;
 8007568:	2305      	movs	r3, #5
 800756a:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800756e:	2300      	movs	r3, #0
 8007570:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8007572:	a807      	add	r0, sp, #28
 8007574:	f003 f924 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8007578:	4b0e      	ldr	r3, [pc, #56]	; (80075b4 <LmHandlerConfigure+0x200>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	4798      	blx	r3
 8007580:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <LmHandlerConfigure+0x204>)
 8007582:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 8007584:	2306      	movs	r3, #6
 8007586:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800758a:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800758c:	a807      	add	r0, sp, #28
 800758e:	f003 f917 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
 8007592:	e761      	b.n	8007458 <LmHandlerConfigure+0xa4>
        return LORAMAC_HANDLER_ERROR;
 8007594:	f04f 30ff 	mov.w	r0, #4294967295
 8007598:	e7bb      	b.n	8007512 <LmHandlerConfigure+0x15e>
 800759a:	bf00      	nop
 800759c:	20000588 	.word	0x20000588
 80075a0:	2000056c 	.word	0x2000056c
 80075a4:	080115e0 	.word	0x080115e0
 80075a8:	200005ac 	.word	0x200005ac
 80075ac:	200005c0 	.word	0x200005c0
 80075b0:	20000566 	.word	0x20000566
 80075b4:	20000570 	.word	0x20000570
 80075b8:	20000078 	.word	0x20000078
 80075bc:	0801162c 	.word	0x0801162c

080075c0 <LmHandlerPackageRegister>:
    switch( id )
 80075c0:	b9f0      	cbnz	r0, 8007600 <LmHandlerPackageRegister+0x40>
{
 80075c2:	b538      	push	{r3, r4, r5, lr}
 80075c4:	460c      	mov	r4, r1
 80075c6:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80075c8:	f000 fb76 	bl	8007cb8 <LmhpCompliancePackageFactory>
    if( package != NULL )
 80075cc:	b1a8      	cbz	r0, 80075fa <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 80075ce:	4a0e      	ldr	r2, [pc, #56]	; (8007608 <LmHandlerPackageRegister+0x48>)
 80075d0:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80075d4:	4a0d      	ldr	r2, [pc, #52]	; (800760c <LmHandlerPackageRegister+0x4c>)
 80075d6:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 80075d8:	4a0d      	ldr	r2, [pc, #52]	; (8007610 <LmHandlerPackageRegister+0x50>)
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80075de:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 80075e0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80075e2:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80075e4:	490b      	ldr	r1, [pc, #44]	; (8007614 <LmHandlerPackageRegister+0x54>)
 80075e6:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80075e8:	6992      	ldr	r2, [r2, #24]
 80075ea:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80075ec:	6843      	ldr	r3, [r0, #4]
 80075ee:	22f2      	movs	r2, #242	; 0xf2
 80075f0:	4909      	ldr	r1, [pc, #36]	; (8007618 <LmHandlerPackageRegister+0x58>)
 80075f2:	4620      	mov	r0, r4
 80075f4:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 80075f6:	2000      	movs	r0, #0
}
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 80075fa:	f04f 30ff 	mov.w	r0, #4294967295
 80075fe:	e7fb      	b.n	80075f8 <LmHandlerPackageRegister+0x38>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20000574 	.word	0x20000574
 800760c:	08006ee1 	.word	0x08006ee1
 8007610:	20000570 	.word	0x20000570
 8007614:	08006f9d 	.word	0x08006f9d
 8007618:	20000474 	.word	0x20000474

0800761c <LmHandlerInit>:
{
 800761c:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 800761e:	4b13      	ldr	r3, [pc, #76]	; (800766c <LmHandlerInit+0x50>)
 8007620:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007622:	4b13      	ldr	r3, [pc, #76]	; (8007670 <LmHandlerInit+0x54>)
 8007624:	4a13      	ldr	r2, [pc, #76]	; (8007674 <LmHandlerInit+0x58>)
 8007626:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007628:	4a13      	ldr	r2, [pc, #76]	; (8007678 <LmHandlerInit+0x5c>)
 800762a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800762c:	4a13      	ldr	r2, [pc, #76]	; (800767c <LmHandlerInit+0x60>)
 800762e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <LmHandlerInit+0x64>)
 8007632:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007634:	6802      	ldr	r2, [r0, #0]
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <LmHandlerInit+0x68>)
 8007638:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800763a:	6842      	ldr	r2, [r0, #4]
 800763c:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800763e:	6882      	ldr	r2, [r0, #8]
 8007640:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007642:	4a11      	ldr	r2, [pc, #68]	; (8007688 <LmHandlerInit+0x6c>)
 8007644:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8007646:	6982      	ldr	r2, [r0, #24]
 8007648:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800764a:	4b10      	ldr	r3, [pc, #64]	; (800768c <LmHandlerInit+0x70>)
 800764c:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800764e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007650:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 8007652:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007654:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 8007656:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007658:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800765a:	4619      	mov	r1, r3
 800765c:	2000      	movs	r0, #0
 800765e:	f7ff ffaf 	bl	80075c0 <LmHandlerPackageRegister>
 8007662:	b900      	cbnz	r0, 8007666 <LmHandlerInit+0x4a>
}
 8007664:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	e7fb      	b.n	8007664 <LmHandlerInit+0x48>
 800766c:	20000570 	.word	0x20000570
 8007670:	200005c0 	.word	0x200005c0
 8007674:	08006e35 	.word	0x08006e35
 8007678:	0800721d 	.word	0x0800721d
 800767c:	080072e1 	.word	0x080072e1
 8007680:	08006dd1 	.word	0x08006dd1
 8007684:	200005ac 	.word	0x200005ac
 8007688:	0800c17d 	.word	0x0800c17d
 800768c:	2000059c 	.word	0x2000059c

08007690 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 8007690:	b161      	cbz	r1, 80076ac <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 8007692:	b118      	cbz	r0, 800769c <LmHandlerGetVersion+0xc>
 8007694:	2801      	cmp	r0, #1
 8007696:	d005      	beq.n	80076a4 <LmHandlerGetVersion+0x14>
 8007698:	2000      	movs	r0, #0
 800769a:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800769c:	4a05      	ldr	r2, [pc, #20]	; (80076b4 <LmHandlerGetVersion+0x24>)
 800769e:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 80076a0:	2000      	movs	r0, #0
            break;
 80076a2:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 80076a4:	4a04      	ldr	r2, [pc, #16]	; (80076b8 <LmHandlerGetVersion+0x28>)
 80076a6:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80076a8:	2000      	movs	r0, #0
            break;
 80076aa:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	01000400 	.word	0x01000400
 80076b8:	02010001 	.word	0x02010001

080076bc <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 80076bc:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 80076be:	f003 fd01 	bl	800b0c4 <LoRaMacDeInitialization>
 80076c2:	b900      	cbnz	r0, 80076c6 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80076c4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80076c6:	f06f 0001 	mvn.w	r0, #1
 80076ca:	e7fb      	b.n	80076c4 <LmHandlerStop+0x8>

080076cc <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 80076cc:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 80076ce:	f002 fe8b 	bl	800a3e8 <LoRaMacHalt>
 80076d2:	b900      	cbnz	r0, 80076d6 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80076d4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80076d6:	f06f 0001 	mvn.w	r0, #1
 80076da:	e7fb      	b.n	80076d4 <LmHandlerHalt+0x8>

080076dc <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80076dc:	b510      	push	{r4, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 80076e0:	f7ff fff4 	bl	80076cc <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 80076e4:	4604      	mov	r4, r0
 80076e6:	b148      	cbz	r0, 80076fc <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 80076e8:	b92c      	cbnz	r4, 80076f6 <LmHandlerNvmDataStore+0x1a>
 80076ea:	4b18      	ldr	r3, [pc, #96]	; (800774c <LmHandlerNvmDataStore+0x70>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	b10b      	cbz	r3, 80076f6 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80076f2:	2001      	movs	r0, #1
 80076f4:	4798      	blx	r3
    }

    return lmhStatus;
}
 80076f6:	4620      	mov	r0, r4
 80076f8:	b00a      	add	sp, #40	; 0x28
 80076fa:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 80076fc:	f004 fd46 	bl	800c18c <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 8007700:	f110 0f02 	cmn.w	r0, #2
 8007704:	d012      	beq.n	800772c <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 8007706:	b9d0      	cbnz	r0, 800773e <LmHandlerNvmDataStore+0x62>
 8007708:	4b10      	ldr	r3, [pc, #64]	; (800774c <LmHandlerNvmDataStore+0x70>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	b1cb      	cbz	r3, 8007744 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 8007710:	2327      	movs	r3, #39	; 0x27
 8007712:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 8007716:	a801      	add	r0, sp, #4
 8007718:	f002 ff04 	bl	800a524 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800771c:	4b0b      	ldr	r3, [pc, #44]	; (800774c <LmHandlerNvmDataStore+0x70>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 8007726:	9802      	ldr	r0, [sp, #8]
 8007728:	4798      	blx	r3
 800772a:	e001      	b.n	8007730 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800772c:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007730:	f004 fd3c 	bl	800c1ac <NvmDataMgmtStoreEnd>
 8007734:	2800      	cmp	r0, #0
 8007736:	d0d7      	beq.n	80076e8 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007738:	f04f 34ff 	mov.w	r4, #4294967295
 800773c:	e7db      	b.n	80076f6 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800773e:	f04f 34ff 	mov.w	r4, #4294967295
 8007742:	e7f5      	b.n	8007730 <LmHandlerNvmDataStore+0x54>
 8007744:	f04f 34ff 	mov.w	r4, #4294967295
 8007748:	e7f2      	b.n	8007730 <LmHandlerNvmDataStore+0x54>
 800774a:	bf00      	nop
 800774c:	20000570 	.word	0x20000570

08007750 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007750:	4b01      	ldr	r3, [pc, #4]	; (8007758 <LmhpComplianceIsInitialized+0x8>)
 8007752:	7818      	ldrb	r0, [r3, #0]
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	200005d4 	.word	0x200005d4

0800775c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800775c:	4b01      	ldr	r3, [pc, #4]	; (8007764 <LmhpComplianceIsTxPending+0x8>)
 800775e:	7858      	ldrb	r0, [r3, #1]
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	200005d4 	.word	0x200005d4

08007768 <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 8007768:	4770      	bx	lr

0800776a <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800776a:	4770      	bx	lr

0800776c <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800776c:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 800776e:	4b03      	ldr	r3, [pc, #12]	; (800777c <OnProcessTimer+0x10>)
 8007770:	2201      	movs	r2, #1
 8007772:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 8007774:	4b02      	ldr	r3, [pc, #8]	; (8007780 <OnProcessTimer+0x14>)
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	4798      	blx	r3
}
 800777a:	bd08      	pop	{r3, pc}
 800777c:	200005d4 	.word	0x200005d4
 8007780:	200000c8 	.word	0x200000c8

08007784 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8007784:	4b8d      	ldr	r3, [pc, #564]	; (80079bc <LmhpComplianceOnMcpsIndication+0x238>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 81fd 	beq.w	8007b88 <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800778e:	78c3      	ldrb	r3, [r0, #3]
 8007790:	b90b      	cbnz	r3, 8007796 <LmhpComplianceOnMcpsIndication+0x12>
 8007792:	7b83      	ldrb	r3, [r0, #14]
 8007794:	b11b      	cbz	r3, 800779e <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8007796:	4a89      	ldr	r2, [pc, #548]	; (80079bc <LmhpComplianceOnMcpsIndication+0x238>)
 8007798:	8a13      	ldrh	r3, [r2, #16]
 800779a:	3301      	adds	r3, #1
 800779c:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800779e:	7b43      	ldrb	r3, [r0, #13]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 81f1 	beq.w	8007b88 <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80077a6:	78c3      	ldrb	r3, [r0, #3]
 80077a8:	2be0      	cmp	r3, #224	; 0xe0
 80077aa:	f040 81ed 	bne.w	8007b88 <LmhpComplianceOnMcpsIndication+0x404>
{
 80077ae:	b570      	push	{r4, r5, r6, lr}
 80077b0:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 80077b2:	4b82      	ldr	r3, [pc, #520]	; (80079bc <LmhpComplianceOnMcpsIndication+0x238>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 80077b8:	6884      	ldr	r4, [r0, #8]
 80077ba:	7823      	ldrb	r3, [r4, #0]
 80077bc:	2b7f      	cmp	r3, #127	; 0x7f
 80077be:	f200 8093 	bhi.w	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
 80077c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80077c6:	0080      	.short	0x0080
 80077c8:	00a600a1 	.word	0x00a600a1
 80077cc:	00b400ac 	.word	0x00b400ac
 80077d0:	00c800c1 	.word	0x00c800c1
 80077d4:	00f200e1 	.word	0x00f200e1
 80077d8:	0133011f 	.word	0x0133011f
 80077dc:	00910091 	.word	0x00910091
 80077e0:	00910091 	.word	0x00910091
 80077e4:	00910091 	.word	0x00910091
 80077e8:	00910091 	.word	0x00910091
 80077ec:	00910091 	.word	0x00910091
 80077f0:	00910091 	.word	0x00910091
 80077f4:	00910091 	.word	0x00910091
 80077f8:	00910091 	.word	0x00910091
 80077fc:	00910091 	.word	0x00910091
 8007800:	00910091 	.word	0x00910091
 8007804:	01370091 	.word	0x01370091
 8007808:	0142013e 	.word	0x0142013e
 800780c:	00910091 	.word	0x00910091
 8007810:	00910091 	.word	0x00910091
 8007814:	00910091 	.word	0x00910091
 8007818:	00910091 	.word	0x00910091
 800781c:	00910091 	.word	0x00910091
 8007820:	00910091 	.word	0x00910091
 8007824:	00910091 	.word	0x00910091
 8007828:	00910091 	.word	0x00910091
 800782c:	00910091 	.word	0x00910091
 8007830:	00910091 	.word	0x00910091
 8007834:	00910091 	.word	0x00910091
 8007838:	00910091 	.word	0x00910091
 800783c:	00910091 	.word	0x00910091
 8007840:	00910091 	.word	0x00910091
 8007844:	00910091 	.word	0x00910091
 8007848:	00910091 	.word	0x00910091
 800784c:	00910091 	.word	0x00910091
 8007850:	00910091 	.word	0x00910091
 8007854:	00910091 	.word	0x00910091
 8007858:	00910091 	.word	0x00910091
 800785c:	00910091 	.word	0x00910091
 8007860:	00910091 	.word	0x00910091
 8007864:	00910091 	.word	0x00910091
 8007868:	00910091 	.word	0x00910091
 800786c:	00910091 	.word	0x00910091
 8007870:	00910091 	.word	0x00910091
 8007874:	00910091 	.word	0x00910091
 8007878:	00910091 	.word	0x00910091
 800787c:	00910091 	.word	0x00910091
 8007880:	00910091 	.word	0x00910091
 8007884:	00910091 	.word	0x00910091
 8007888:	00910091 	.word	0x00910091
 800788c:	00910091 	.word	0x00910091
 8007890:	00910091 	.word	0x00910091
 8007894:	00910091 	.word	0x00910091
 8007898:	00910091 	.word	0x00910091
 800789c:	00910091 	.word	0x00910091
 80078a0:	00910091 	.word	0x00910091
 80078a4:	00910091 	.word	0x00910091
 80078a8:	00910091 	.word	0x00910091
 80078ac:	00910091 	.word	0x00910091
 80078b0:	00910091 	.word	0x00910091
 80078b4:	00910091 	.word	0x00910091
 80078b8:	00910091 	.word	0x00910091
 80078bc:	00910091 	.word	0x00910091
 80078c0:	016e014d 	.word	0x016e014d
 80078c4:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 80078c6:	4b3d      	ldr	r3, [pc, #244]	; (80079bc <LmhpComplianceOnMcpsIndication+0x238>)
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	2101      	movs	r1, #1
 80078cc:	7299      	strb	r1, [r3, #10]
 80078ce:	2000      	movs	r0, #0
 80078d0:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 80078d2:	68d8      	ldr	r0, [r3, #12]
 80078d4:	7a9a      	ldrb	r2, [r3, #10]
 80078d6:	1854      	adds	r4, r2, r1
 80078d8:	729c      	strb	r4, [r3, #10]
 80078da:	2406      	movs	r4, #6
 80078dc:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 80078de:	68d8      	ldr	r0, [r3, #12]
 80078e0:	7a9a      	ldrb	r2, [r3, #10]
 80078e2:	1854      	adds	r4, r2, r1
 80078e4:	729c      	strb	r4, [r3, #10]
 80078e6:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 80078e8:	4b34      	ldr	r3, [pc, #208]	; (80079bc <LmhpComplianceOnMcpsIndication+0x238>)
 80078ea:	7a9b      	ldrb	r3, [r3, #10]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 8144 	beq.w	8007b7a <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 80078f2:	4c33      	ldr	r4, [pc, #204]	; (80079c0 <LmhpComplianceOnMcpsIndication+0x23c>)
 80078f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078f8:	4620      	mov	r0, r4
 80078fa:	f009 f915 	bl	8010b28 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 80078fe:	4620      	mov	r0, r4
 8007900:	f009 f8cc 	bl	8010a9c <UTIL_TIMER_Start>
}
 8007904:	b014      	add	sp, #80	; 0x50
 8007906:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 8007908:	4b2c      	ldr	r3, [pc, #176]	; (80079bc <LmhpComplianceOnMcpsIndication+0x238>)
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8007910:	e7ea      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007912:	4b2c      	ldr	r3, [pc, #176]	; (80079c4 <LmhpComplianceOnMcpsIndication+0x240>)
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	2101      	movs	r1, #1
 8007918:	2002      	movs	r0, #2
 800791a:	4798      	blx	r3
        break;
 800791c:	e7e4      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800791e:	7862      	ldrb	r2, [r4, #1]
 8007920:	4b26      	ldr	r3, [pc, #152]	; (80079bc <LmhpComplianceOnMcpsIndication+0x238>)
 8007922:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800792c:	e7dc      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 800792e:	2304      	movs	r3, #4
 8007930:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8007934:	7863      	ldrb	r3, [r4, #1]
 8007936:	3b00      	subs	r3, #0
 8007938:	bf18      	it	ne
 800793a:	2301      	movne	r3, #1
 800793c:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007940:	4668      	mov	r0, sp
 8007942:	f002 ff3d 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
        break;
 8007946:	e7cf      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8007948:	7860      	ldrb	r0, [r4, #1]
 800794a:	3800      	subs	r0, #0
 800794c:	bf18      	it	ne
 800794e:	2001      	movne	r0, #1
 8007950:	f003 fba4 	bl	800b09c <LoRaMacTestSetDutyCycleOn>
        break;
 8007954:	e7c8      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8007956:	466d      	mov	r5, sp
 8007958:	4e1b      	ldr	r6, [pc, #108]	; (80079c8 <LmhpComplianceOnMcpsIndication+0x244>)
 800795a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800795c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800795e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007962:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007966:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800796a:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800796c:	2b0a      	cmp	r3, #10
 800796e:	d8bb      	bhi.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8007970:	4a16      	ldr	r2, [pc, #88]	; (80079cc <LmhpComplianceOnMcpsIndication+0x248>)
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	6852      	ldr	r2, [r2, #4]
 8007976:	2a00      	cmp	r2, #0
 8007978:	d0b6      	beq.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800797a:	a914      	add	r1, sp, #80	; 0x50
 800797c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007980:	f853 0c50 	ldr.w	r0, [r3, #-80]
 8007984:	4790      	blx	r2
        break;
 8007986:	e7af      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8007988:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800798a:	1e53      	subs	r3, r2, #1
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b01      	cmp	r3, #1
 8007990:	d8aa      	bhi.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007992:	1e50      	subs	r0, r2, #1
 8007994:	bf18      	it	ne
 8007996:	2001      	movne	r0, #1
 8007998:	4b08      	ldr	r3, [pc, #32]	; (80079bc <LmhpComplianceOnMcpsIndication+0x238>)
 800799a:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800799c:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <LmhpComplianceOnMcpsIndication+0x248>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0a0      	beq.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 80079a6:	4798      	blx	r3
 80079a8:	e79e      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 80079aa:	4b04      	ldr	r3, [pc, #16]	; (80079bc <LmhpComplianceOnMcpsIndication+0x238>)
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	2101      	movs	r1, #1
 80079b0:	7299      	strb	r1, [r3, #10]
 80079b2:	2308      	movs	r3, #8
 80079b4:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80079b6:	460b      	mov	r3, r1
 80079b8:	e01b      	b.n	80079f2 <LmhpComplianceOnMcpsIndication+0x26e>
 80079ba:	bf00      	nop
 80079bc:	200005d4 	.word	0x200005d4
 80079c0:	2000060c 	.word	0x2000060c
 80079c4:	200000c8 	.word	0x200000c8
 80079c8:	08011034 	.word	0x08011034
 80079cc:	200005d0 	.word	0x200005d0
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80079d0:	6882      	ldr	r2, [r0, #8]
 80079d2:	f101 0c01 	add.w	ip, r1, #1
 80079d6:	5c52      	ldrb	r2, [r2, r1]
 80079d8:	496c      	ldr	r1, [pc, #432]	; (8007b8c <LmhpComplianceOnMcpsIndication+0x408>)
 80079da:	68cd      	ldr	r5, [r1, #12]
 80079dc:	7a8c      	ldrb	r4, [r1, #10]
 80079de:	f104 0e01 	add.w	lr, r4, #1
 80079e2:	f881 e00a 	strb.w	lr, [r1, #10]
 80079e6:	3201      	adds	r2, #1
 80079e8:	552a      	strb	r2, [r5, r4]
             i++ )
 80079ea:	3301      	adds	r3, #1
 80079ec:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80079ee:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80079f2:	4a66      	ldr	r2, [pc, #408]	; (8007b8c <LmhpComplianceOnMcpsIndication+0x408>)
 80079f4:	7a52      	ldrb	r2, [r2, #9]
 80079f6:	7b04      	ldrb	r4, [r0, #12]
 80079f8:	42a2      	cmp	r2, r4
 80079fa:	bf28      	it	cs
 80079fc:	4622      	movcs	r2, r4
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d8e6      	bhi.n	80079d0 <LmhpComplianceOnMcpsIndication+0x24c>
 8007a02:	e771      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8007a04:	4b61      	ldr	r3, [pc, #388]	; (8007b8c <LmhpComplianceOnMcpsIndication+0x408>)
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	2101      	movs	r1, #1
 8007a0a:	7299      	strb	r1, [r3, #10]
 8007a0c:	2109      	movs	r1, #9
 8007a0e:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8007a10:	8a18      	ldrh	r0, [r3, #16]
 8007a12:	68d9      	ldr	r1, [r3, #12]
 8007a14:	7a9a      	ldrb	r2, [r3, #10]
 8007a16:	1c54      	adds	r4, r2, #1
 8007a18:	729c      	strb	r4, [r3, #10]
 8007a1a:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8007a1c:	8a1a      	ldrh	r2, [r3, #16]
 8007a1e:	68d8      	ldr	r0, [r3, #12]
 8007a20:	7a99      	ldrb	r1, [r3, #10]
 8007a22:	1c4c      	adds	r4, r1, #1
 8007a24:	729c      	strb	r4, [r3, #10]
 8007a26:	0a13      	lsrs	r3, r2, #8
 8007a28:	5443      	strb	r3, [r0, r1]
        break;
 8007a2a:	e75d      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 8007a2c:	4b57      	ldr	r3, [pc, #348]	; (8007b8c <LmhpComplianceOnMcpsIndication+0x408>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	821a      	strh	r2, [r3, #16]
        break;
 8007a32:	e759      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 8007a34:	2304      	movs	r3, #4
 8007a36:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 8007a3a:	4668      	mov	r0, sp
 8007a3c:	f003 f946 	bl	800accc <LoRaMacMlmeRequest>
        break;
 8007a40:	e752      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 8007a42:	4b53      	ldr	r3, [pc, #332]	; (8007b90 <LmhpComplianceOnMcpsIndication+0x40c>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	4798      	blx	r3
        break;
 8007a48:	e74e      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8007a4a:	7860      	ldrb	r0, [r4, #1]
 8007a4c:	4b4f      	ldr	r3, [pc, #316]	; (8007b8c <LmhpComplianceOnMcpsIndication+0x408>)
 8007a4e:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8007a50:	4b50      	ldr	r3, [pc, #320]	; (8007b94 <LmhpComplianceOnMcpsIndication+0x410>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f43f af46 	beq.w	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8007a5c:	4798      	blx	r3
 8007a5e:	e743      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 8007a60:	7b03      	ldrb	r3, [r0, #12]
 8007a62:	2b07      	cmp	r3, #7
 8007a64:	f47f af40 	bne.w	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 8007a68:	2305      	movs	r3, #5
 8007a6a:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8007a6e:	7863      	ldrb	r3, [r4, #1]
 8007a70:	78a2      	ldrb	r2, [r4, #2]
 8007a72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 8007a76:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007a7a:	78e3      	ldrb	r3, [r4, #3]
 8007a7c:	7922      	ldrb	r2, [r4, #4]
 8007a7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007a82:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007a84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007a88:	2264      	movs	r2, #100	; 0x64
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 8007a8e:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8007a90:	6883      	ldr	r3, [r0, #8]
 8007a92:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007a96:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 8007a9a:	4668      	mov	r0, sp
 8007a9c:	f003 f916 	bl	800accc <LoRaMacMlmeRequest>
        break;
 8007aa0:	e722      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8007aa2:	2339      	movs	r3, #57	; 0x39
 8007aa4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007aae:	a80b      	add	r0, sp, #44	; 0x2c
 8007ab0:	f002 fe86 	bl	800a7c0 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 8007ab4:	4b35      	ldr	r3, [pc, #212]	; (8007b8c <LmhpComplianceOnMcpsIndication+0x408>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8007abc:	e714      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 8007abe:	232a      	movs	r3, #42	; 0x2a
 8007ac0:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007ac4:	4668      	mov	r0, sp
 8007ac6:	f002 fd2d 	bl	800a524 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8007aca:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8007acc:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8007ace:	4b2f      	ldr	r3, [pc, #188]	; (8007b8c <LmhpComplianceOnMcpsIndication+0x408>)
 8007ad0:	68dc      	ldr	r4, [r3, #12]
 8007ad2:	7a98      	ldrb	r0, [r3, #10]
 8007ad4:	1c45      	adds	r5, r0, #1
 8007ad6:	729d      	strb	r5, [r3, #10]
 8007ad8:	257f      	movs	r5, #127	; 0x7f
 8007ada:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8007adc:	482d      	ldr	r0, [pc, #180]	; (8007b94 <LmhpComplianceOnMcpsIndication+0x410>)
 8007ade:	6800      	ldr	r0, [r0, #0]
 8007ae0:	68dd      	ldr	r5, [r3, #12]
 8007ae2:	7a9c      	ldrb	r4, [r3, #10]
 8007ae4:	1c66      	adds	r6, r4, #1
 8007ae6:	729e      	strb	r6, [r3, #10]
 8007ae8:	78c6      	ldrb	r6, [r0, #3]
 8007aea:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8007aec:	68dd      	ldr	r5, [r3, #12]
 8007aee:	7a9c      	ldrb	r4, [r3, #10]
 8007af0:	1c66      	adds	r6, r4, #1
 8007af2:	729e      	strb	r6, [r3, #10]
 8007af4:	7886      	ldrb	r6, [r0, #2]
 8007af6:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8007af8:	68dd      	ldr	r5, [r3, #12]
 8007afa:	7a9c      	ldrb	r4, [r3, #10]
 8007afc:	1c66      	adds	r6, r4, #1
 8007afe:	729e      	strb	r6, [r3, #10]
 8007b00:	7846      	ldrb	r6, [r0, #1]
 8007b02:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8007b04:	68dd      	ldr	r5, [r3, #12]
 8007b06:	7a9c      	ldrb	r4, [r3, #10]
 8007b08:	1c66      	adds	r6, r4, #1
 8007b0a:	729e      	strb	r6, [r3, #10]
 8007b0c:	7800      	ldrb	r0, [r0, #0]
 8007b0e:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8007b10:	68dc      	ldr	r4, [r3, #12]
 8007b12:	7a98      	ldrb	r0, [r3, #10]
 8007b14:	1c45      	adds	r5, r0, #1
 8007b16:	729d      	strb	r5, [r3, #10]
 8007b18:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8007b1c:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8007b1e:	68dc      	ldr	r4, [r3, #12]
 8007b20:	7a98      	ldrb	r0, [r3, #10]
 8007b22:	1c45      	adds	r5, r0, #1
 8007b24:	729d      	strb	r5, [r3, #10]
 8007b26:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007b2a:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8007b2c:	68dc      	ldr	r4, [r3, #12]
 8007b2e:	7a98      	ldrb	r0, [r3, #10]
 8007b30:	1c45      	adds	r5, r0, #1
 8007b32:	729d      	strb	r5, [r3, #10]
 8007b34:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8007b38:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8007b3a:	68dc      	ldr	r4, [r3, #12]
 8007b3c:	7a98      	ldrb	r0, [r3, #10]
 8007b3e:	1c45      	adds	r5, r0, #1
 8007b40:	729d      	strb	r5, [r3, #10]
 8007b42:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8007b44:	68d8      	ldr	r0, [r3, #12]
 8007b46:	7a99      	ldrb	r1, [r3, #10]
 8007b48:	1c4c      	adds	r4, r1, #1
 8007b4a:	729c      	strb	r4, [r3, #10]
 8007b4c:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8007b50:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8007b52:	68d8      	ldr	r0, [r3, #12]
 8007b54:	7a99      	ldrb	r1, [r3, #10]
 8007b56:	1c4c      	adds	r4, r1, #1
 8007b58:	729c      	strb	r4, [r3, #10]
 8007b5a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007b5e:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8007b60:	68d8      	ldr	r0, [r3, #12]
 8007b62:	7a99      	ldrb	r1, [r3, #10]
 8007b64:	1c4c      	adds	r4, r1, #1
 8007b66:	729c      	strb	r4, [r3, #10]
 8007b68:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8007b6c:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8007b6e:	68d8      	ldr	r0, [r3, #12]
 8007b70:	7a99      	ldrb	r1, [r3, #10]
 8007b72:	1c4c      	adds	r4, r1, #1
 8007b74:	729c      	strb	r4, [r3, #10]
 8007b76:	5442      	strb	r2, [r0, r1]
        break;
 8007b78:	e6b6      	b.n	80078e8 <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 8007b7a:	4807      	ldr	r0, [pc, #28]	; (8007b98 <LmhpComplianceOnMcpsIndication+0x414>)
 8007b7c:	f008 ff34 	bl	80109e8 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8007b80:	4b02      	ldr	r3, [pc, #8]	; (8007b8c <LmhpComplianceOnMcpsIndication+0x408>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	705a      	strb	r2, [r3, #1]
 8007b86:	e6bd      	b.n	8007904 <LmhpComplianceOnMcpsIndication+0x180>
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	200005d4 	.word	0x200005d4
 8007b90:	200000c8 	.word	0x200000c8
 8007b94:	200005d0 	.word	0x200005d0
 8007b98:	2000060c 	.word	0x2000060c

08007b9c <LmhpComplianceProcess>:
{
 8007b9c:	b530      	push	{r4, r5, lr}
 8007b9e:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8007ba0:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	b993      	cbnz	r3, 8007bcc <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8007ba6:	4b27      	ldr	r3, [pc, #156]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d13f      	bne.n	8007c30 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 8007bb0:	4b24      	ldr	r3, [pc, #144]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bb6:	b13b      	cbz	r3, 8007bc8 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8007bb8:	4b22      	ldr	r3, [pc, #136]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 8007bc0:	4b21      	ldr	r3, [pc, #132]	; (8007c48 <LmhpComplianceProcess+0xac>)
 8007bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc4:	b103      	cbz	r3, 8007bc8 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8007bc6:	4798      	blx	r3
}
 8007bc8:	b003      	add	sp, #12
 8007bca:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8007bcc:	f008 fecc 	bl	8010968 <UTIL_TIMER_GetCurrentTime>
 8007bd0:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8007bd2:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007bd4:	685d      	ldr	r5, [r3, #4]
 8007bd6:	f7ff f9f5 	bl	8006fc4 <LmHandlerGetDutyCycleWaitTime>
 8007bda:	4405      	add	r5, r0
 8007bdc:	42a5      	cmp	r5, r4
 8007bde:	d2e7      	bcs.n	8007bb0 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8007be0:	4b18      	ldr	r3, [pc, #96]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007be2:	7a9b      	ldrb	r3, [r3, #10]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0e3      	beq.n	8007bb0 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 8007be8:	22e0      	movs	r2, #224	; 0xe0
 8007bea:	f88d 2000 	strb.w	r2, [sp]
 8007bee:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8007bf2:	4b14      	ldr	r3, [pc, #80]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007bf4:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 8007bf6:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	7a19      	ldrb	r1, [r3, #8]
 8007bfc:	4668      	mov	r0, sp
 8007bfe:	f7ff f9f9 	bl	8006ff4 <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 8007c02:	f110 0f02 	cmn.w	r0, #2
 8007c06:	d009      	beq.n	8007c1c <LmhpComplianceProcess+0x80>
 8007c08:	f110 0f06 	cmn.w	r0, #6
 8007c0c:	d006      	beq.n	8007c1c <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8007c14:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007c18:	605c      	str	r4, [r3, #4]
 8007c1a:	e7c9      	b.n	8007bb0 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 8007c1c:	4d0b      	ldr	r5, [pc, #44]	; (8007c4c <LmhpComplianceProcess+0xb0>)
 8007c1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c22:	4628      	mov	r0, r5
 8007c24:	f008 ff80 	bl	8010b28 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f008 ff37 	bl	8010a9c <UTIL_TIMER_Start>
 8007c2e:	e7f2      	b.n	8007c16 <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 8007c30:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <LmhpComplianceProcess+0xa8>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8007c38:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8007c3c:	f7ff fa7c 	bl	8007138 <LmHandlerRequestClass>
 8007c40:	e7b6      	b.n	8007bb0 <LmhpComplianceProcess+0x14>
 8007c42:	bf00      	nop
 8007c44:	200005d4 	.word	0x200005d4
 8007c48:	200000c8 	.word	0x200000c8
 8007c4c:	2000060c 	.word	0x2000060c

08007c50 <LmhpComplianceInit>:
{
 8007c50:	b530      	push	{r4, r5, lr}
 8007c52:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8007c54:	b188      	cbz	r0, 8007c7a <LmhpComplianceInit+0x2a>
 8007c56:	4603      	mov	r3, r0
 8007c58:	b179      	cbz	r1, 8007c7a <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 8007c5a:	4813      	ldr	r0, [pc, #76]	; (8007ca8 <LmhpComplianceInit+0x58>)
 8007c5c:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8007c5e:	4b13      	ldr	r3, [pc, #76]	; (8007cac <LmhpComplianceInit+0x5c>)
 8007c60:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8007c62:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8007c64:	2201      	movs	r2, #1
 8007c66:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8007c68:	2200      	movs	r2, #0
 8007c6a:	9200      	str	r2, [sp, #0]
 8007c6c:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <LmhpComplianceInit+0x60>)
 8007c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8007c72:	4810      	ldr	r0, [pc, #64]	; (8007cb4 <LmhpComplianceInit+0x64>)
 8007c74:	f008 fe5a 	bl	801092c <UTIL_TIMER_Create>
 8007c78:	e004      	b.n	8007c84 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <LmhpComplianceInit+0x58>)
 8007c7e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8007c80:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <LmhpComplianceInit+0x5c>)
 8007c82:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8007c84:	4c09      	ldr	r4, [pc, #36]	; (8007cac <LmhpComplianceInit+0x5c>)
 8007c86:	2500      	movs	r5, #0
 8007c88:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f104 0014 	add.w	r0, r4, #20
 8007c92:	f006 fcc4 	bl	800e61e <memset1>
    ComplianceTestState.IsTxPending = false;
 8007c96:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8007c98:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8007c9a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8007c9e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8007ca2:	b003      	add	sp, #12
 8007ca4:	bd30      	pop	{r4, r5, pc}
 8007ca6:	bf00      	nop
 8007ca8:	200005d0 	.word	0x200005d0
 8007cac:	200005d4 	.word	0x200005d4
 8007cb0:	0800776d 	.word	0x0800776d
 8007cb4:	2000060c 	.word	0x2000060c

08007cb8 <LmhpCompliancePackageFactory>:
}
 8007cb8:	4800      	ldr	r0, [pc, #0]	; (8007cbc <LmhpCompliancePackageFactory+0x4>)
 8007cba:	4770      	bx	lr
 8007cbc:	200000c8 	.word	0x200000c8

08007cc0 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8007cc0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8007cc2:	4a06      	ldr	r2, [pc, #24]	; (8007cdc <OnRadioRxError+0x1c>)
 8007cc4:	7813      	ldrb	r3, [r2, #0]
 8007cc6:	f043 0304 	orr.w	r3, r3, #4
 8007cca:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <OnRadioRxError+0x20>)
 8007cce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007cd2:	b113      	cbz	r3, 8007cda <OnRadioRxError+0x1a>
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	b103      	cbz	r3, 8007cda <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007cd8:	4798      	blx	r3
    }
}
 8007cda:	bd08      	pop	{r3, pc}
 8007cdc:	20000624 	.word	0x20000624
 8007ce0:	20000628 	.word	0x20000628

08007ce4 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007ce4:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <UpdateRxSlotIdleState+0x20>)
 8007ce6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d004      	beq.n	8007cf8 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007cee:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <UpdateRxSlotIdleState+0x24>)
 8007cf0:	2206      	movs	r2, #6
 8007cf2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 8007cf6:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007cf8:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <UpdateRxSlotIdleState+0x24>)
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20008000 	.word	0x20008000
 8007d08:	20000628 	.word	0x20000628

08007d0c <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8007d0c:	4b01      	ldr	r3, [pc, #4]	; (8007d14 <LoRaMacEnableRequests+0x8>)
 8007d0e:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 8007d12:	4770      	bx	lr
 8007d14:	20000628 	.word	0x20000628

08007d18 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8007d18:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8007d1a:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <LoRaMacHandleIndicationEvents+0x58>)
 8007d1c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007d20:	f013 0f08 	tst.w	r3, #8
 8007d24:	d00e      	beq.n	8007d44 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8007d26:	4812      	ldr	r0, [pc, #72]	; (8007d70 <LoRaMacHandleIndicationEvents+0x58>)
 8007d28:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8007d2c:	f36f 03c3 	bfc	r3, #3, #1
 8007d30:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8007d34:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 8007d3e:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 8007d42:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <LoRaMacHandleIndicationEvents+0x58>)
 8007d46:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007d4a:	f013 0f02 	tst.w	r3, #2
 8007d4e:	d00e      	beq.n	8007d6e <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8007d50:	4807      	ldr	r0, [pc, #28]	; (8007d70 <LoRaMacHandleIndicationEvents+0x58>)
 8007d52:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8007d56:	f36f 0341 	bfc	r3, #1, #1
 8007d5a:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8007d5e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 8007d68:	f200 4024 	addw	r0, r0, #1060	; 0x424
 8007d6c:	4798      	blx	r3
    }
}
 8007d6e:	bd08      	pop	{r3, pc}
 8007d70:	20000628 	.word	0x20000628

08007d74 <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8007d74:	b110      	cbz	r0, 8007d7c <CheckForMinimumAbpDatarate+0x8>
 8007d76:	2901      	cmp	r1, #1
 8007d78:	d001      	beq.n	8007d7e <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8007d7a:	2000      	movs	r0, #0
}
 8007d7c:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d0fc      	beq.n	8007d7c <CheckForMinimumAbpDatarate+0x8>
    return false;
 8007d82:	2000      	movs	r0, #0
 8007d84:	4770      	bx	lr
	...

08007d88 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007d88:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <LoRaMacCheckForRxAbort+0x20>)
 8007d8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007d8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d92:	d008      	beq.n	8007da6 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8007d94:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007d98:	4a03      	ldr	r2, [pc, #12]	; (8007da8 <LoRaMacCheckForRxAbort+0x20>)
 8007d9a:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007d9e:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8007da2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8007da6:	4770      	bx	lr
 8007da8:	20000628 	.word	0x20000628

08007dac <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <CalculateBackOff+0x1c>)
 8007dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db0:	b94b      	cbnz	r3, 8007dc6 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007db2:	4a05      	ldr	r2, [pc, #20]	; (8007dc8 <CalculateBackOff+0x1c>)
 8007db4:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 8007db8:	4904      	ldr	r1, [pc, #16]	; (8007dcc <CalculateBackOff+0x20>)
 8007dba:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8007dc6:	4770      	bx	lr
 8007dc8:	20008000 	.word	0x20008000
 8007dcc:	20000628 	.word	0x20000628

08007dd0 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007dd0:	b508      	push	{r3, lr}
 8007dd2:	4684      	mov	ip, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007dd8:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <SetTxContinuousWave+0x24>)
 8007dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ddc:	4662      	mov	r2, ip
 8007dde:	b249      	sxtb	r1, r1
 8007de0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007de2:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <SetTxContinuousWave+0x28>)
 8007de4:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8007de8:	f043 0302 	orr.w	r3, r3, #2
 8007dec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8007df0:	2000      	movs	r0, #0
 8007df2:	bd08      	pop	{r3, pc}
 8007df4:	08011d10 	.word	0x08011d10
 8007df8:	20000628 	.word	0x20000628

08007dfc <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	b1f8      	cbz	r0, 8007e40 <DetermineFrameType+0x44>
 8007e00:	b301      	cbz	r1, 8007e44 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007e02:	7b03      	ldrb	r3, [r0, #12]
 8007e04:	f013 030f 	ands.w	r3, r3, #15
 8007e08:	d005      	beq.n	8007e16 <DetermineFrameType+0x1a>
 8007e0a:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007e0e:	b110      	cbz	r0, 8007e16 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007e10:	2000      	movs	r0, #0
 8007e12:	7008      	strb	r0, [r1, #0]
 8007e14:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8007e16:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8007e1a:	b910      	cbnz	r0, 8007e22 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	700b      	strb	r3, [r1, #0]
 8007e20:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8007e22:	b92b      	cbnz	r3, 8007e30 <DetermineFrameType+0x34>
 8007e24:	f892 0020 	ldrb.w	r0, [r2, #32]
 8007e28:	b910      	cbnz	r0, 8007e30 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	700b      	strb	r3, [r1, #0]
 8007e2e:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007e30:	b953      	cbnz	r3, 8007e48 <DetermineFrameType+0x4c>
 8007e32:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007e36:	b14a      	cbz	r2, 8007e4c <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8007e38:	2203      	movs	r2, #3
 8007e3a:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007e3c:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007e3e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007e40:	2003      	movs	r0, #3
 8007e42:	4770      	bx	lr
 8007e44:	2003      	movs	r0, #3
 8007e46:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8007e48:	2018      	movs	r0, #24
 8007e4a:	4770      	bx	lr
 8007e4c:	2018      	movs	r0, #24
}
 8007e4e:	4770      	bx	lr

08007e50 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8007e50:	4288      	cmp	r0, r1
 8007e52:	d201      	bcs.n	8007e58 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8007e54:	2000      	movs	r0, #0
 8007e56:	4770      	bx	lr
        return true;
 8007e58:	2001      	movs	r0, #1
}
 8007e5a:	4770      	bx	lr

08007e5c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8007e5c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8007e5e:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <CheckRetransUnconfirmedUplink+0x30>)
 8007e60:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <CheckRetransUnconfirmedUplink+0x34>)
 8007e66:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 8007e6a:	f7ff fff1 	bl	8007e50 <CheckRetrans>
 8007e6e:	b950      	cbnz	r0, 8007e86 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <CheckRetransUnconfirmedUplink+0x34>)
 8007e72:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007e76:	f013 0f02 	tst.w	r3, #2
 8007e7a:	d004      	beq.n	8007e86 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8007e7c:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <CheckRetransUnconfirmedUplink+0x34>)
 8007e7e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d900      	bls.n	8007e88 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8007e86:	bd08      	pop	{r3, pc}
            return true;
 8007e88:	2001      	movs	r0, #1
 8007e8a:	e7fc      	b.n	8007e86 <CheckRetransUnconfirmedUplink+0x2a>
 8007e8c:	20008000 	.word	0x20008000
 8007e90:	20000628 	.word	0x20000628

08007e94 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8007e94:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8007e96:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <CheckRetransConfirmedUplink+0x28>)
 8007e98:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8007e9c:	4b08      	ldr	r3, [pc, #32]	; (8007ec0 <CheckRetransConfirmedUplink+0x2c>)
 8007e9e:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 8007ea2:	f7ff ffd5 	bl	8007e50 <CheckRetrans>
 8007ea6:	b940      	cbnz	r0, 8007eba <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <CheckRetransConfirmedUplink+0x2c>)
 8007eaa:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007eae:	f013 0f02 	tst.w	r3, #2
 8007eb2:	d002      	beq.n	8007eba <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007eb4:	4b02      	ldr	r3, [pc, #8]	; (8007ec0 <CheckRetransConfirmedUplink+0x2c>)
 8007eb6:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 8007eba:	bd08      	pop	{r3, pc}
 8007ebc:	20008000 	.word	0x20008000
 8007ec0:	20000628 	.word	0x20000628

08007ec4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8007ec4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ec8:	d000      	beq.n	8007ecc <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 8007eca:	3001      	adds	r0, #1
    }
    return counter;
}
 8007ecc:	4770      	bx	lr
	...

08007ed0 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8007ed0:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <StopRetransmission+0x4c>)
 8007ed4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007ed8:	f013 0f02 	tst.w	r3, #2
 8007edc:	d004      	beq.n	8007ee8 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <StopRetransmission+0x4c>)
 8007ee0:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d908      	bls.n	8007efa <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <StopRetransmission+0x50>)
 8007eea:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8007eee:	b123      	cbz	r3, 8007efa <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8007ef0:	4c0b      	ldr	r4, [pc, #44]	; (8007f20 <StopRetransmission+0x50>)
 8007ef2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007ef4:	f7ff ffe6 	bl	8007ec4 <IncreaseAdrAckCounter>
 8007ef8:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007efa:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <StopRetransmission+0x4c>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8007f02:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8007f06:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007f0a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007f0e:	f022 0202 	bic.w	r2, r2, #2
 8007f12:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8007f16:	2001      	movs	r0, #1
 8007f18:	bd10      	pop	{r4, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000628 	.word	0x20000628
 8007f20:	20008000 	.word	0x20008000

08007f24 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8007f24:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007f26:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <CallNvmDataChangeCallback+0x14>)
 8007f28:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007f2c:	b113      	cbz	r3, 8007f34 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8007f2e:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007f30:	b103      	cbz	r3, 8007f34 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8007f32:	4798      	blx	r3
    }
}
 8007f34:	bd08      	pop	{r3, pc}
 8007f36:	bf00      	nop
 8007f38:	20000628 	.word	0x20000628

08007f3c <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007f3c:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <IsRequestPending+0x14>)
 8007f3e:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 8007f42:	f010 0005 	ands.w	r0, r0, #5
 8007f46:	d100      	bne.n	8007f4a <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007f48:	4770      	bx	lr
        return 1;
 8007f4a:	2001      	movs	r0, #1
 8007f4c:	e7fc      	b.n	8007f48 <IsRequestPending+0xc>
 8007f4e:	bf00      	nop
 8007f50:	20000628 	.word	0x20000628

08007f54 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007f54:	b500      	push	{lr}
 8007f56:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007f58:	4b0d      	ldr	r3, [pc, #52]	; (8007f90 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007f5a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8007f5e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8007f62:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007f66:	220d      	movs	r2, #13
 8007f68:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007f6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f70:	b113      	cbz	r3, 8007f78 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007f72:	230e      	movs	r3, #14
 8007f74:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007f78:	a902      	add	r1, sp, #8
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007f7c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007f80:	f004 f924 	bl	800c1cc <RegionGetPhyParam>
 8007f84:	9001      	str	r0, [sp, #4]
}
 8007f86:	b2c0      	uxtb	r0, r0
 8007f88:	b005      	add	sp, #20
 8007f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f8e:	bf00      	nop
 8007f90:	20008000 	.word	0x20008000

08007f94 <ValidatePayloadLength>:
{
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4605      	mov	r5, r0
 8007f98:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007f9a:	4608      	mov	r0, r1
 8007f9c:	f7ff ffda 	bl	8007f54 <GetMaxAppPayloadWithoutFOptsLength>
 8007fa0:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8007fa2:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d303      	bcc.n	8007fb0 <ValidatePayloadLength+0x1c>
 8007fa8:	2aff      	cmp	r2, #255	; 0xff
 8007faa:	d903      	bls.n	8007fb4 <ValidatePayloadLength+0x20>
    return false;
 8007fac:	2000      	movs	r0, #0
 8007fae:	e000      	b.n	8007fb2 <ValidatePayloadLength+0x1e>
 8007fb0:	2000      	movs	r0, #0
}
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	e7fc      	b.n	8007fb2 <ValidatePayloadLength+0x1e>

08007fb8 <ProcessRadioTxDone>:
{
 8007fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fba:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007fbc:	4b35      	ldr	r3, [pc, #212]	; (8008094 <ProcessRadioTxDone+0xdc>)
 8007fbe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d002      	beq.n	8007fcc <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8007fc6:	4b34      	ldr	r3, [pc, #208]	; (8008098 <ProcessRadioTxDone+0xe0>)
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8007fcc:	4c33      	ldr	r4, [pc, #204]	; (800809c <ProcessRadioTxDone+0xe4>)
 8007fce:	f504 7560 	add.w	r5, r4, #896	; 0x380
 8007fd2:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f008 fda6 	bl	8010b28 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f008 fd5d 	bl	8010a9c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8007fe2:	f504 7566 	add.w	r5, r4, #920	; 0x398
 8007fe6:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007fea:	4628      	mov	r0, r5
 8007fec:	f008 fd9c 	bl	8010b28 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f008 fd53 	bl	8010a9c <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 8007ff6:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d134      	bne.n	8008068 <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007ffe:	4b27      	ldr	r3, [pc, #156]	; (800809c <ProcessRadioTxDone+0xe4>)
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008006:	4b26      	ldr	r3, [pc, #152]	; (80080a0 <ProcessRadioTxDone+0xe8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4c22      	ldr	r4, [pc, #136]	; (8008094 <ProcessRadioTxDone+0xdc>)
 800800c:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800800e:	4f23      	ldr	r7, [pc, #140]	; (800809c <ProcessRadioTxDone+0xe4>)
 8008010:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 8008014:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008018:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800801a:	ae0c      	add	r6, sp, #48	; 0x30
 800801c:	4630      	mov	r0, r6
 800801e:	f008 fc17 	bl	8010850 <SysTimeGetMcuTime>
 8008022:	ad02      	add	r5, sp, #8
 8008024:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800802e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8008032:	4628      	mov	r0, r5
 8008034:	f008 fba9 	bl	801078a <SysTimeSub>
 8008038:	ab07      	add	r3, sp, #28
 800803a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800803e:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008042:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8008046:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8008048:	2301      	movs	r3, #1
 800804a:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800804e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8008052:	b90b      	cbnz	r3, 8008058 <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 8008054:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008058:	a904      	add	r1, sp, #16
 800805a:	4b0e      	ldr	r3, [pc, #56]	; (8008094 <ProcessRadioTxDone+0xdc>)
 800805c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008060:	f004 f8c5 	bl	800c1ee <RegionSetBandTxDone>
}
 8008064:	b00f      	add	sp, #60	; 0x3c
 8008066:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008068:	2315      	movs	r3, #21
 800806a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800806e:	a90a      	add	r1, sp, #40	; 0x28
 8008070:	4b08      	ldr	r3, [pc, #32]	; (8008094 <ProcessRadioTxDone+0xdc>)
 8008072:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008076:	f004 f8a9 	bl	800c1cc <RegionGetPhyParam>
 800807a:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800807c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8008080:	f204 4404 	addw	r4, r4, #1028	; 0x404
 8008084:	4401      	add	r1, r0
 8008086:	4620      	mov	r0, r4
 8008088:	f008 fd4e 	bl	8010b28 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800808c:	4620      	mov	r0, r4
 800808e:	f008 fd05 	bl	8010a9c <UTIL_TIMER_Start>
 8008092:	e7b8      	b.n	8008006 <ProcessRadioTxDone+0x4e>
 8008094:	20008000 	.word	0x20008000
 8008098:	08011d10 	.word	0x08011d10
 800809c:	20000628 	.word	0x20000628
 80080a0:	20000be8 	.word	0x20000be8

080080a4 <OnRetransmitTimeoutTimerEvent>:
{
 80080a4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80080a6:	4c09      	ldr	r4, [pc, #36]	; (80080cc <OnRetransmitTimeoutTimerEvent+0x28>)
 80080a8:	f204 4004 	addw	r0, r4, #1028	; 0x404
 80080ac:	f008 fc9c 	bl	80109e8 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80080b0:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80080b4:	b113      	cbz	r3, 80080bc <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 80080b6:	2201      	movs	r2, #1
 80080b8:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80080bc:	4b03      	ldr	r3, [pc, #12]	; (80080cc <OnRetransmitTimeoutTimerEvent+0x28>)
 80080be:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80080c2:	b113      	cbz	r3, 80080ca <OnRetransmitTimeoutTimerEvent+0x26>
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	b103      	cbz	r3, 80080ca <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80080c8:	4798      	blx	r3
}
 80080ca:	bd10      	pop	{r4, pc}
 80080cc:	20000628 	.word	0x20000628

080080d0 <PrepareRxDoneAbort>:
{
 80080d0:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80080d2:	4b0e      	ldr	r3, [pc, #56]	; (800810c <PrepareRxDoneAbort+0x3c>)
 80080d4:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80080d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80080dc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80080e0:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 80080e4:	b973      	cbnz	r3, 8008104 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80080e6:	4b09      	ldr	r3, [pc, #36]	; (800810c <PrepareRxDoneAbort+0x3c>)
 80080e8:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80080ec:	f042 0202 	orr.w	r2, r2, #2
 80080f0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	f042 0220 	orr.w	r2, r2, #32
 80080fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 80080fe:	f7ff fdf1 	bl	8007ce4 <UpdateRxSlotIdleState>
}
 8008102:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 8008104:	2000      	movs	r0, #0
 8008106:	f7ff ffcd 	bl	80080a4 <OnRetransmitTimeoutTimerEvent>
 800810a:	e7ec      	b.n	80080e6 <PrepareRxDoneAbort+0x16>
 800810c:	20000628 	.word	0x20000628

08008110 <LoRaMacCheckForBeaconAcquisition>:
{
 8008110:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008112:	200b      	movs	r0, #11
 8008114:	f003 faf2 	bl	800b6fc <LoRaMacConfirmQueueIsCmdActive>
 8008118:	b188      	cbz	r0, 800813e <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800811a:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800811c:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008120:	f010 0f01 	tst.w	r0, #1
 8008124:	d10d      	bne.n	8008142 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008126:	f010 0004 	ands.w	r0, r0, #4
 800812a:	d009      	beq.n	8008140 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800812c:	461a      	mov	r2, r3
 800812e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008132:	f023 0302 	bic.w	r3, r3, #2
 8008136:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800813a:	2001      	movs	r0, #1
 800813c:	e000      	b.n	8008140 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800813e:	2000      	movs	r0, #0
}
 8008140:	bd08      	pop	{r3, pc}
    return 0x00;
 8008142:	2000      	movs	r0, #0
 8008144:	e7fc      	b.n	8008140 <LoRaMacCheckForBeaconAcquisition+0x30>
 8008146:	bf00      	nop
 8008148:	20000628 	.word	0x20000628

0800814c <GetFCntDown>:
{
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	9c04      	ldr	r4, [sp, #16]
 8008150:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8008152:	b1f2      	cbz	r2, 8008192 <GetFCntDown+0x46>
 8008154:	4694      	mov	ip, r2
 8008156:	b1f4      	cbz	r4, 8008196 <GetFCntDown+0x4a>
 8008158:	b1fd      	cbz	r5, 800819a <GetFCntDown+0x4e>
    switch( addrID )
 800815a:	b188      	cbz	r0, 8008180 <GetFCntDown+0x34>
 800815c:	2801      	cmp	r0, #1
 800815e:	d11e      	bne.n	800819e <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8008160:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008164:	2b01      	cmp	r3, #1
 8008166:	d002      	beq.n	800816e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8008168:	2303      	movs	r3, #3
 800816a:	7023      	strb	r3, [r4, #0]
 800816c:	e00a      	b.n	8008184 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800816e:	b121      	cbz	r1, 800817a <GetFCntDown+0x2e>
 8008170:	2903      	cmp	r1, #3
 8008172:	d002      	beq.n	800817a <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8008174:	2301      	movs	r3, #1
 8008176:	7023      	strb	r3, [r4, #0]
 8008178:	e004      	b.n	8008184 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800817a:	2302      	movs	r3, #2
 800817c:	7023      	strb	r3, [r4, #0]
 800817e:	e001      	b.n	8008184 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8008180:	2304      	movs	r3, #4
 8008182:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8008184:	462a      	mov	r2, r5
 8008186:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800818a:	7820      	ldrb	r0, [r4, #0]
 800818c:	f003 fcd8 	bl	800bb40 <LoRaMacCryptoGetFCntDown>
}
 8008190:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008192:	2009      	movs	r0, #9
 8008194:	e7fc      	b.n	8008190 <GetFCntDown+0x44>
 8008196:	2009      	movs	r0, #9
 8008198:	e7fa      	b.n	8008190 <GetFCntDown+0x44>
 800819a:	2009      	movs	r0, #9
 800819c:	e7f8      	b.n	8008190 <GetFCntDown+0x44>
    switch( addrID )
 800819e:	2005      	movs	r0, #5
 80081a0:	e7f6      	b.n	8008190 <GetFCntDown+0x44>

080081a2 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80081a2:	2801      	cmp	r0, #1
 80081a4:	d900      	bls.n	80081a8 <RemoveMacCommands+0x6>
 80081a6:	4770      	bx	lr
{
 80081a8:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 80081aa:	2a01      	cmp	r2, #1
 80081ac:	d105      	bne.n	80081ba <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 80081ae:	f011 0f20 	tst.w	r1, #32
 80081b2:	d004      	beq.n	80081be <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80081b4:	f003 f93e 	bl	800b434 <LoRaMacCommandsRemoveStickyAnsCmds>
 80081b8:	e001      	b.n	80081be <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80081ba:	f003 f93b 	bl	800b434 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80081be:	bd08      	pop	{r3, pc}

080081c0 <ProcessMacCommands>:
{
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	b08f      	sub	sp, #60	; 0x3c
 80081c6:	4698      	mov	r8, r3
    uint8_t status = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80081ce:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80081d2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	f200 82d9 	bhi.w	800878e <ProcessMacCommands+0x5ce>
 80081dc:	4605      	mov	r5, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 80081e2:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 80081e6:	42bc      	cmp	r4, r7
 80081e8:	f080 82d1 	bcs.w	800878e <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80081ec:	5d28      	ldrb	r0, [r5, r4]
 80081ee:	f003 f989 	bl	800b504 <LoRaMacCommandsGetCmdSize>
 80081f2:	4420      	add	r0, r4
 80081f4:	42b8      	cmp	r0, r7
 80081f6:	f300 82ca 	bgt.w	800878e <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 80081fa:	1c66      	adds	r6, r4, #1
 80081fc:	b2f6      	uxtb	r6, r6
 80081fe:	5d2b      	ldrb	r3, [r5, r4]
 8008200:	3b02      	subs	r3, #2
 8008202:	2b11      	cmp	r3, #17
 8008204:	f200 82c3 	bhi.w	800878e <ProcessMacCommands+0x5ce>
 8008208:	e8df f013 	tbh	[pc, r3, lsl #1]
 800820c:	00280012 	.word	0x00280012
 8008210:	00c000ad 	.word	0x00c000ad
 8008214:	011e0106 	.word	0x011e0106
 8008218:	01740157 	.word	0x01740157
 800821c:	02c101bf 	.word	0x02c101bf
 8008220:	01ef02c1 	.word	0x01ef02c1
 8008224:	02c102c1 	.word	0x02c102c1
 8008228:	02680251 	.word	0x02680251
 800822c:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008230:	2004      	movs	r0, #4
 8008232:	f003 fa63 	bl	800b6fc <LoRaMacConfirmQueueIsCmdActive>
 8008236:	b908      	cbnz	r0, 800823c <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 8008238:	4634      	mov	r4, r6
 800823a:	e7d4      	b.n	80081e6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800823c:	2104      	movs	r1, #4
 800823e:	2000      	movs	r0, #0
 8008240:	f003 fa10 	bl	800b664 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008244:	1ca3      	adds	r3, r4, #2
 8008246:	b2db      	uxtb	r3, r3
 8008248:	5da9      	ldrb	r1, [r5, r6]
 800824a:	4aa7      	ldr	r2, [pc, #668]	; (80084e8 <ProcessMacCommands+0x328>)
 800824c:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008250:	3403      	adds	r4, #3
 8008252:	b2e4      	uxtb	r4, r4
 8008254:	5ceb      	ldrb	r3, [r5, r3]
 8008256:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 800825a:	e7c4      	b.n	80081e6 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800825c:	2300      	movs	r3, #0
 800825e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008262:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8008266:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800826a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800826e:	f1b9 0f00 	cmp.w	r9, #0
 8008272:	d036      	beq.n	80082e2 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8008274:	3405      	adds	r4, #5
 8008276:	b2e4      	uxtb	r4, r4
 8008278:	e7b5      	b.n	80081e6 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800827a:	2305      	movs	r3, #5
 800827c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8008280:	e050      	b.n	8008324 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8008282:	4b9a      	ldr	r3, [pc, #616]	; (80084ec <ProcessMacCommands+0x32c>)
 8008284:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8008288:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800828c:	4293      	cmp	r3, r2
 800828e:	da03      	bge.n	8008298 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8008290:	4b96      	ldr	r3, [pc, #600]	; (80084ec <ProcessMacCommands+0x32c>)
 8008292:	2101      	movs	r1, #1
 8008294:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008298:	4b94      	ldr	r3, [pc, #592]	; (80084ec <ProcessMacCommands+0x32c>)
 800829a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800829e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80082a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80082a6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80082aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80082ae:	e04d      	b.n	800834c <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80082b0:	2201      	movs	r2, #1
 80082b2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80082b6:	2003      	movs	r0, #3
 80082b8:	f003 f85c 	bl	800b374 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80082bc:	3401      	adds	r4, #1
 80082be:	b2e4      	uxtb	r4, r4
 80082c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80082c4:	498a      	ldr	r1, [pc, #552]	; (80084f0 <ProcessMacCommands+0x330>)
 80082c6:	fba1 2103 	umull	r2, r1, r1, r3
 80082ca:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 80082ce:	d3ef      	bcc.n	80082b0 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 80082d0:	441e      	add	r6, r3
 80082d2:	b2f6      	uxtb	r6, r6
 80082d4:	1e74      	subs	r4, r6, #1
 80082d6:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 80082d8:	42a7      	cmp	r7, r4
 80082da:	d93a      	bls.n	8008352 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80082dc:	5d2b      	ldrb	r3, [r5, r4]
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d136      	bne.n	8008350 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80082e2:	1e73      	subs	r3, r6, #1
 80082e4:	442b      	add	r3, r5
 80082e6:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80082e8:	4b80      	ldr	r3, [pc, #512]	; (80084ec <ProcessMacCommands+0x32c>)
 80082ea:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80082ee:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80082f2:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 80082f6:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80082fa:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 80082fe:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008302:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 8008306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800830a:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800830e:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008312:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008316:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008318:	2a00      	cmp	r2, #0
 800831a:	d0ae      	beq.n	800827a <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800831c:	1bbb      	subs	r3, r7, r6
 800831e:	3301      	adds	r3, #1
 8008320:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008324:	ab05      	add	r3, sp, #20
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	ab03      	add	r3, sp, #12
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	f10d 030b 	add.w	r3, sp, #11
 8008330:	f10d 020a 	add.w	r2, sp, #10
 8008334:	a907      	add	r1, sp, #28
 8008336:	486d      	ldr	r0, [pc, #436]	; (80084ec <ProcessMacCommands+0x32c>)
 8008338:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800833c:	f003 ffa6 	bl	800c28c <RegionLinkAdrReq>
 8008340:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8008344:	f000 0007 	and.w	r0, r0, #7
 8008348:	2807      	cmp	r0, #7
 800834a:	d09a      	beq.n	8008282 <ProcessMacCommands+0xc2>
{
 800834c:	2400      	movs	r4, #0
 800834e:	e7b7      	b.n	80082c0 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008350:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8008352:	42bc      	cmp	r4, r7
 8008354:	d204      	bcs.n	8008360 <ProcessMacCommands+0x1a0>
                        macIndex--;
 8008356:	3c01      	subs	r4, #1
 8008358:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800835a:	f04f 0901 	mov.w	r9, #1
 800835e:	e742      	b.n	80081e6 <ProcessMacCommands+0x26>
 8008360:	f04f 0901 	mov.w	r9, #1
                break;
 8008364:	e73f      	b.n	80081e6 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008366:	3402      	adds	r4, #2
 8008368:	b2e4      	uxtb	r4, r4
 800836a:	5dab      	ldrb	r3, [r5, r6]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	495e      	ldr	r1, [pc, #376]	; (80084ec <ProcessMacCommands+0x32c>)
 8008372:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008376:	2201      	movs	r2, #1
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008380:	2200      	movs	r2, #0
 8008382:	a90b      	add	r1, sp, #44	; 0x2c
 8008384:	2004      	movs	r0, #4
 8008386:	f002 fff5 	bl	800b374 <LoRaMacCommandsAddCmd>
                break;
 800838a:	e72c      	b.n	80081e6 <ProcessMacCommands+0x26>
                status = 0x07;
 800838c:	2307      	movs	r3, #7
 800838e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008392:	5dab      	ldrb	r3, [r5, r6]
 8008394:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008398:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800839c:	57ab      	ldrsb	r3, [r5, r6]
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80083a6:	1ca3      	adds	r3, r4, #2
 80083a8:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80083aa:	1ce1      	adds	r1, r4, #3
 80083ac:	b2c9      	uxtb	r1, r1
 80083ae:	5ceb      	ldrb	r3, [r5, r3]
 80083b0:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80083b2:	1d22      	adds	r2, r4, #4
 80083b4:	b2d2      	uxtb	r2, r2
 80083b6:	5c69      	ldrb	r1, [r5, r1]
 80083b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80083bc:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083be:	3405      	adds	r4, #5
 80083c0:	b2e4      	uxtb	r4, r4
 80083c2:	5caa      	ldrb	r2, [r5, r2]
 80083c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083c8:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 80083ca:	2264      	movs	r2, #100	; 0x64
 80083cc:	fb02 f303 	mul.w	r3, r2, r3
 80083d0:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80083d2:	a907      	add	r1, sp, #28
 80083d4:	4b45      	ldr	r3, [pc, #276]	; (80084ec <ProcessMacCommands+0x32c>)
 80083d6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80083da:	f003 ff69 	bl	800c2b0 <RegionRxParamSetupReq>
 80083de:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 80083e2:	f000 0307 	and.w	r3, r0, #7
 80083e6:	2b07      	cmp	r3, #7
 80083e8:	d007      	beq.n	80083fa <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 80083ea:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80083ee:	2201      	movs	r2, #1
 80083f0:	a90b      	add	r1, sp, #44	; 0x2c
 80083f2:	2005      	movs	r0, #5
 80083f4:	f002 ffbe 	bl	800b374 <LoRaMacCommandsAddCmd>
                break;
 80083f8:	e6f5      	b.n	80081e6 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80083fa:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80083fe:	4b3b      	ldr	r3, [pc, #236]	; (80084ec <ProcessMacCommands+0x32c>)
 8008400:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008404:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008408:	9a08      	ldr	r2, [sp, #32]
 800840a:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800840c:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800840e:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8008412:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8008416:	e7e8      	b.n	80083ea <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008418:	4b33      	ldr	r3, [pc, #204]	; (80084e8 <ProcessMacCommands+0x328>)
 800841a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800841e:	b17b      	cbz	r3, 8008440 <ProcessMacCommands+0x280>
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	b17b      	cbz	r3, 8008444 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008424:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008426:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800842a:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800842e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008432:	2202      	movs	r2, #2
 8008434:	a90b      	add	r1, sp, #44	; 0x2c
 8008436:	2006      	movs	r0, #6
 8008438:	f002 ff9c 	bl	800b374 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800843c:	4634      	mov	r4, r6
                break;
 800843e:	e6d2      	b.n	80081e6 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008440:	20ff      	movs	r0, #255	; 0xff
 8008442:	e7f0      	b.n	8008426 <ProcessMacCommands+0x266>
 8008444:	20ff      	movs	r0, #255	; 0xff
 8008446:	e7ee      	b.n	8008426 <ProcessMacCommands+0x266>
                status = 0x03;
 8008448:	2303      	movs	r3, #3
 800844a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800844e:	1ca3      	adds	r3, r4, #2
 8008450:	b2db      	uxtb	r3, r3
 8008452:	57aa      	ldrsb	r2, [r5, r6]
 8008454:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8008458:	aa07      	add	r2, sp, #28
 800845a:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800845c:	1ce2      	adds	r2, r4, #3
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	5ceb      	ldrb	r3, [r5, r3]
 8008462:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008464:	1d21      	adds	r1, r4, #4
 8008466:	b2c9      	uxtb	r1, r1
 8008468:	5caa      	ldrb	r2, [r5, r2]
 800846a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800846e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008470:	1d62      	adds	r2, r4, #5
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	5c69      	ldrb	r1, [r5, r1]
 8008476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800847a:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800847c:	2164      	movs	r1, #100	; 0x64
 800847e:	fb01 f303 	mul.w	r3, r1, r3
 8008482:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8008488:	3406      	adds	r4, #6
 800848a:	b2e4      	uxtb	r4, r4
 800848c:	56ab      	ldrsb	r3, [r5, r2]
 800848e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008492:	a905      	add	r1, sp, #20
 8008494:	4b15      	ldr	r3, [pc, #84]	; (80084ec <ProcessMacCommands+0x32c>)
 8008496:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800849a:	f003 ff12 	bl	800c2c2 <RegionNewChannelReq>
 800849e:	b2c3      	uxtb	r3, r0
 80084a0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80084a4:	2800      	cmp	r0, #0
 80084a6:	f6ff ae9e 	blt.w	80081e6 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80084aa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80084ae:	2201      	movs	r2, #1
 80084b0:	a90b      	add	r1, sp, #44	; 0x2c
 80084b2:	2007      	movs	r0, #7
 80084b4:	f002 ff5e 	bl	800b374 <LoRaMacCommandsAddCmd>
                break;
 80084b8:	e695      	b.n	80081e6 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80084ba:	3402      	adds	r4, #2
 80084bc:	b2e4      	uxtb	r4, r4
 80084be:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 80084c0:	f013 030f 	ands.w	r3, r3, #15
 80084c4:	d100      	bne.n	80084c8 <ProcessMacCommands+0x308>
                    delay++;
 80084c6:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80084c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80084cc:	fb02 f303 	mul.w	r3, r2, r3
 80084d0:	4a06      	ldr	r2, [pc, #24]	; (80084ec <ProcessMacCommands+0x32c>)
 80084d2:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80084d4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80084d8:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80084da:	2200      	movs	r2, #0
 80084dc:	a90b      	add	r1, sp, #44	; 0x2c
 80084de:	2008      	movs	r0, #8
 80084e0:	f002 ff48 	bl	800b374 <LoRaMacCommandsAddCmd>
                break;
 80084e4:	e67f      	b.n	80081e6 <ProcessMacCommands+0x26>
 80084e6:	bf00      	nop
 80084e8:	20000628 	.word	0x20000628
 80084ec:	20008000 	.word	0x20008000
 80084f0:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 80084f4:	3402      	adds	r4, #2
 80084f6:	b2e4      	uxtb	r4, r4
 80084f8:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 80084fa:	2200      	movs	r2, #0
 80084fc:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8008500:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008504:	f013 0f20 	tst.w	r3, #32
 8008508:	d002      	beq.n	8008510 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800850a:	2201      	movs	r2, #1
 800850c:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008510:	f013 0f10 	tst.w	r3, #16
 8008514:	d002      	beq.n	800851c <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 8008516:	2201      	movs	r2, #1
 8008518:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008524:	a903      	add	r1, sp, #12
 8008526:	4b9b      	ldr	r3, [pc, #620]	; (8008794 <ProcessMacCommands+0x5d4>)
 8008528:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800852c:	f003 fed2 	bl	800c2d4 <RegionTxParamSetupReq>
 8008530:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008534:	f43f ae57 	beq.w	80081e6 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8008538:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800853c:	4e95      	ldr	r6, [pc, #596]	; (8008794 <ProcessMacCommands+0x5d4>)
 800853e:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8008542:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008546:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800854a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800854e:	4a92      	ldr	r2, [pc, #584]	; (8008798 <ProcessMacCommands+0x5d8>)
 8008550:	5cd0      	ldrb	r0, [r2, r3]
 8008552:	f7f8 f93b 	bl	80007cc <__aeabi_ui2f>
 8008556:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8008558:	2302      	movs	r3, #2
 800855a:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800855e:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008562:	a907      	add	r1, sp, #28
 8008564:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8008568:	f003 fe30 	bl	800c1cc <RegionGetPhyParam>
 800856c:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800856e:	b240      	sxtb	r0, r0
 8008570:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8008574:	4298      	cmp	r0, r3
 8008576:	bfb8      	it	lt
 8008578:	4618      	movlt	r0, r3
 800857a:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800857e:	2200      	movs	r2, #0
 8008580:	a90b      	add	r1, sp, #44	; 0x2c
 8008582:	2009      	movs	r0, #9
 8008584:	f002 fef6 	bl	800b374 <LoRaMacCommandsAddCmd>
                break;
 8008588:	e62d      	b.n	80081e6 <ProcessMacCommands+0x26>
                status = 0x03;
 800858a:	2303      	movs	r3, #3
 800858c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8008590:	1ca3      	adds	r3, r4, #2
 8008592:	b2db      	uxtb	r3, r3
 8008594:	5daa      	ldrb	r2, [r5, r6]
 8008596:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800859a:	1ce1      	adds	r1, r4, #3
 800859c:	b2c9      	uxtb	r1, r1
 800859e:	5ceb      	ldrb	r3, [r5, r3]
 80085a0:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80085a2:	1d22      	adds	r2, r4, #4
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	5c69      	ldrb	r1, [r5, r1]
 80085a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80085ac:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80085ae:	3405      	adds	r4, #5
 80085b0:	b2e4      	uxtb	r4, r4
 80085b2:	5caa      	ldrb	r2, [r5, r2]
 80085b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085b8:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 80085ba:	2264      	movs	r2, #100	; 0x64
 80085bc:	fb02 f303 	mul.w	r3, r2, r3
 80085c0:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80085c2:	a907      	add	r1, sp, #28
 80085c4:	4b73      	ldr	r3, [pc, #460]	; (8008794 <ProcessMacCommands+0x5d4>)
 80085c6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80085ca:	f003 fe8c 	bl	800c2e6 <RegionDlChannelReq>
 80085ce:	b2c3      	uxtb	r3, r0
 80085d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80085d4:	2800      	cmp	r0, #0
 80085d6:	f6ff ae06 	blt.w	80081e6 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80085da:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80085de:	2201      	movs	r2, #1
 80085e0:	a90b      	add	r1, sp, #44	; 0x2c
 80085e2:	200a      	movs	r0, #10
 80085e4:	f002 fec6 	bl	800b374 <LoRaMacCommandsAddCmd>
                break;
 80085e8:	e5fd      	b.n	80081e6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80085ea:	2009      	movs	r0, #9
 80085ec:	f003 f886 	bl	800b6fc <LoRaMacConfirmQueueIsCmdActive>
 80085f0:	b928      	cbnz	r0, 80085fe <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80085f2:	4b6a      	ldr	r3, [pc, #424]	; (800879c <ProcessMacCommands+0x5dc>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 80085fa:	4634      	mov	r4, r6
 80085fc:	e5f3      	b.n	80081e6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80085fe:	2109      	movs	r1, #9
 8008600:	2000      	movs	r0, #0
 8008602:	f003 f82f 	bl	800b664 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8008606:	a803      	add	r0, sp, #12
 8008608:	2300      	movs	r3, #0
 800860a:	9303      	str	r3, [sp, #12]
 800860c:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800860e:	f10d 0a14 	add.w	sl, sp, #20
 8008612:	9305      	str	r3, [sp, #20]
 8008614:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 8008616:	f10d 0b1c 	add.w	fp, sp, #28
 800861a:	9307      	str	r3, [sp, #28]
 800861c:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800861e:	1ca1      	adds	r1, r4, #2
 8008620:	b2c9      	uxtb	r1, r1
 8008622:	5dab      	ldrb	r3, [r5, r6]
 8008624:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008626:	1ce2      	adds	r2, r4, #3
 8008628:	b2d2      	uxtb	r2, r2
 800862a:	5c69      	ldrb	r1, [r5, r1]
 800862c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008630:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008632:	1d21      	adds	r1, r4, #4
 8008634:	b2c9      	uxtb	r1, r1
 8008636:	5caa      	ldrb	r2, [r5, r2]
 8008638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800863c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800863e:	1d62      	adds	r2, r4, #5
 8008640:	b2d2      	uxtb	r2, r2
 8008642:	5c69      	ldrb	r1, [r5, r1]
 8008644:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008648:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800864a:	3406      	adds	r4, #6
 800864c:	b2e4      	uxtb	r4, r4
 800864e:	5caa      	ldrb	r2, [r5, r2]
 8008650:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008654:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008658:	fb01 f202 	mul.w	r2, r1, r2
 800865c:	0a12      	lsrs	r2, r2, #8
 800865e:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008662:	c803      	ldmia	r0, {r0, r1}
 8008664:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008668:	4a4d      	ldr	r2, [pc, #308]	; (80087a0 <ProcessMacCommands+0x5e0>)
 800866a:	441a      	add	r2, r3
 800866c:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800866e:	4658      	mov	r0, fp
 8008670:	f008 f8cc 	bl	801080c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008674:	4e49      	ldr	r6, [pc, #292]	; (800879c <ProcessMacCommands+0x5dc>)
 8008676:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 8008680:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8008684:	a80c      	add	r0, sp, #48	; 0x30
 8008686:	f008 f880 	bl	801078a <SysTimeSub>
 800868a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008690:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008694:	4650      	mov	r0, sl
 8008696:	f008 f859 	bl	801074c <SysTimeAdd>
                    SysTimeSet( sysTime );
 800869a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800869e:	f008 f893 	bl	80107c8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80086a2:	f002 fdcb 	bl	800b23c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80086a6:	2301      	movs	r3, #1
 80086a8:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 80086ac:	e59b      	b.n	80081e6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80086ae:	200c      	movs	r0, #12
 80086b0:	f003 f824 	bl	800b6fc <LoRaMacConfirmQueueIsCmdActive>
 80086b4:	b908      	cbnz	r0, 80086ba <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 80086b6:	4634      	mov	r4, r6
 80086b8:	e595      	b.n	80081e6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80086ba:	210c      	movs	r1, #12
 80086bc:	2000      	movs	r0, #0
 80086be:	f002 ffd1 	bl	800b664 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80086c2:	4b36      	ldr	r3, [pc, #216]	; (800879c <ProcessMacCommands+0x5dc>)
 80086c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80086c8:	3b04      	subs	r3, #4
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d801      	bhi.n	80086d4 <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 80086d0:	4634      	mov	r4, r6
 80086d2:	e588      	b.n	80081e6 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 80086d4:	f002 fdae 	bl	800b234 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80086d8:	4634      	mov	r4, r6
 80086da:	e584      	b.n	80081e6 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 80086dc:	1ca2      	adds	r2, r4, #2
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80086e2:	1ce1      	adds	r1, r4, #3
 80086e4:	b2c9      	uxtb	r1, r1
 80086e6:	5caa      	ldrb	r2, [r5, r2]
 80086e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80086ec:	1d22      	adds	r2, r4, #4
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	5c69      	ldrb	r1, [r5, r1]
 80086f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 80086f6:	3405      	adds	r4, #5
 80086f8:	b2e4      	uxtb	r4, r4
 80086fa:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80086fc:	2164      	movs	r1, #100	; 0x64
 80086fe:	fb03 f101 	mul.w	r1, r3, r1
 8008702:	f000 000f 	and.w	r0, r0, #15
 8008706:	f002 fd96 	bl	800b236 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800870a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800870e:	2201      	movs	r2, #1
 8008710:	a90b      	add	r1, sp, #44	; 0x2c
 8008712:	2011      	movs	r0, #17
 8008714:	f002 fe2e 	bl	800b374 <LoRaMacCommandsAddCmd>
                break;
 8008718:	e565      	b.n	80081e6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800871a:	200d      	movs	r0, #13
 800871c:	f002 ffee 	bl	800b6fc <LoRaMacConfirmQueueIsCmdActive>
 8008720:	b908      	cbnz	r0, 8008726 <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 8008722:	4634      	mov	r4, r6
 8008724:	e55f      	b.n	80081e6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008726:	210d      	movs	r1, #13
 8008728:	2000      	movs	r0, #0
 800872a:	f002 ff9b 	bl	800b664 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800872e:	1ca2      	adds	r2, r4, #2
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008734:	1ce3      	adds	r3, r4, #3
 8008736:	b2db      	uxtb	r3, r3
 8008738:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800873a:	3404      	adds	r4, #4
 800873c:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800873e:	4a19      	ldr	r2, [pc, #100]	; (80087a4 <ProcessMacCommands+0x5e4>)
 8008740:	6812      	ldr	r2, [r2, #0]
 8008742:	5ce9      	ldrb	r1, [r5, r3]
 8008744:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8008748:	f002 fd77 	bl	800b23a <LoRaMacClassBBeaconTimingAns>
 800874c:	e54b      	b.n	80081e6 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800874e:	1ca1      	adds	r1, r4, #2
 8008750:	b2c9      	uxtb	r1, r1
 8008752:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008754:	1ce2      	adds	r2, r4, #3
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	5c68      	ldrb	r0, [r5, r1]
 800875a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800875e:	3404      	adds	r4, #4
 8008760:	b2e4      	uxtb	r4, r4
 8008762:	5ca8      	ldrb	r0, [r5, r2]
 8008764:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008768:	2064      	movs	r0, #100	; 0x64
 800876a:	fb03 f000 	mul.w	r0, r3, r0
 800876e:	f002 fd66 	bl	800b23e <LoRaMacClassBBeaconFreqReq>
 8008772:	b140      	cbz	r0, 8008786 <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 8008774:	2301      	movs	r3, #1
 8008776:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800877a:	2201      	movs	r2, #1
 800877c:	a90b      	add	r1, sp, #44	; 0x2c
 800877e:	2013      	movs	r0, #19
 8008780:	f002 fdf8 	bl	800b374 <LoRaMacCommandsAddCmd>
                break;
 8008784:	e52f      	b.n	80081e6 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800878c:	e7f5      	b.n	800877a <ProcessMacCommands+0x5ba>
}
 800878e:	b00f      	add	sp, #60	; 0x3c
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	20008000 	.word	0x20008000
 8008798:	08011698 	.word	0x08011698
 800879c:	20000628 	.word	0x20000628
 80087a0:	12d53d80 	.word	0x12d53d80
 80087a4:	20000bd8 	.word	0x20000bd8

080087a8 <ProcessRadioRxDone>:
{
 80087a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087ac:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 80087ae:	4b96      	ldr	r3, [pc, #600]	; (8008a08 <ProcessRadioRxDone+0x260>)
 80087b0:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80087b2:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80087b4:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80087b8:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80087c0:	4a92      	ldr	r2, [pc, #584]	; (8008a0c <ProcessRadioRxDone+0x264>)
 80087c2:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80087c6:	4a92      	ldr	r2, [pc, #584]	; (8008a10 <ProcessRadioRxDone+0x268>)
 80087c8:	7811      	ldrb	r1, [r2, #0]
 80087ca:	f363 0100 	bfi	r1, r3, #0, #1
 80087ce:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 80087d0:	4c90      	ldr	r4, [pc, #576]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 80087d2:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 80087d6:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 80087da:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80087de:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 80087e2:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 80087e6:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 80087ea:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 80087ee:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 80087f2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 80087f6:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 80087fa:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 80087fe:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008802:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008806:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800880a:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800880e:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008812:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 8008816:	4b80      	ldr	r3, [pc, #512]	; (8008a18 <ProcessRadioRxDone+0x270>)
 8008818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881a:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800881c:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008820:	b1c3      	cbz	r3, 8008854 <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008822:	4629      	mov	r1, r5
 8008824:	4630      	mov	r0, r6
 8008826:	f002 fcf2 	bl	800b20e <LoRaMacClassBRxBeacon>
 800882a:	b9c0      	cbnz	r0, 800885e <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800882c:	4b77      	ldr	r3, [pc, #476]	; (8008a0c <ProcessRadioRxDone+0x264>)
 800882e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008832:	2b01      	cmp	r3, #1
 8008834:	d019      	beq.n	800886a <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 8008836:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8008838:	0963      	lsrs	r3, r4, #5
 800883a:	3b01      	subs	r3, #1
 800883c:	2b06      	cmp	r3, #6
 800883e:	f200 82d4 	bhi.w	8008dea <ProcessRadioRxDone+0x642>
 8008842:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008846:	002f      	.short	0x002f
 8008848:	00b502d2 	.word	0x00b502d2
 800884c:	00b102d2 	.word	0x00b102d2
 8008850:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008854:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008858:	f008 f8c6 	bl	80109e8 <UTIL_TIMER_Stop>
 800885c:	e7e1      	b.n	8008822 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800885e:	4b6d      	ldr	r3, [pc, #436]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 8008860:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008864:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 8008868:	e2bc      	b.n	8008de4 <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800886a:	f002 fcd4 	bl	800b216 <LoRaMacClassBIsPingExpected>
 800886e:	b150      	cbz	r0, 8008886 <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008870:	2000      	movs	r0, #0
 8008872:	f002 fcc5 	bl	800b200 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008876:	2000      	movs	r0, #0
 8008878:	f002 fcc7 	bl	800b20a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800887c:	4b65      	ldr	r3, [pc, #404]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 800887e:	2204      	movs	r2, #4
 8008880:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8008884:	e7d7      	b.n	8008836 <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008886:	f002 fcc8 	bl	800b21a <LoRaMacClassBIsMulticastExpected>
 800888a:	2800      	cmp	r0, #0
 800888c:	d0d3      	beq.n	8008836 <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800888e:	2000      	movs	r0, #0
 8008890:	f002 fcb7 	bl	800b202 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008894:	2000      	movs	r0, #0
 8008896:	f002 fcb9 	bl	800b20c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800889a:	4b5e      	ldr	r3, [pc, #376]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 800889c:	2205      	movs	r2, #5
 800889e:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 80088a2:	e7c8      	b.n	8008836 <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80088a4:	2d10      	cmp	r5, #16
 80088a6:	d962      	bls.n	800896e <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 80088a8:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 80088aa:	b2ed      	uxtb	r5, r5
 80088ac:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80088b0:	4b56      	ldr	r3, [pc, #344]	; (8008a0c <ProcessRadioRxDone+0x264>)
 80088b2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d160      	bne.n	800897c <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80088ba:	f005 fe67 	bl	800e58c <SecureElementGetJoinEui>
 80088be:	4601      	mov	r1, r0
 80088c0:	aa04      	add	r2, sp, #16
 80088c2:	20ff      	movs	r0, #255	; 0xff
 80088c4:	f003 fa90 	bl	800bde8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d163      	bne.n	8008994 <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80088cc:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80088d0:	4b4e      	ldr	r3, [pc, #312]	; (8008a0c <ProcessRadioRxDone+0x264>)
 80088d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80088d6:	f89d 101a 	ldrb.w	r1, [sp, #26]
 80088da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80088de:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80088e2:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80088e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80088ea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80088ee:	9a07      	ldr	r2, [sp, #28]
 80088f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80088f4:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80088f8:	f3c2 1102 	ubfx	r1, r2, #4, #3
 80088fc:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008900:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008904:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008908:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800890c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8008910:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008912:	b90a      	cbnz	r2, 8008918 <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008914:	2201      	movs	r2, #1
 8008916:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008918:	4c3c      	ldr	r4, [pc, #240]	; (8008a0c <ProcessRadioRxDone+0x264>)
 800891a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800891c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008920:	fb02 f303 	mul.w	r3, r2, r3
 8008924:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008926:	4413      	add	r3, r2
 8008928:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008930:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8008934:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 8008936:	3d11      	subs	r5, #17
 8008938:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 800893c:	4b35      	ldr	r3, [pc, #212]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 800893e:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8008942:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008946:	a91d      	add	r1, sp, #116	; 0x74
 8008948:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800894c:	f003 fc6a 	bl	800c224 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008950:	2302      	movs	r3, #2
 8008952:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008956:	2001      	movs	r0, #1
 8008958:	f002 fed0 	bl	800b6fc <LoRaMacConfirmQueueIsCmdActive>
 800895c:	b9a8      	cbnz	r0, 800898a <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800895e:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 8008960:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008964:	f043 0308 	orr.w	r3, r3, #8
 8008968:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800896c:	e227      	b.n	8008dbe <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800896e:	4b29      	ldr	r3, [pc, #164]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008976:	f7ff fbab 	bl	80080d0 <PrepareRxDoneAbort>
                return;
 800897a:	e233      	b.n	8008de4 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800897c:	4b25      	ldr	r3, [pc, #148]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008984:	f7ff fba4 	bl	80080d0 <PrepareRxDoneAbort>
                return;
 8008988:	e22c      	b.n	8008de4 <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800898a:	2101      	movs	r1, #1
 800898c:	2000      	movs	r0, #0
 800898e:	f002 fe69 	bl	800b664 <LoRaMacConfirmQueueSetStatus>
 8008992:	e7e4      	b.n	800895e <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008994:	2001      	movs	r0, #1
 8008996:	f002 feb1 	bl	800b6fc <LoRaMacConfirmQueueIsCmdActive>
 800899a:	2800      	cmp	r0, #0
 800899c:	d0df      	beq.n	800895e <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800899e:	2101      	movs	r1, #1
 80089a0:	2007      	movs	r0, #7
 80089a2:	f002 fe5f 	bl	800b664 <LoRaMacConfirmQueueSetStatus>
 80089a6:	e7da      	b.n	800895e <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80089a8:	4b1a      	ldr	r3, [pc, #104]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80089b0:	4b16      	ldr	r3, [pc, #88]	; (8008a0c <ProcessRadioRxDone+0x264>)
 80089b2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80089b6:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80089ba:	4a16      	ldr	r2, [pc, #88]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 80089bc:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 80089c0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80089c4:	220d      	movs	r2, #13
 80089c6:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80089ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089ce:	b113      	cbz	r3, 80089d6 <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80089d0:	230e      	movs	r3, #14
 80089d2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80089d6:	a91b      	add	r1, sp, #108	; 0x6c
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <ProcessRadioRxDone+0x264>)
 80089da:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80089de:	f003 fbf5 	bl	800c1cc <RegionGetPhyParam>
 80089e2:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80089e4:	f1a5 030d 	sub.w	r3, r5, #13
 80089e8:	b21b      	sxth	r3, r3
 80089ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80089ee:	b200      	sxth	r0, r0
 80089f0:	4283      	cmp	r3, r0
 80089f2:	dc01      	bgt.n	80089f8 <ProcessRadioRxDone+0x250>
 80089f4:	2d0b      	cmp	r5, #11
 80089f6:	d811      	bhi.n	8008a1c <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80089f8:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <ProcessRadioRxDone+0x26c>)
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008a00:	f7ff fb66 	bl	80080d0 <PrepareRxDoneAbort>
                return;
 8008a04:	e1ee      	b.n	8008de4 <ProcessRadioRxDone+0x63c>
 8008a06:	bf00      	nop
 8008a08:	20000bd8 	.word	0x20000bd8
 8008a0c:	20008000 	.word	0x20008000
 8008a10:	20000624 	.word	0x20000624
 8008a14:	20000628 	.word	0x20000628
 8008a18:	08011d10 	.word	0x08011d10
            macMsgData.Buffer = payload;
 8008a1c:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 8008a1e:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008a22:	4bba      	ldr	r3, [pc, #744]	; (8008d0c <ProcessRadioRxDone+0x564>)
 8008a24:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008a26:	23ff      	movs	r3, #255	; 0xff
 8008a28:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008a2c:	a80e      	add	r0, sp, #56	; 0x38
 8008a2e:	f003 faa1 	bl	800bf74 <LoRaMacParserData>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d142      	bne.n	8008abc <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008a36:	4bb6      	ldr	r3, [pc, #728]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008a38:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d044      	beq.n	8008aca <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008a40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a42:	4bb4      	ldr	r3, [pc, #720]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008a44:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008a48:	f10d 010a 	add.w	r1, sp, #10
 8008a4c:	a80e      	add	r0, sp, #56	; 0x38
 8008a4e:	f7ff f9d5 	bl	8007dfc <DetermineFrameType>
 8008a52:	4605      	mov	r5, r0
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d163      	bne.n	8008b20 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d065      	beq.n	8008b2e <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8008a62:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008a64:	2d01      	cmp	r5, #1
 8008a66:	d10a      	bne.n	8008a7e <ProcessRadioRxDone+0x2d6>
 8008a68:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	f040 808a 	bne.w	8008b86 <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008a72:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8008a76:	f013 0f60 	tst.w	r3, #96	; 0x60
 8008a7a:	f040 8084 	bne.w	8008b86 <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8008a7e:	ab03      	add	r3, sp, #12
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	f10d 030b 	add.w	r3, sp, #11
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	4ba1      	ldr	r3, [pc, #644]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008a8a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008a8e:	aa0e      	add	r2, sp, #56	; 0x38
 8008a90:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7ff fb59 	bl	800814c <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d07f      	beq.n	8008b9e <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008a9e:	2807      	cmp	r0, #7
 8008aa0:	d078      	beq.n	8008b94 <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008aa2:	4b9c      	ldr	r3, [pc, #624]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008aaa:	9a03      	ldr	r2, [sp, #12]
 8008aac:	4b99      	ldr	r3, [pc, #612]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008aae:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008ab2:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 8008ab6:	f7ff fb0b 	bl	80080d0 <PrepareRxDoneAbort>
                return;
 8008aba:	e193      	b.n	8008de4 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008abc:	4b95      	ldr	r3, [pc, #596]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008ac4:	f7ff fb04 	bl	80080d0 <PrepareRxDoneAbort>
                return;
 8008ac8:	e18c      	b.n	8008de4 <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8008aca:	f002 fba4 	bl	800b216 <LoRaMacClassBIsPingExpected>
 8008ace:	b188      	cbz	r0, 8008af4 <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f002 fb95 	bl	800b200 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	f002 fb97 	bl	800b20a <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008adc:	4b8d      	ldr	r3, [pc, #564]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008ade:	2204      	movs	r2, #4
 8008ae0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008ae4:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008ae8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008aec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008aee:	f002 fbab 	bl	800b248 <LoRaMacClassBSetFPendingBit>
 8008af2:	e7a5      	b.n	8008a40 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008af4:	f002 fb91 	bl	800b21a <LoRaMacClassBIsMulticastExpected>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0a1      	beq.n	8008a40 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008afc:	2000      	movs	r0, #0
 8008afe:	f002 fb80 	bl	800b202 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008b02:	2000      	movs	r0, #0
 8008b04:	f002 fb82 	bl	800b20c <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008b08:	4b82      	ldr	r3, [pc, #520]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008b0a:	2205      	movs	r2, #5
 8008b0c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008b10:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008b14:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008b18:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b1a:	f002 fb95 	bl	800b248 <LoRaMacClassBSetFPendingBit>
 8008b1e:	e78f      	b.n	8008a40 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b20:	4b7c      	ldr	r3, [pc, #496]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008b28:	f7ff fad2 	bl	80080d0 <PrepareRxDoneAbort>
                return;
 8008b2c:	e15a      	b.n	8008de4 <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008b2e:	4618      	mov	r0, r3
 8008b30:	4a77      	ldr	r2, [pc, #476]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008b32:	212c      	movs	r1, #44	; 0x2c
 8008b34:	fb01 2203 	mla	r2, r1, r3, r2
 8008b38:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8008b3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b3e:	428a      	cmp	r2, r1
 8008b40:	d002      	beq.n	8008b48 <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008b42:	3301      	adds	r3, #1
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	e78a      	b.n	8008a5e <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008b48:	4971      	ldr	r1, [pc, #452]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008b4a:	262c      	movs	r6, #44	; 0x2c
 8008b4c:	fb06 1103 	mla	r1, r6, r3, r1
 8008b50:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008b54:	2900      	cmp	r1, #0
 8008b56:	d0f4      	beq.n	8008b42 <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008b58:	4b6d      	ldr	r3, [pc, #436]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008b5a:	fb06 3000 	mla	r0, r6, r0, r3
 8008b5e:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008b62:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 8008b66:	6809      	ldr	r1, [r1, #0]
 8008b68:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008b6a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d002      	beq.n	8008b78 <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008b72:	4690      	mov	r8, r2
                    multicast = 1;
 8008b74:	2501      	movs	r5, #1
 8008b76:	e775      	b.n	8008a64 <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008b78:	4b66      	ldr	r3, [pc, #408]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008b7a:	2103      	movs	r1, #3
 8008b7c:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008b80:	4690      	mov	r8, r2
                    multicast = 1;
 8008b82:	2501      	movs	r5, #1
 8008b84:	e76e      	b.n	8008a64 <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b86:	4b63      	ldr	r3, [pc, #396]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008b8e:	f7ff fa9f 	bl	80080d0 <PrepareRxDoneAbort>
                return;
 8008b92:	e127      	b.n	8008de4 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008b94:	4b5f      	ldr	r3, [pc, #380]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008b96:	2208      	movs	r2, #8
 8008b98:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8008b9c:	e785      	b.n	8008aaa <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008b9e:	ab0e      	add	r3, sp, #56	; 0x38
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008ba8:	4641      	mov	r1, r8
 8008baa:	4630      	mov	r0, r6
 8008bac:	f003 f870 	bl	800bc90 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d13d      	bne.n	8008c30 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008bb4:	4b57      	ldr	r3, [pc, #348]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 8008bbc:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008bc0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008bc4:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8008bc8:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 8008bcc:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 8008bd0:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008bd4:	9803      	ldr	r0, [sp, #12]
 8008bd6:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008bda:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008bde:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008be2:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008be6:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008bea:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008bee:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 8008bf2:	2801      	cmp	r0, #1
 8008bf4:	d92a      	bls.n	8008c4c <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 8008bf6:	2d01      	cmp	r5, #1
 8008bf8:	d02e      	beq.n	8008c58 <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008bfa:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008bfe:	2ca0      	cmp	r4, #160	; 0xa0
 8008c00:	d02f      	beq.n	8008c62 <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008c02:	2300      	movs	r3, #0
 8008c04:	4a42      	ldr	r2, [pc, #264]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008c06:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008c0a:	4a42      	ldr	r2, [pc, #264]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008c0c:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008c10:	4b40      	ldr	r3, [pc, #256]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008c12:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 8008c16:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008c1a:	f7ff fac2 	bl	80081a2 <RemoveMacCommands>
            switch( fType )
 8008c1e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	f200 809a 	bhi.w	8008d5c <ProcessRadioRxDone+0x5b4>
 8008c28:	e8df f003 	tbb	[pc, r3]
 8008c2c:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8008c30:	2802      	cmp	r0, #2
 8008c32:	d006      	beq.n	8008c42 <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008c34:	4b37      	ldr	r3, [pc, #220]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008c36:	220b      	movs	r2, #11
 8008c38:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008c3c:	f7ff fa48 	bl	80080d0 <PrepareRxDoneAbort>
                return;
 8008c40:	e0d0      	b.n	8008de4 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8008c42:	4b34      	ldr	r3, [pc, #208]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008c44:	220a      	movs	r2, #10
 8008c46:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8008c4a:	e7f7      	b.n	8008c3c <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8008c4c:	4b30      	ldr	r3, [pc, #192]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008c4e:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8008c56:	e7ce      	b.n	8008bf6 <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008c58:	4b2e      	ldr	r3, [pc, #184]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8008c60:	e7d6      	b.n	8008c10 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8008c62:	4b2b      	ldr	r3, [pc, #172]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008c6a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8008c6e:	b913      	cbnz	r3, 8008c76 <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8008c70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c72:	4b27      	ldr	r3, [pc, #156]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008c74:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008c76:	4b27      	ldr	r3, [pc, #156]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008c7e:	4290      	cmp	r0, r2
 8008c80:	d9c6      	bls.n	8008c10 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8008c82:	4b23      	ldr	r3, [pc, #140]	; (8008d10 <ProcessRadioRxDone+0x568>)
 8008c84:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008c88:	4b22      	ldr	r3, [pc, #136]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008c8a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8008c8e:	4a22      	ldr	r2, [pc, #136]	; (8008d18 <ProcessRadioRxDone+0x570>)
 8008c90:	6812      	ldr	r2, [r2, #0]
 8008c92:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 8008c96:	e7bb      	b.n	8008c10 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008c98:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008c9c:	4c1d      	ldr	r4, [pc, #116]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008c9e:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	f002 020f 	and.w	r2, r2, #15
 8008caa:	2100      	movs	r1, #0
 8008cac:	a812      	add	r0, sp, #72	; 0x48
 8008cae:	f7ff fa87 	bl	80081c0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008cb2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008cb6:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008cba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cbc:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008cc0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8008cc4:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8008cce:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008cd2:	2be0      	cmp	r3, #224	; 0xe0
 8008cd4:	d049      	beq.n	8008d6a <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008cd6:	4a0f      	ldr	r2, [pc, #60]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008cd8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008cdc:	f043 0302 	orr.w	r3, r3, #2
 8008ce0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 8008ce4:	e06b      	b.n	8008dbe <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008ce6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008cea:	4c0a      	ldr	r4, [pc, #40]	; (8008d14 <ProcessRadioRxDone+0x56c>)
 8008cec:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	f002 020f 	and.w	r2, r2, #15
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	a812      	add	r0, sp, #72	; 0x48
 8008cfc:	f7ff fa60 	bl	80081c0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d00:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008d04:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 8008d08:	e7e1      	b.n	8008cce <ProcessRadioRxDone+0x526>
 8008d0a:	bf00      	nop
 8008d0c:	20000860 	.word	0x20000860
 8008d10:	20008000 	.word	0x20008000
 8008d14:	20000628 	.word	0x20000628
 8008d18:	20000bd8 	.word	0x20000bd8
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008d1c:	4c3d      	ldr	r4, [pc, #244]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008d1e:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	463b      	mov	r3, r7
 8008d26:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d2e:	f7ff fa47 	bl	80081c0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d32:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008d36:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 8008d3a:	e7c8      	b.n	8008cce <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d3c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8008d40:	4b34      	ldr	r3, [pc, #208]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008d42:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008d46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d48:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008d4c:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8008d50:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 8008d5a:	e7b8      	b.n	8008cce <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d5c:	4b2d      	ldr	r3, [pc, #180]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 8008d64:	f7ff f9b4 	bl	80080d0 <PrepareRxDoneAbort>
                    break;
 8008d68:	e7b1      	b.n	8008cce <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8008d6a:	4a2b      	ldr	r2, [pc, #172]	; (8008e18 <ProcessRadioRxDone+0x670>)
 8008d6c:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 8008d70:	2a00      	cmp	r2, #0
 8008d72:	d1b0      	bne.n	8008cd6 <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d74:	4a27      	ldr	r2, [pc, #156]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008d76:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 8008d80:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 8008d84:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 8008d88:	e7a5      	b.n	8008cd6 <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008d8a:	1e6a      	subs	r2, r5, #1
 8008d8c:	4c21      	ldr	r4, [pc, #132]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008d8e:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8008d92:	b292      	uxth	r2, r2
 8008d94:	1c71      	adds	r1, r6, #1
 8008d96:	4638      	mov	r0, r7
 8008d98:	f005 fc29 	bl	800e5ee <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008da8:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008dac:	3d01      	subs	r5, #1
 8008dae:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008db2:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 8008db6:	f043 0302 	orr.w	r3, r3, #2
 8008dba:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008dbe:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008dc0:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d917      	bls.n	8008df8 <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8008dc8:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008dca:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d006      	beq.n	8008de0 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8008dd2:	4a10      	ldr	r2, [pc, #64]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008dd4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008dd8:	f043 0320 	orr.w	r3, r3, #32
 8008ddc:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8008de0:	f7fe ff80 	bl	8007ce4 <UpdateRxSlotIdleState>
}
 8008de4:	b021      	add	sp, #132	; 0x84
 8008de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008dea:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 8008df2:	f7ff f96d 	bl	80080d0 <PrepareRxDoneAbort>
            break;
 8008df6:	e7e2      	b.n	8008dbe <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008dfa:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0e2      	beq.n	8008dc8 <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8008e02:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <ProcessRadioRxDone+0x66c>)
 8008e04:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0dd      	beq.n	8008dc8 <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	f7ff f949 	bl	80080a4 <OnRetransmitTimeoutTimerEvent>
 8008e12:	e7d9      	b.n	8008dc8 <ProcessRadioRxDone+0x620>
 8008e14:	20000628 	.word	0x20000628
 8008e18:	20008000 	.word	0x20008000

08008e1c <ProcessRadioTxTimeout>:
{
 8008e1c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008e1e:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <ProcessRadioTxTimeout+0x40>)
 8008e20:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d002      	beq.n	8008e2e <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8008e28:	4b0d      	ldr	r3, [pc, #52]	; (8008e60 <ProcessRadioTxTimeout+0x44>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008e2e:	f7fe ff59 	bl	8007ce4 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008e32:	4c0c      	ldr	r4, [pc, #48]	; (8008e64 <ProcessRadioTxTimeout+0x48>)
 8008e34:	2002      	movs	r0, #2
 8008e36:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008e3a:	f002 fc41 	bl	800b6c0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008e3e:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8008e42:	b113      	cbz	r3, 8008e4a <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 8008e44:	2201      	movs	r2, #1
 8008e46:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008e4a:	4a06      	ldr	r2, [pc, #24]	; (8008e64 <ProcessRadioTxTimeout+0x48>)
 8008e4c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008e50:	f043 0320 	orr.w	r3, r3, #32
 8008e54:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 8008e58:	bd10      	pop	{r4, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20008000 	.word	0x20008000
 8008e60:	08011d10 	.word	0x08011d10
 8008e64:	20000628 	.word	0x20000628

08008e68 <CheckForClassBCollision>:
{
 8008e68:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008e6a:	f002 f9d2 	bl	800b212 <LoRaMacClassBIsBeaconExpected>
 8008e6e:	b978      	cbnz	r0, 8008e90 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008e70:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <CheckForClassBCollision+0x30>)
 8008e72:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d001      	beq.n	8008e7e <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8008e7a:	2000      	movs	r0, #0
}
 8008e7c:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008e7e:	f002 f9ca 	bl	800b216 <LoRaMacClassBIsPingExpected>
 8008e82:	b938      	cbnz	r0, 8008e94 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008e84:	f002 f9c9 	bl	800b21a <LoRaMacClassBIsMulticastExpected>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d0f7      	beq.n	8008e7c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008e8c:	200f      	movs	r0, #15
 8008e8e:	e7f5      	b.n	8008e7c <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008e90:	200e      	movs	r0, #14
 8008e92:	e7f3      	b.n	8008e7c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008e94:	200f      	movs	r0, #15
 8008e96:	e7f1      	b.n	8008e7c <CheckForClassBCollision+0x14>
 8008e98:	20008000 	.word	0x20008000

08008e9c <HandleRadioRxErrorTimeout>:
{
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008ea2:	4b34      	ldr	r3, [pc, #208]	; (8008f74 <HandleRadioRxErrorTimeout+0xd8>)
 8008ea4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d002      	beq.n	8008eb2 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008eac:	4b32      	ldr	r3, [pc, #200]	; (8008f78 <HandleRadioRxErrorTimeout+0xdc>)
 8008eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb0:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008eb2:	f002 f9ae 	bl	800b212 <LoRaMacClassBIsBeaconExpected>
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	bb50      	cbnz	r0, 8008f10 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008eba:	4b2e      	ldr	r3, [pc, #184]	; (8008f74 <HandleRadioRxErrorTimeout+0xd8>)
 8008ebc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d02c      	beq.n	8008f1e <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 8008ec4:	2e00      	cmp	r6, #0
 8008ec6:	d152      	bne.n	8008f6e <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008ec8:	4b2c      	ldr	r3, [pc, #176]	; (8008f7c <HandleRadioRxErrorTimeout+0xe0>)
 8008eca:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d13c      	bne.n	8008f4c <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 8008ed2:	4b2a      	ldr	r3, [pc, #168]	; (8008f7c <HandleRadioRxErrorTimeout+0xe0>)
 8008ed4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8008ed8:	b113      	cbz	r3, 8008ee0 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008eda:	4b28      	ldr	r3, [pc, #160]	; (8008f7c <HandleRadioRxErrorTimeout+0xe0>)
 8008edc:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f002 fbed 	bl	800b6c0 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008ee6:	4b23      	ldr	r3, [pc, #140]	; (8008f74 <HandleRadioRxErrorTimeout+0xd8>)
 8008ee8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008eea:	f007 fd47 	bl	801097c <UTIL_TIMER_GetElapsedTime>
 8008eee:	4b23      	ldr	r3, [pc, #140]	; (8008f7c <HandleRadioRxErrorTimeout+0xe0>)
 8008ef0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008ef4:	4298      	cmp	r0, r3
 8008ef6:	d33a      	bcc.n	8008f6e <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008ef8:	4c20      	ldr	r4, [pc, #128]	; (8008f7c <HandleRadioRxErrorTimeout+0xe0>)
 8008efa:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008efe:	f007 fd73 	bl	80109e8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008f02:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 8008f06:	f043 0320 	orr.w	r3, r3, #32
 8008f0a:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 8008f0e:	e02e      	b.n	8008f6e <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008f10:	2002      	movs	r0, #2
 8008f12:	f002 f974 	bl	800b1fe <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008f16:	2000      	movs	r0, #0
 8008f18:	f002 f976 	bl	800b208 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008f1c:	e7cd      	b.n	8008eba <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008f1e:	f002 f97a 	bl	800b216 <LoRaMacClassBIsPingExpected>
 8008f22:	4607      	mov	r7, r0
 8008f24:	b950      	cbnz	r0, 8008f3c <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008f26:	f002 f978 	bl	800b21a <LoRaMacClassBIsMulticastExpected>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d0ca      	beq.n	8008ec4 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f2e:	2000      	movs	r0, #0
 8008f30:	f002 f967 	bl	800b202 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008f34:	2000      	movs	r0, #0
 8008f36:	f002 f969 	bl	800b20c <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008f3a:	e018      	b.n	8008f6e <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f002 f95f 	bl	800b200 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008f42:	2000      	movs	r0, #0
 8008f44:	f002 f961 	bl	800b20a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008f48:	463e      	mov	r6, r7
 8008f4a:	e7ec      	b.n	8008f26 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 8008f4c:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <HandleRadioRxErrorTimeout+0xe0>)
 8008f4e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8008f52:	b113      	cbz	r3, 8008f5a <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008f54:	4b09      	ldr	r3, [pc, #36]	; (8008f7c <HandleRadioRxErrorTimeout+0xe0>)
 8008f56:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f002 fbb0 	bl	800b6c0 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8008f60:	4a06      	ldr	r2, [pc, #24]	; (8008f7c <HandleRadioRxErrorTimeout+0xe0>)
 8008f62:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008f66:	f043 0320 	orr.w	r3, r3, #32
 8008f6a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8008f6e:	f7fe feb9 	bl	8007ce4 <UpdateRxSlotIdleState>
}
 8008f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f74:	20008000 	.word	0x20008000
 8008f78:	08011d10 	.word	0x08011d10
 8008f7c:	20000628 	.word	0x20000628

08008f80 <ProcessRadioRxError>:
{
 8008f80:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008f82:	2106      	movs	r1, #6
 8008f84:	2005      	movs	r0, #5
 8008f86:	f7ff ff89 	bl	8008e9c <HandleRadioRxErrorTimeout>
}
 8008f8a:	bd08      	pop	{r3, pc}

08008f8c <ProcessRadioRxTimeout>:
{
 8008f8c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008f8e:	2104      	movs	r1, #4
 8008f90:	2003      	movs	r0, #3
 8008f92:	f7ff ff83 	bl	8008e9c <HandleRadioRxErrorTimeout>
}
 8008f96:	bd08      	pop	{r3, pc}

08008f98 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f98:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008f9c:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8008f9e:	4a14      	ldr	r2, [pc, #80]	; (8008ff0 <LoRaMacHandleIrqEvents+0x58>)
 8008fa0:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fa6:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008faa:	b303      	cbz	r3, 8008fee <LoRaMacHandleIrqEvents+0x56>
{
 8008fac:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8008fae:	b2dc      	uxtb	r4, r3
 8008fb0:	f013 0f20 	tst.w	r3, #32
 8008fb4:	d10c      	bne.n	8008fd0 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8008fb6:	f014 0f10 	tst.w	r4, #16
 8008fba:	d10c      	bne.n	8008fd6 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008fbc:	f014 0f08 	tst.w	r4, #8
 8008fc0:	d10c      	bne.n	8008fdc <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8008fc2:	f014 0f04 	tst.w	r4, #4
 8008fc6:	d10c      	bne.n	8008fe2 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8008fc8:	f014 0f02 	tst.w	r4, #2
 8008fcc:	d10c      	bne.n	8008fe8 <LoRaMacHandleIrqEvents+0x50>
}
 8008fce:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8008fd0:	f7fe fff2 	bl	8007fb8 <ProcessRadioTxDone>
 8008fd4:	e7ef      	b.n	8008fb6 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8008fd6:	f7ff fbe7 	bl	80087a8 <ProcessRadioRxDone>
 8008fda:	e7ef      	b.n	8008fbc <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8008fdc:	f7ff ff1e 	bl	8008e1c <ProcessRadioTxTimeout>
 8008fe0:	e7ef      	b.n	8008fc2 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8008fe2:	f7ff ffcd 	bl	8008f80 <ProcessRadioRxError>
 8008fe6:	e7ef      	b.n	8008fc8 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8008fe8:	f7ff ffd0 	bl	8008f8c <ProcessRadioRxTimeout>
}
 8008fec:	e7ef      	b.n	8008fce <LoRaMacHandleIrqEvents+0x36>
 8008fee:	4770      	bx	lr
 8008ff0:	20000624 	.word	0x20000624

08008ff4 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 8008ff4:	b909      	cbnz	r1, 8008ffa <LoRaMacHandleResponseTimeout+0x6>
    return false;
 8008ff6:	2000      	movs	r0, #0
}
 8008ff8:	4770      	bx	lr
{
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8009000:	f007 fcbc 	bl	801097c <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8009004:	42a0      	cmp	r0, r4
 8009006:	d801      	bhi.n	800900c <LoRaMacHandleResponseTimeout+0x18>
    return false;
 8009008:	2000      	movs	r0, #0
}
 800900a:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800900c:	4b02      	ldr	r3, [pc, #8]	; (8009018 <LoRaMacHandleResponseTimeout+0x24>)
 800900e:	2200      	movs	r2, #0
 8009010:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 8009014:	2001      	movs	r0, #1
 8009016:	e7f8      	b.n	800900a <LoRaMacHandleResponseTimeout+0x16>
 8009018:	20008000 	.word	0x20008000

0800901c <LoRaMacHandleMlmeRequest>:
{
 800901c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800901e:	4b14      	ldr	r3, [pc, #80]	; (8009070 <LoRaMacHandleMlmeRequest+0x54>)
 8009020:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009024:	f013 0f04 	tst.w	r3, #4
 8009028:	d100      	bne.n	800902c <LoRaMacHandleMlmeRequest+0x10>
}
 800902a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800902c:	2001      	movs	r0, #1
 800902e:	f002 fb65 	bl	800b6fc <LoRaMacConfirmQueueIsCmdActive>
 8009032:	b178      	cbz	r0, 8009054 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009034:	2001      	movs	r0, #1
 8009036:	f002 fb2b 	bl	800b690 <LoRaMacConfirmQueueGetStatus>
 800903a:	b918      	cbnz	r0, 8009044 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800903c:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <LoRaMacHandleMlmeRequest+0x54>)
 800903e:	2200      	movs	r2, #0
 8009040:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009044:	4a0a      	ldr	r2, [pc, #40]	; (8009070 <LoRaMacHandleMlmeRequest+0x54>)
 8009046:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800904a:	f023 0302 	bic.w	r3, r3, #2
 800904e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8009052:	e7ea      	b.n	800902a <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8009054:	2005      	movs	r0, #5
 8009056:	f002 fb51 	bl	800b6fc <LoRaMacConfirmQueueIsCmdActive>
 800905a:	2800      	cmp	r0, #0
 800905c:	d0e5      	beq.n	800902a <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800905e:	4a04      	ldr	r2, [pc, #16]	; (8009070 <LoRaMacHandleMlmeRequest+0x54>)
 8009060:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009064:	f023 0302 	bic.w	r3, r3, #2
 8009068:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800906c:	e7dd      	b.n	800902a <LoRaMacHandleMlmeRequest+0xe>
 800906e:	bf00      	nop
 8009070:	20000628 	.word	0x20000628

08009074 <SerializeTxFrame>:
{
 8009074:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <SerializeTxFrame+0x40>)
 8009078:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800907c:	b11b      	cbz	r3, 8009086 <SerializeTxFrame+0x12>
 800907e:	2b04      	cmp	r3, #4
 8009080:	d00a      	beq.n	8009098 <SerializeTxFrame+0x24>
 8009082:	2003      	movs	r0, #3
}
 8009084:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009086:	480c      	ldr	r0, [pc, #48]	; (80090b8 <SerializeTxFrame+0x44>)
 8009088:	f002 ffd3 	bl	800c032 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800908c:	b968      	cbnz	r0, 80090aa <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800908e:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <SerializeTxFrame+0x40>)
 8009090:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009094:	801a      	strh	r2, [r3, #0]
            break;
 8009096:	e7f5      	b.n	8009084 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8009098:	4807      	ldr	r0, [pc, #28]	; (80090b8 <SerializeTxFrame+0x44>)
 800909a:	f003 f800 	bl	800c09e <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800909e:	b930      	cbnz	r0, 80090ae <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80090a0:	4b04      	ldr	r3, [pc, #16]	; (80090b4 <SerializeTxFrame+0x40>)
 80090a2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80090a6:	801a      	strh	r2, [r3, #0]
            break;
 80090a8:	e7ec      	b.n	8009084 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80090aa:	2011      	movs	r0, #17
 80090ac:	e7ea      	b.n	8009084 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80090ae:	2011      	movs	r0, #17
 80090b0:	e7e8      	b.n	8009084 <SerializeTxFrame+0x10>
 80090b2:	bf00      	nop
 80090b4:	20000628 	.word	0x20000628
 80090b8:	20000730 	.word	0x20000730

080090bc <ComputeRxWindowParameters>:
{
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80090c0:	4c1d      	ldr	r4, [pc, #116]	; (8009138 <ComputeRxWindowParameters+0x7c>)
 80090c2:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80090c6:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 80090ca:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 80090ce:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 80090d2:	4630      	mov	r0, r6
 80090d4:	f003 f928 	bl	800c328 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80090d8:	4d18      	ldr	r5, [pc, #96]	; (800913c <ComputeRxWindowParameters+0x80>)
 80090da:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80090e2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80090e6:	b241      	sxtb	r1, r0
 80090e8:	4630      	mov	r0, r6
 80090ea:	f003 f8ac 	bl	800c246 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80090ee:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80090f6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80090fa:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 80090fe:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009102:	f003 f8a0 	bl	800c246 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009106:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009108:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800910c:	440b      	add	r3, r1
 800910e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009112:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009114:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 8009118:	4413      	add	r3, r2
 800911a:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800911e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009122:	b93b      	cbnz	r3, 8009134 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009124:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009126:	4419      	add	r1, r3
 8009128:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800912c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800912e:	440a      	add	r2, r1
 8009130:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8009134:	b002      	add	sp, #8
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	20008000 	.word	0x20008000
 800913c:	20000628 	.word	0x20000628

08009140 <VerifyTxFrame>:
{
 8009140:	b510      	push	{r4, lr}
 8009142:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009148:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <VerifyTxFrame+0x40>)
 800914a:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 800914e:	b914      	cbnz	r4, 8009156 <VerifyTxFrame+0x16>
}
 8009150:	4620      	mov	r0, r4
 8009152:	b002      	add	sp, #8
 8009154:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009156:	a801      	add	r0, sp, #4
 8009158:	f002 f980 	bl	800b45c <LoRaMacCommandsGetSizeSerializedCmds>
 800915c:	4604      	mov	r4, r0
 800915e:	b968      	cbnz	r0, 800917c <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8009160:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009164:	4b06      	ldr	r3, [pc, #24]	; (8009180 <VerifyTxFrame+0x40>)
 8009166:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800916a:	4b06      	ldr	r3, [pc, #24]	; (8009184 <VerifyTxFrame+0x44>)
 800916c:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8009170:	f7fe ff10 	bl	8007f94 <ValidatePayloadLength>
 8009174:	2800      	cmp	r0, #0
 8009176:	d1eb      	bne.n	8009150 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8009178:	2408      	movs	r4, #8
 800917a:	e7e9      	b.n	8009150 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800917c:	2413      	movs	r4, #19
 800917e:	e7e7      	b.n	8009150 <VerifyTxFrame+0x10>
 8009180:	20008000 	.word	0x20008000
 8009184:	20000628 	.word	0x20000628

08009188 <SecureFrame>:
{
 8009188:	b530      	push	{r4, r5, lr}
 800918a:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8009190:	4b18      	ldr	r3, [pc, #96]	; (80091f4 <SecureFrame+0x6c>)
 8009192:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009196:	b133      	cbz	r3, 80091a6 <SecureFrame+0x1e>
 8009198:	4605      	mov	r5, r0
 800919a:	460c      	mov	r4, r1
 800919c:	2b04      	cmp	r3, #4
 800919e:	d00b      	beq.n	80091b8 <SecureFrame+0x30>
 80091a0:	2003      	movs	r0, #3
}
 80091a2:	b003      	add	sp, #12
 80091a4:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80091a6:	4814      	ldr	r0, [pc, #80]	; (80091f8 <SecureFrame+0x70>)
 80091a8:	f002 fd08 	bl	800bbbc <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80091ac:	b9d8      	cbnz	r0, 80091e6 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80091ae:	4b11      	ldr	r3, [pc, #68]	; (80091f4 <SecureFrame+0x6c>)
 80091b0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80091b4:	801a      	strh	r2, [r3, #0]
            break;
 80091b6:	e7f4      	b.n	80091a2 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80091b8:	a801      	add	r0, sp, #4
 80091ba:	f002 fcb5 	bl	800bb28 <LoRaMacCryptoGetFCntUp>
 80091be:	b9a0      	cbnz	r0, 80091ea <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80091c0:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <SecureFrame+0x6c>)
 80091c2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80091c6:	b113      	cbz	r3, 80091ce <SecureFrame+0x46>
                fCntUp -= 1;
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80091ce:	4b0a      	ldr	r3, [pc, #40]	; (80091f8 <SecureFrame+0x70>)
 80091d0:	4622      	mov	r2, r4
 80091d2:	4629      	mov	r1, r5
 80091d4:	9801      	ldr	r0, [sp, #4]
 80091d6:	f002 fd17 	bl	800bc08 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80091da:	b940      	cbnz	r0, 80091ee <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80091dc:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <SecureFrame+0x6c>)
 80091de:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80091e2:	801a      	strh	r2, [r3, #0]
            break;
 80091e4:	e7dd      	b.n	80091a2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80091e6:	2011      	movs	r0, #17
 80091e8:	e7db      	b.n	80091a2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80091ea:	2012      	movs	r0, #18
 80091ec:	e7d9      	b.n	80091a2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80091ee:	2011      	movs	r0, #17
 80091f0:	e7d7      	b.n	80091a2 <SecureFrame+0x1a>
 80091f2:	bf00      	nop
 80091f4:	20000628 	.word	0x20000628
 80091f8:	20000730 	.word	0x20000730

080091fc <SendFrameOnChannel>:
{
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	4606      	mov	r6, r0
    int8_t txPower = 0;
 8009202:	2300      	movs	r3, #0
 8009204:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8009208:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800920c:	4d35      	ldr	r5, [pc, #212]	; (80092e4 <SendFrameOnChannel+0xe8>)
 800920e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 8009212:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009216:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800921a:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800921e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8009220:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009222:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009224:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009226:	4c30      	ldr	r4, [pc, #192]	; (80092e8 <SendFrameOnChannel+0xec>)
 8009228:	8823      	ldrh	r3, [r4, #0]
 800922a:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800922e:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 8009232:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009236:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800923a:	f10d 0207 	add.w	r2, sp, #7
 800923e:	a902      	add	r1, sp, #8
 8009240:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8009244:	f003 f816 	bl	800c274 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800924e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8009252:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8009256:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800925a:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 800925e:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009262:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 8009266:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800926a:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800926e:	f001 ffd6 	bl	800b21e <LoRaMacClassBIsBeaconModeActive>
 8009272:	bb60      	cbnz	r0, 80092ce <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009274:	4b1b      	ldr	r3, [pc, #108]	; (80092e4 <SendFrameOnChannel+0xe8>)
 8009276:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800927a:	2b01      	cmp	r3, #1
 800927c:	d02f      	beq.n	80092de <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 800927e:	f001 ffd1 	bl	800b224 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8009282:	4b18      	ldr	r3, [pc, #96]	; (80092e4 <SendFrameOnChannel+0xe8>)
 8009284:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009288:	4b17      	ldr	r3, [pc, #92]	; (80092e8 <SendFrameOnChannel+0xec>)
 800928a:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 800928e:	b2c0      	uxtb	r0, r0
 8009290:	f7ff ff7a 	bl	8009188 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8009294:	4604      	mov	r4, r0
 8009296:	b9b8      	cbnz	r0, 80092c8 <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009298:	4813      	ldr	r0, [pc, #76]	; (80092e8 <SendFrameOnChannel+0xec>)
 800929a:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800929e:	f043 0302 	orr.w	r3, r3, #2
 80092a2:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 80092a6:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 80092aa:	3301      	adds	r3, #1
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80092b2:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80092bc:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <SendFrameOnChannel+0xf0>)
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	f830 1b02 	ldrh.w	r1, [r0], #2
 80092c4:	b2c9      	uxtb	r1, r1
 80092c6:	4798      	blx	r3
}
 80092c8:	4620      	mov	r0, r4
 80092ca:	b006      	add	sp, #24
 80092cc:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80092ce:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 80092d2:	f001 ffb6 	bl	800b242 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d0cc      	beq.n	8009274 <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80092da:	2410      	movs	r4, #16
 80092dc:	e7f4      	b.n	80092c8 <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 80092de:	f001 ffb2 	bl	800b246 <LoRaMacClassBStopRxSlots>
 80092e2:	e7cc      	b.n	800927e <SendFrameOnChannel+0x82>
 80092e4:	20008000 	.word	0x20008000
 80092e8:	20000628 	.word	0x20000628
 80092ec:	08011d10 	.word	0x08011d10

080092f0 <ScheduleTx>:
{
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	b08c      	sub	sp, #48	; 0x30
 80092f6:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 80092f8:	f7ff fdb6 	bl	8008e68 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 80092fc:	4604      	mov	r4, r0
 80092fe:	b118      	cbz	r0, 8009308 <ScheduleTx+0x18>
}
 8009300:	4620      	mov	r0, r4
 8009302:	b00c      	add	sp, #48	; 0x30
 8009304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8009308:	f7fe fd50 	bl	8007dac <CalculateBackOff>
    status = SerializeTxFrame( );
 800930c:	f7ff feb2 	bl	8009074 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009310:	4604      	mov	r4, r0
 8009312:	2800      	cmp	r0, #0
 8009314:	d1f4      	bne.n	8009300 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8009316:	4e36      	ldr	r6, [pc, #216]	; (80093f0 <ScheduleTx+0x100>)
 8009318:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800931a:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800931c:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009320:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009324:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 8009328:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800932c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009330:	4640      	mov	r0, r8
 8009332:	f007 fa8d 	bl	8010850 <SysTimeGetMcuTime>
 8009336:	af02      	add	r7, sp, #8
 8009338:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 8009342:	e898 0006 	ldmia.w	r8, {r1, r2}
 8009346:	4638      	mov	r0, r7
 8009348:	f007 fa1f 	bl	801078a <SysTimeSub>
 800934c:	ab07      	add	r3, sp, #28
 800934e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009352:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8009356:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009358:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800935a:	2300      	movs	r3, #0
 800935c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8009360:	2301      	movs	r3, #1
 8009362:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8009366:	4b23      	ldr	r3, [pc, #140]	; (80093f4 <ScheduleTx+0x104>)
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800936e:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8009372:	b92b      	cbnz	r3, 8009380 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8009374:	2301      	movs	r3, #1
 8009376:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800937a:	2300      	movs	r3, #0
 800937c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009380:	4a1c      	ldr	r2, [pc, #112]	; (80093f4 <ScheduleTx+0x104>)
 8009382:	481b      	ldr	r0, [pc, #108]	; (80093f0 <ScheduleTx+0x100>)
 8009384:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 800938e:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 8009392:	a904      	add	r1, sp, #16
 8009394:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8009398:	f002 ffb9 	bl	800c30e <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800939c:	b1b0      	cbz	r0, 80093cc <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800939e:	280b      	cmp	r0, #11
 80093a0:	d122      	bne.n	80093e8 <ScheduleTx+0xf8>
 80093a2:	b31d      	cbz	r5, 80093ec <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80093a4:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <ScheduleTx+0x104>)
 80093a6:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 80093aa:	2900      	cmp	r1, #0
 80093ac:	d0a8      	beq.n	8009300 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80093ae:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80093b2:	f042 0220 	orr.w	r2, r2, #32
 80093b6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80093ba:	f503 755a 	add.w	r5, r3, #872	; 0x368
 80093be:	4628      	mov	r0, r5
 80093c0:	f007 fbb2 	bl	8010b28 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80093c4:	4628      	mov	r0, r5
 80093c6:	f007 fb69 	bl	8010a9c <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 80093ca:	e799      	b.n	8009300 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 80093cc:	f7ff fe76 	bl	80090bc <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 80093d0:	f7ff feb6 	bl	8009140 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80093d4:	4604      	mov	r4, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d192      	bne.n	8009300 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 80093da:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <ScheduleTx+0x104>)
 80093dc:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 80093e0:	f7ff ff0c 	bl	80091fc <SendFrameOnChannel>
 80093e4:	4604      	mov	r4, r0
 80093e6:	e78b      	b.n	8009300 <ScheduleTx+0x10>
            return status;
 80093e8:	4604      	mov	r4, r0
 80093ea:	e789      	b.n	8009300 <ScheduleTx+0x10>
 80093ec:	4604      	mov	r4, r0
 80093ee:	e787      	b.n	8009300 <ScheduleTx+0x10>
 80093f0:	20008000 	.word	0x20008000
 80093f4:	20000628 	.word	0x20000628

080093f8 <OnTxDelayedTimerEvent>:
{
 80093f8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80093fa:	4c16      	ldr	r4, [pc, #88]	; (8009454 <OnTxDelayedTimerEvent+0x5c>)
 80093fc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009400:	f007 faf2 	bl	80109e8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009404:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009408:	f023 0320 	bic.w	r3, r3, #32
 800940c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8009410:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 8009414:	4b10      	ldr	r3, [pc, #64]	; (8009458 <OnTxDelayedTimerEvent+0x60>)
 8009416:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800941a:	f7ff fdeb 	bl	8008ff4 <LoRaMacHandleResponseTimeout>
 800941e:	b100      	cbz	r0, 8009422 <OnTxDelayedTimerEvent+0x2a>
}
 8009420:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8009422:	2001      	movs	r0, #1
 8009424:	f7ff ff64 	bl	80092f0 <ScheduleTx>
 8009428:	2800      	cmp	r0, #0
 800942a:	d0f9      	beq.n	8009420 <OnTxDelayedTimerEvent+0x28>
 800942c:	280b      	cmp	r0, #11
 800942e:	d0f7      	beq.n	8009420 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009430:	4b09      	ldr	r3, [pc, #36]	; (8009458 <OnTxDelayedTimerEvent+0x60>)
 8009432:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009436:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800943a:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 800943e:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009442:	2009      	movs	r0, #9
 8009444:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009448:	f002 f93a 	bl	800b6c0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800944c:	f7fe fd40 	bl	8007ed0 <StopRetransmission>
            break;
 8009450:	e7e6      	b.n	8009420 <OnTxDelayedTimerEvent+0x28>
 8009452:	bf00      	nop
 8009454:	20000628 	.word	0x20000628
 8009458:	20008000 	.word	0x20008000

0800945c <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800945c:	4b1c      	ldr	r3, [pc, #112]	; (80094d0 <LoRaMacHandleMcpsRequest+0x74>)
 800945e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009462:	f013 0f01 	tst.w	r3, #1
 8009466:	d032      	beq.n	80094ce <LoRaMacHandleMcpsRequest+0x72>
{
 8009468:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800946a:	4b19      	ldr	r3, [pc, #100]	; (80094d0 <LoRaMacHandleMcpsRequest+0x74>)
 800946c:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8009470:	b12b      	cbz	r3, 800947e <LoRaMacHandleMcpsRequest+0x22>
 8009472:	2b03      	cmp	r3, #3
 8009474:	d003      	beq.n	800947e <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009476:	2b01      	cmp	r3, #1
 8009478:	d006      	beq.n	8009488 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800947a:	2000      	movs	r0, #0
 800947c:	e002      	b.n	8009484 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800947e:	f7fe fced 	bl	8007e5c <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 8009482:	b940      	cbnz	r0, 8009496 <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 8009484:	b1b8      	cbz	r0, 80094b6 <LoRaMacHandleMcpsRequest+0x5a>
}
 8009486:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 8009488:	4b11      	ldr	r3, [pc, #68]	; (80094d0 <LoRaMacHandleMcpsRequest+0x74>)
 800948a:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800948e:	b183      	cbz	r3, 80094b2 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 8009490:	f7fe fd00 	bl	8007e94 <CheckRetransConfirmedUplink>
 8009494:	e7f5      	b.n	8009482 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009496:	4c0e      	ldr	r4, [pc, #56]	; (80094d0 <LoRaMacHandleMcpsRequest+0x74>)
 8009498:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800949c:	f007 faa4 	bl	80109e8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80094a0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80094a4:	f023 0320 	bic.w	r3, r3, #32
 80094a8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80094ac:	f7fe fd10 	bl	8007ed0 <StopRetransmission>
 80094b0:	e7e9      	b.n	8009486 <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 80094b2:	2001      	movs	r0, #1
 80094b4:	e7e6      	b.n	8009484 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80094b6:	4b06      	ldr	r3, [pc, #24]	; (80094d0 <LoRaMacHandleMcpsRequest+0x74>)
 80094b8:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80094bc:	f36f 1245 	bfc	r2, #5, #1
 80094c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 80094c4:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 80094c8:	f7ff ff96 	bl	80093f8 <OnTxDelayedTimerEvent>
}
 80094cc:	e7db      	b.n	8009486 <LoRaMacHandleMcpsRequest+0x2a>
 80094ce:	4770      	bx	lr
 80094d0:	20000628 	.word	0x20000628

080094d4 <LoRaMacHandleRequestEvents>:
{
 80094d4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80094d6:	4b22      	ldr	r3, [pc, #136]	; (8009560 <LoRaMacHandleRequestEvents+0x8c>)
 80094d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80094dc:	bb7b      	cbnz	r3, 800953e <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80094de:	4b20      	ldr	r3, [pc, #128]	; (8009560 <LoRaMacHandleRequestEvents+0x8c>)
 80094e0:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 80094e4:	f014 0501 	ands.w	r5, r4, #1
 80094e8:	d005      	beq.n	80094f6 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80094ea:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80094ee:	f36f 0200 	bfc	r2, #0, #1
 80094f2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80094f6:	4b1a      	ldr	r3, [pc, #104]	; (8009560 <LoRaMacHandleRequestEvents+0x8c>)
 80094f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80094fc:	f013 0f04 	tst.w	r3, #4
 8009500:	d006      	beq.n	8009510 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009502:	4b17      	ldr	r3, [pc, #92]	; (8009560 <LoRaMacHandleRequestEvents+0x8c>)
 8009504:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009508:	f36f 0282 	bfc	r2, #2, #1
 800950c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009510:	2001      	movs	r0, #1
 8009512:	f7fe fbfb 	bl	8007d0c <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 8009516:	b135      	cbz	r5, 8009526 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009518:	4811      	ldr	r0, [pc, #68]	; (8009560 <LoRaMacHandleRequestEvents+0x8c>)
 800951a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f200 4044 	addw	r0, r0, #1092	; 0x444
 8009524:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8009526:	f014 0f04 	tst.w	r4, #4
 800952a:	d109      	bne.n	8009540 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800952c:	f001 fe7b 	bl	800b226 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009530:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <LoRaMacHandleRequestEvents+0x8c>)
 8009532:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009536:	f36f 1245 	bfc	r2, #5, #1
 800953a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 800953e:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009540:	4808      	ldr	r0, [pc, #32]	; (8009564 <LoRaMacHandleRequestEvents+0x90>)
 8009542:	f002 f8e7 	bl	800b714 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009546:	f002 f917 	bl	800b778 <LoRaMacConfirmQueueGetCnt>
 800954a:	2800      	cmp	r0, #0
 800954c:	d0ee      	beq.n	800952c <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800954e:	4a04      	ldr	r2, [pc, #16]	; (8009560 <LoRaMacHandleRequestEvents+0x8c>)
 8009550:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009554:	f043 0304 	orr.w	r3, r3, #4
 8009558:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800955c:	e7e6      	b.n	800952c <LoRaMacHandleRequestEvents+0x58>
 800955e:	bf00      	nop
 8009560:	20000628 	.word	0x20000628
 8009564:	20000a80 	.word	0x20000a80

08009568 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009568:	4b07      	ldr	r3, [pc, #28]	; (8009588 <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800956a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800956e:	b103      	cbz	r3, 8009572 <LoRaMacHandleScheduleUplinkEvent+0xa>
 8009570:	4770      	bx	lr
{
 8009572:	b500      	push	{lr}
 8009574:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 8009576:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800957a:	f10d 0007 	add.w	r0, sp, #7
 800957e:	f001 ffab 	bl	800b4d8 <LoRaMacCommandsStickyCmdsPending>
}
 8009582:	b003      	add	sp, #12
 8009584:	f85d fb04 	ldr.w	pc, [sp], #4
 8009588:	20000628 	.word	0x20000628

0800958c <OpenContinuousRxCWindow>:
{
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8009590:	4c16      	ldr	r4, [pc, #88]	; (80095ec <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009592:	4d17      	ldr	r5, [pc, #92]	; (80095f0 <OpenContinuousRxCWindow+0x64>)
 8009594:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 8009598:	9600      	str	r6, [sp, #0]
 800959a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800959c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80095a0:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 80095a4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80095a8:	f002 fe4d 	bl	800c246 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80095ac:	2302      	movs	r3, #2
 80095ae:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80095b2:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80095b6:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80095ba:	2301      	movs	r3, #1
 80095bc:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80095c0:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 80095c4:	4631      	mov	r1, r6
 80095c6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80095ca:	f002 fe48 	bl	800c25e <RegionRxConfig>
 80095ce:	b158      	cbz	r0, 80095e8 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80095d0:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 80095d4:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 80095d8:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <OpenContinuousRxCWindow+0x68>)
 80095da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095dc:	2000      	movs	r0, #0
 80095de:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80095e0:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 80095e4:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 80095e8:	b002      	add	sp, #8
 80095ea:	bd70      	pop	{r4, r5, r6, pc}
 80095ec:	20008000 	.word	0x20008000
 80095f0:	20000628 	.word	0x20000628
 80095f4:	08011d10 	.word	0x08011d10

080095f8 <RxWindowSetup>:
{
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 80095fc:	f007 f9f4 	bl	80109e8 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009600:	4b0c      	ldr	r3, [pc, #48]	; (8009634 <RxWindowSetup+0x3c>)
 8009602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009604:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009606:	4a0c      	ldr	r2, [pc, #48]	; (8009638 <RxWindowSetup+0x40>)
 8009608:	4621      	mov	r1, r4
 800960a:	4b0c      	ldr	r3, [pc, #48]	; (800963c <RxWindowSetup+0x44>)
 800960c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009610:	f002 fe25 	bl	800c25e <RegionRxConfig>
 8009614:	b160      	cbz	r0, 8009630 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009616:	4d0a      	ldr	r5, [pc, #40]	; (8009640 <RxWindowSetup+0x48>)
 8009618:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800961c:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009620:	4b04      	ldr	r3, [pc, #16]	; (8009634 <RxWindowSetup+0x3c>)
 8009622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009624:	4a05      	ldr	r2, [pc, #20]	; (800963c <RxWindowSetup+0x44>)
 8009626:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8009628:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800962a:	7ce3      	ldrb	r3, [r4, #19]
 800962c:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 8009630:	bd38      	pop	{r3, r4, r5, pc}
 8009632:	bf00      	nop
 8009634:	08011d10 	.word	0x08011d10
 8009638:	20000a50 	.word	0x20000a50
 800963c:	20008000 	.word	0x20008000
 8009640:	20000628 	.word	0x20000628

08009644 <OnRxWindow2TimerEvent>:
{
 8009644:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009646:	4b13      	ldr	r3, [pc, #76]	; (8009694 <OnRxWindow2TimerEvent+0x50>)
 8009648:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800964c:	b903      	cbnz	r3, 8009650 <OnRxWindow2TimerEvent+0xc>
}
 800964e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009650:	4810      	ldr	r0, [pc, #64]	; (8009694 <OnRxWindow2TimerEvent+0x50>)
 8009652:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 8009656:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800965a:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <OnRxWindow2TimerEvent+0x54>)
 800965c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800965e:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009662:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009666:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800966a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800966e:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009672:	2200      	movs	r2, #0
 8009674:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009678:	2201      	movs	r2, #1
 800967a:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800967e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009682:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009686:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800968a:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800968e:	f7ff ffb3 	bl	80095f8 <RxWindowSetup>
 8009692:	e7dc      	b.n	800964e <OnRxWindow2TimerEvent+0xa>
 8009694:	20000628 	.word	0x20000628
 8009698:	20008000 	.word	0x20008000

0800969c <OnRxWindow1TimerEvent>:
{
 800969c:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800969e:	4811      	ldr	r0, [pc, #68]	; (80096e4 <OnRxWindow1TimerEvent+0x48>)
 80096a0:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 80096a4:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <OnRxWindow1TimerEvent+0x4c>)
 80096aa:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 80096ae:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096b2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80096b6:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80096ba:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80096be:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80096c2:	2200      	movs	r2, #0
 80096c4:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80096c8:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80096cc:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80096d0:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80096d4:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 80096d8:	f500 7060 	add.w	r0, r0, #896	; 0x380
 80096dc:	f7ff ff8c 	bl	80095f8 <RxWindowSetup>
}
 80096e0:	bd08      	pop	{r3, pc}
 80096e2:	bf00      	nop
 80096e4:	20000628 	.word	0x20000628
 80096e8:	20008000 	.word	0x20008000

080096ec <LoRaMacHandleNvm>:
{
 80096ec:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 80096ee:	4b30      	ldr	r3, [pc, #192]	; (80097b0 <LoRaMacHandleNvm+0xc4>)
 80096f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80096f4:	b103      	cbz	r3, 80096f8 <LoRaMacHandleNvm+0xc>
}
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80096fa:	2124      	movs	r1, #36	; 0x24
 80096fc:	f004 ff98 	bl	800e630 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009702:	4283      	cmp	r3, r0
 8009704:	d052      	beq.n	80097ac <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 8009706:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009708:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800970a:	2114      	movs	r1, #20
 800970c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009710:	f004 ff8e 	bl	800e630 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009714:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009716:	4283      	cmp	r3, r0
 8009718:	d002      	beq.n	8009720 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800971a:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800971c:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009720:	21e0      	movs	r1, #224	; 0xe0
 8009722:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8009726:	f004 ff83 	bl	800e630 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800972a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800972e:	4283      	cmp	r3, r0
 8009730:	d003      	beq.n	800973a <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 8009732:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009736:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800973a:	21bc      	movs	r1, #188	; 0xbc
 800973c:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8009740:	f004 ff76 	bl	800e630 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009744:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8009748:	4283      	cmp	r3, r0
 800974a:	d003      	beq.n	8009754 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800974c:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009750:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009754:	2110      	movs	r1, #16
 8009756:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800975a:	f004 ff69 	bl	800e630 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800975e:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8009762:	4283      	cmp	r3, r0
 8009764:	d003      	beq.n	800976e <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 8009766:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800976a:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800976e:	f44f 715e 	mov.w	r1, #888	; 0x378
 8009772:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 8009776:	f004 ff5b 	bl	800e630 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800977a:	f8d4 3570 	ldr.w	r3, [r4, #1392]	; 0x570
 800977e:	4283      	cmp	r3, r0
 8009780:	d003      	beq.n	800978a <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 8009782:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8009786:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800978a:	2114      	movs	r1, #20
 800978c:	f204 5074 	addw	r0, r4, #1396	; 0x574
 8009790:	f004 ff4e 	bl	800e630 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8009794:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 8009798:	4283      	cmp	r3, r0
 800979a:	d003      	beq.n	80097a4 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800979c:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80097a0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 80097a4:	4628      	mov	r0, r5
 80097a6:	f7fe fbbd 	bl	8007f24 <CallNvmDataChangeCallback>
 80097aa:	e7a4      	b.n	80096f6 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80097ac:	2500      	movs	r5, #0
 80097ae:	e7ac      	b.n	800970a <LoRaMacHandleNvm+0x1e>
 80097b0:	20000628 	.word	0x20000628

080097b4 <RestoreNvmData>:
{
 80097b4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80097b6:	4b34      	ldr	r3, [pc, #208]	; (8009888 <RestoreNvmData+0xd4>)
 80097b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d001      	beq.n	80097c4 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 80097c0:	2001      	movs	r0, #1
}
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80097c4:	4c31      	ldr	r4, [pc, #196]	; (800988c <RestoreNvmData+0xd8>)
 80097c6:	2124      	movs	r1, #36	; 0x24
 80097c8:	4620      	mov	r0, r4
 80097ca:	f004 ff31 	bl	800e630 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 80097ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097d0:	4283      	cmp	r3, r0
 80097d2:	d001      	beq.n	80097d8 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80097d4:	2017      	movs	r0, #23
 80097d6:	e7f4      	b.n	80097c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80097d8:	2114      	movs	r1, #20
 80097da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80097de:	f004 ff27 	bl	800e630 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80097e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097e4:	4283      	cmp	r3, r0
 80097e6:	d001      	beq.n	80097ec <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80097e8:	2017      	movs	r0, #23
 80097ea:	e7ea      	b.n	80097c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80097ec:	21e0      	movs	r1, #224	; 0xe0
 80097ee:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80097f2:	f004 ff1d 	bl	800e630 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80097f6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80097fa:	4283      	cmp	r3, r0
 80097fc:	d001      	beq.n	8009802 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80097fe:	2017      	movs	r0, #23
 8009800:	e7df      	b.n	80097c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8009802:	21bc      	movs	r1, #188	; 0xbc
 8009804:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8009808:	f004 ff12 	bl	800e630 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800980c:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8009810:	4283      	cmp	r3, r0
 8009812:	d001      	beq.n	8009818 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009814:	2017      	movs	r0, #23
 8009816:	e7d4      	b.n	80097c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8009818:	2110      	movs	r1, #16
 800981a:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800981e:	f004 ff07 	bl	800e630 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8009822:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8009826:	4283      	cmp	r3, r0
 8009828:	d001      	beq.n	800982e <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800982a:	2017      	movs	r0, #23
 800982c:	e7c9      	b.n	80097c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800982e:	2114      	movs	r1, #20
 8009830:	f204 5074 	addw	r0, r4, #1396	; 0x574
 8009834:	f004 fefc 	bl	800e630 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 8009838:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800983c:	4283      	cmp	r3, r0
 800983e:	d001      	beq.n	8009844 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009840:	2017      	movs	r0, #23
 8009842:	e7be      	b.n	80097c2 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009844:	4625      	mov	r5, r4
 8009846:	4c12      	ldr	r4, [pc, #72]	; (8009890 <RestoreNvmData+0xdc>)
 8009848:	f240 528c 	movw	r2, #1420	; 0x58c
 800984c:	4629      	mov	r1, r5
 800984e:	4620      	mov	r0, r4
 8009850:	f004 fecd 	bl	800e5ee <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009854:	f240 528c 	movw	r2, #1420	; 0x58c
 8009858:	2100      	movs	r1, #0
 800985a:	4628      	mov	r0, r5
 800985c:	f004 fedf 	bl	800e61e <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009860:	4b09      	ldr	r3, [pc, #36]	; (8009888 <RestoreNvmData+0xd4>)
 8009862:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8009866:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800986a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800986c:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009870:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 8009874:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009878:	2201      	movs	r2, #1
 800987a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800987e:	2202      	movs	r2, #2
 8009880:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 8009884:	2000      	movs	r0, #0
 8009886:	e79c      	b.n	80097c2 <RestoreNvmData+0xe>
 8009888:	20000628 	.word	0x20000628
 800988c:	2000858c 	.word	0x2000858c
 8009890:	20008000 	.word	0x20008000

08009894 <OnRadioRxTimeout>:
{
 8009894:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8009896:	4a09      	ldr	r2, [pc, #36]	; (80098bc <OnRadioRxTimeout+0x28>)
 8009898:	7813      	ldrb	r3, [r2, #0]
 800989a:	f043 0302 	orr.w	r3, r3, #2
 800989e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <OnRadioRxTimeout+0x2c>)
 80098a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80098a6:	b113      	cbz	r3, 80098ae <OnRadioRxTimeout+0x1a>
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	b103      	cbz	r3, 80098ae <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80098ac:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <OnRadioRxTimeout+0x30>)
 80098b0:	2201      	movs	r2, #1
 80098b2:	2100      	movs	r1, #0
 80098b4:	2002      	movs	r0, #2
 80098b6:	f006 fd43 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 80098ba:	bd08      	pop	{r3, pc}
 80098bc:	20000624 	.word	0x20000624
 80098c0:	20000628 	.word	0x20000628
 80098c4:	08011658 	.word	0x08011658

080098c8 <OnRadioTxTimeout>:
{
 80098c8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80098ca:	4a09      	ldr	r2, [pc, #36]	; (80098f0 <OnRadioTxTimeout+0x28>)
 80098cc:	7813      	ldrb	r3, [r2, #0]
 80098ce:	f043 0308 	orr.w	r3, r3, #8
 80098d2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80098d4:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <OnRadioTxTimeout+0x2c>)
 80098d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80098da:	b113      	cbz	r3, 80098e2 <OnRadioTxTimeout+0x1a>
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	b103      	cbz	r3, 80098e2 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80098e0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80098e2:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <OnRadioTxTimeout+0x30>)
 80098e4:	2201      	movs	r2, #1
 80098e6:	2100      	movs	r1, #0
 80098e8:	2002      	movs	r0, #2
 80098ea:	f006 fd29 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 80098ee:	bd08      	pop	{r3, pc}
 80098f0:	20000624 	.word	0x20000624
 80098f4:	20000628 	.word	0x20000628
 80098f8:	08011668 	.word	0x08011668

080098fc <OnRadioRxDone>:
{
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	4680      	mov	r8, r0
 8009902:	460f      	mov	r7, r1
 8009904:	4616      	mov	r6, r2
 8009906:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009908:	f007 f82e 	bl	8010968 <UTIL_TIMER_GetCurrentTime>
 800990c:	4c0f      	ldr	r4, [pc, #60]	; (800994c <OnRadioRxDone+0x50>)
 800990e:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009910:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009914:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8009916:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009918:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800991a:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <OnRadioRxDone+0x54>)
 800991c:	781a      	ldrb	r2, [r3, #0]
 800991e:	f042 0210 	orr.w	r2, r2, #16
 8009922:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8009924:	b2d2      	uxtb	r2, r2
 8009926:	f042 0201 	orr.w	r2, r2, #1
 800992a:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800992c:	4b09      	ldr	r3, [pc, #36]	; (8009954 <OnRadioRxDone+0x58>)
 800992e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009932:	b113      	cbz	r3, 800993a <OnRadioRxDone+0x3e>
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	b103      	cbz	r3, 800993a <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009938:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800993a:	4b07      	ldr	r3, [pc, #28]	; (8009958 <OnRadioRxDone+0x5c>)
 800993c:	2201      	movs	r2, #1
 800993e:	2100      	movs	r1, #0
 8009940:	2002      	movs	r0, #2
 8009942:	f006 fcfd 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 8009946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800994a:	bf00      	nop
 800994c:	20000bd8 	.word	0x20000bd8
 8009950:	20000624 	.word	0x20000624
 8009954:	20000628 	.word	0x20000628
 8009958:	08011678 	.word	0x08011678

0800995c <OnRadioTxDone>:
{
 800995c:	b530      	push	{r4, r5, lr}
 800995e:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009960:	f007 f802 	bl	8010968 <UTIL_TIMER_GetCurrentTime>
 8009964:	4b0f      	ldr	r3, [pc, #60]	; (80099a4 <OnRadioTxDone+0x48>)
 8009966:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009968:	4d0f      	ldr	r5, [pc, #60]	; (80099a8 <OnRadioTxDone+0x4c>)
 800996a:	466c      	mov	r4, sp
 800996c:	4620      	mov	r0, r4
 800996e:	f006 ff4d 	bl	801080c <SysTimeGet>
 8009972:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8009976:	e894 0003 	ldmia.w	r4, {r0, r1}
 800997a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800997e:	4a0b      	ldr	r2, [pc, #44]	; (80099ac <OnRadioTxDone+0x50>)
 8009980:	7813      	ldrb	r3, [r2, #0]
 8009982:	f043 0320 	orr.w	r3, r3, #32
 8009986:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009988:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800998c:	b113      	cbz	r3, 8009994 <OnRadioTxDone+0x38>
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	b103      	cbz	r3, 8009994 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009992:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <OnRadioTxDone+0x54>)
 8009996:	2201      	movs	r2, #1
 8009998:	2100      	movs	r1, #0
 800999a:	2002      	movs	r0, #2
 800999c:	f006 fcd0 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 80099a0:	b003      	add	sp, #12
 80099a2:	bd30      	pop	{r4, r5, pc}
 80099a4:	20000be8 	.word	0x20000be8
 80099a8:	20000628 	.word	0x20000628
 80099ac:	20000624 	.word	0x20000624
 80099b0:	08011688 	.word	0x08011688

080099b4 <ResetMacParameters>:
{
 80099b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b6:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80099b8:	4c53      	ldr	r4, [pc, #332]	; (8009b08 <ResetMacParameters+0x154>)
 80099ba:	2600      	movs	r6, #0
 80099bc:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 80099c0:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 80099c2:	4d52      	ldr	r5, [pc, #328]	; (8009b0c <ResetMacParameters+0x158>)
 80099c4:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 80099c8:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80099cc:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 80099d0:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80099d4:	2701      	movs	r7, #1
 80099d6:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80099da:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 80099de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80099e2:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 80099e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80099ea:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80099ee:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80099f2:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80099f6:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 80099fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099fe:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009a02:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8009a06:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8009a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a0e:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009a12:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 8009a16:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009a1a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8009a1e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009a22:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8009a26:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009a28:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8009a2c:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 8009a2e:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8009a32:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8009a36:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8009a3a:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009a3e:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009a42:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8009a46:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009a48:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 8009a4c:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 8009a4e:	4b30      	ldr	r3, [pc, #192]	; (8009b10 <ResetMacParameters+0x15c>)
 8009a50:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009a52:	a901      	add	r1, sp, #4
 8009a54:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009a58:	f002 fbd1 	bl	800c1fe <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009a5c:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009a60:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a66:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a6a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8009a6e:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009a72:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8009a76:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009a7a:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009a7e:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009a82:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009a86:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009a8a:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 8009a8e:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 8009a92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a98:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009a9c:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009aa0:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 8009aaa:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8009aac:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 8009aae:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009ab2:	b11b      	cbz	r3, 8009abc <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009abc:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <ResetMacParameters+0x158>)
 8009abe:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 8009ac2:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009ac4:	f203 4224 	addw	r2, r3, #1060	; 0x424
 8009ac8:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009aca:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 8009ace:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009ad0:	f203 4395 	addw	r3, r3, #1173	; 0x495
 8009ad4:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009ad6:	4a0c      	ldr	r2, [pc, #48]	; (8009b08 <ResetMacParameters+0x154>)
 8009ad8:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 8009adc:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8009ade:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8009ae2:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009ae4:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8009ae8:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8009aea:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 8009aee:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8009af0:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 8009af4:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009af6:	f202 5274 	addw	r2, r2, #1396	; 0x574
 8009afa:	a90e      	add	r1, sp, #56	; 0x38
 8009afc:	a805      	add	r0, sp, #20
 8009afe:	f001 fb7d 	bl	800b1fc <LoRaMacClassBInit>
}
 8009b02:	b011      	add	sp, #68	; 0x44
 8009b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20008000 	.word	0x20008000
 8009b0c:	20000628 	.word	0x20000628
 8009b10:	20000b48 	.word	0x20000b48

08009b14 <SwitchClass>:
{
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8009b18:	4b3e      	ldr	r3, [pc, #248]	; (8009c14 <SwitchClass+0x100>)
 8009b1a:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 8009b1e:	2d01      	cmp	r5, #1
 8009b20:	d065      	beq.n	8009bee <SwitchClass+0xda>
 8009b22:	2d02      	cmp	r5, #2
 8009b24:	d06b      	beq.n	8009bfe <SwitchClass+0xea>
 8009b26:	b10d      	cbz	r5, 8009b2c <SwitchClass+0x18>
 8009b28:	2003      	movs	r0, #3
}
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 8009b2c:	b930      	cbnz	r0, 8009b3c <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009b2e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009b32:	3364      	adds	r3, #100	; 0x64
 8009b34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b38:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 8009b3c:	2c01      	cmp	r4, #1
 8009b3e:	d022      	beq.n	8009b86 <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009b40:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8009b42:	2c02      	cmp	r4, #2
 8009b44:	d1f1      	bne.n	8009b2a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009b46:	4b33      	ldr	r3, [pc, #204]	; (8009c14 <SwitchClass+0x100>)
 8009b48:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009b4c:	4e32      	ldr	r6, [pc, #200]	; (8009c18 <SwitchClass+0x104>)
 8009b4e:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 8009b52:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 8009b56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b5c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009b60:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009b64:	2302      	movs	r3, #2
 8009b66:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dd13      	ble.n	8009b98 <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 8009b70:	4b29      	ldr	r3, [pc, #164]	; (8009c18 <SwitchClass+0x104>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 8009b78:	4b28      	ldr	r3, [pc, #160]	; (8009c1c <SwitchClass+0x108>)
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009b7e:	f7ff fd05 	bl	800958c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009b82:	4628      	mov	r0, r5
 8009b84:	e7d1      	b.n	8009b2a <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009b86:	4620      	mov	r0, r4
 8009b88:	f001 fb4e 	bl	800b228 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d1d8      	bne.n	8009b42 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8009b90:	4b20      	ldr	r3, [pc, #128]	; (8009c14 <SwitchClass+0x100>)
 8009b92:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8009b96:	e7d4      	b.n	8009b42 <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009b98:	4618      	mov	r0, r3
 8009b9a:	4a1e      	ldr	r2, [pc, #120]	; (8009c14 <SwitchClass+0x100>)
 8009b9c:	212c      	movs	r1, #44	; 0x2c
 8009b9e:	fb01 2203 	mla	r2, r1, r3, r2
 8009ba2:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 8009ba6:	b912      	cbnz	r2, 8009bae <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009ba8:	3301      	adds	r3, #1
 8009baa:	b25b      	sxtb	r3, r3
 8009bac:	e7de      	b.n	8009b6c <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009bae:	4a19      	ldr	r2, [pc, #100]	; (8009c14 <SwitchClass+0x100>)
 8009bb0:	fb01 2000 	mla	r0, r1, r0, r2
 8009bb4:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8009bb8:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009bba:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 8009bbe:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009bc2:	4b15      	ldr	r3, [pc, #84]	; (8009c18 <SwitchClass+0x104>)
 8009bc4:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 8009bc8:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009bcc:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009bd0:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8009bd4:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009bd8:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8009bdc:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009be0:	2203      	movs	r2, #3
 8009be2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8009bec:	e7c0      	b.n	8009b70 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009bee:	f001 fb1b 	bl	800b228 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d199      	bne.n	8009b2a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009bf6:	4b07      	ldr	r3, [pc, #28]	; (8009c14 <SwitchClass+0x100>)
 8009bf8:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8009bfc:	e795      	b.n	8009b2a <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8009bfe:	b938      	cbnz	r0, 8009c10 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <SwitchClass+0x100>)
 8009c02:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 8009c06:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <SwitchClass+0x108>)
 8009c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0a:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	e78c      	b.n	8009b2a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c10:	2003      	movs	r0, #3
 8009c12:	e78a      	b.n	8009b2a <SwitchClass+0x16>
 8009c14:	20008000 	.word	0x20008000
 8009c18:	20000628 	.word	0x20000628
 8009c1c:	08011d10 	.word	0x08011d10

08009c20 <SendReJoinReq>:
{
 8009c20:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 8009c22:	28ff      	cmp	r0, #255	; 0xff
 8009c24:	d003      	beq.n	8009c2e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8009c26:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8009c28:	f7ff fb62 	bl	80092f0 <ScheduleTx>
}
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 8009c2e:	2000      	movs	r0, #0
 8009c30:	f7ff ff70 	bl	8009b14 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009c34:	4d0e      	ldr	r5, [pc, #56]	; (8009c70 <SendReJoinReq+0x50>)
 8009c36:	2400      	movs	r4, #0
 8009c38:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009c3c:	1cab      	adds	r3, r5, #2
 8009c3e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009c42:	23ff      	movs	r3, #255	; 0xff
 8009c44:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009c48:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009c4c:	f004 fc9e 	bl	800e58c <SecureElementGetJoinEui>
 8009c50:	4601      	mov	r1, r0
 8009c52:	2208      	movs	r2, #8
 8009c54:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8009c58:	f004 fcc9 	bl	800e5ee <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009c5c:	f004 fc80 	bl	800e560 <SecureElementGetDevEui>
 8009c60:	4601      	mov	r1, r0
 8009c62:	2208      	movs	r2, #8
 8009c64:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8009c68:	f004 fcc1 	bl	800e5ee <memcpy1>
            allowDelayedTx = false;
 8009c6c:	4620      	mov	r0, r4
            break;
 8009c6e:	e7db      	b.n	8009c28 <SendReJoinReq+0x8>
 8009c70:	20000628 	.word	0x20000628

08009c74 <PrepareFrame>:
{
 8009c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c78:	b083      	sub	sp, #12
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	460e      	mov	r6, r1
 8009c7e:	4617      	mov	r7, r2
 8009c80:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8009c84:	4959      	ldr	r1, [pc, #356]	; (8009dec <PrepareFrame+0x178>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8009c8a:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 8009c8e:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8009c90:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8009c92:	4698      	mov	r8, r3
 8009c94:	b1cb      	cbz	r3, 8009cca <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009c96:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009dec <PrepareFrame+0x178>
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	4641      	mov	r1, r8
 8009c9e:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8009ca2:	f004 fca4 	bl	800e5ee <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009ca6:	b2e0      	uxtb	r0, r4
 8009ca8:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009cac:	782b      	ldrb	r3, [r5, #0]
 8009cae:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8009cb2:	782b      	ldrb	r3, [r5, #0]
 8009cb4:	095b      	lsrs	r3, r3, #5
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d009      	beq.n	8009cce <PrepareFrame+0x5a>
 8009cba:	2b07      	cmp	r3, #7
 8009cbc:	d079      	beq.n	8009db2 <PrepareFrame+0x13e>
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d009      	beq.n	8009cd6 <PrepareFrame+0x62>
 8009cc2:	2002      	movs	r0, #2
}
 8009cc4:	b003      	add	sp, #12
 8009cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8009cca:	4614      	mov	r4, r2
 8009ccc:	e7e3      	b.n	8009c96 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8009cce:	4b47      	ldr	r3, [pc, #284]	; (8009dec <PrepareFrame+0x178>)
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009cd6:	4b45      	ldr	r3, [pc, #276]	; (8009dec <PrepareFrame+0x178>)
 8009cd8:	2204      	movs	r2, #4
 8009cda:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009cde:	1c9a      	adds	r2, r3, #2
 8009ce0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009cea:	782a      	ldrb	r2, [r5, #0]
 8009cec:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009cf0:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009cf4:	4a3e      	ldr	r2, [pc, #248]	; (8009df0 <PrepareFrame+0x17c>)
 8009cf6:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8009cfa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009cfe:	7832      	ldrb	r2, [r6, #0]
 8009d00:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009d04:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009d08:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8009d0c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009d10:	a801      	add	r0, sp, #4
 8009d12:	f001 ff09 	bl	800bb28 <LoRaMacCryptoGetFCntUp>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d15c      	bne.n	8009dd4 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8009d1a:	9a01      	ldr	r2, [sp, #4]
 8009d1c:	4b33      	ldr	r3, [pc, #204]	; (8009dec <PrepareFrame+0x178>)
 8009d1e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 8009d22:	2100      	movs	r1, #0
 8009d24:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 8009d28:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009d2c:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009d30:	4668      	mov	r0, sp
 8009d32:	f001 fb93 	bl	800b45c <LoRaMacCommandsGetSizeSerializedCmds>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d14e      	bne.n	8009dd8 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 8009d3a:	9b00      	ldr	r3, [sp, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0c1      	beq.n	8009cc4 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009d40:	4b2b      	ldr	r3, [pc, #172]	; (8009df0 <PrepareFrame+0x17c>)
 8009d42:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009d46:	f7fe f905 	bl	8007f54 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009d4a:	4b28      	ldr	r3, [pc, #160]	; (8009dec <PrepareFrame+0x178>)
 8009d4c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009d50:	b113      	cbz	r3, 8009d58 <PrepareFrame+0xe4>
 8009d52:	9a00      	ldr	r2, [sp, #0]
 8009d54:	2a0f      	cmp	r2, #15
 8009d56:	d915      	bls.n	8009d84 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009d58:	b113      	cbz	r3, 8009d60 <PrepareFrame+0xec>
 8009d5a:	9b00      	ldr	r3, [sp, #0]
 8009d5c:	2b0f      	cmp	r3, #15
 8009d5e:	d821      	bhi.n	8009da4 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009d60:	4a24      	ldr	r2, [pc, #144]	; (8009df4 <PrepareFrame+0x180>)
 8009d62:	4669      	mov	r1, sp
 8009d64:	f001 fb86 	bl	800b474 <LoRaMacCommandsSerializeCmds>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d13b      	bne.n	8009de4 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009d6c:	4b1f      	ldr	r3, [pc, #124]	; (8009dec <PrepareFrame+0x178>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009d74:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 8009d78:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009d7c:	9a00      	ldr	r2, [sp, #0]
 8009d7e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8009d82:	e79f      	b.n	8009cc4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009d84:	4a1c      	ldr	r2, [pc, #112]	; (8009df8 <PrepareFrame+0x184>)
 8009d86:	4669      	mov	r1, sp
 8009d88:	200f      	movs	r0, #15
 8009d8a:	f001 fb73 	bl	800b474 <LoRaMacCommandsSerializeCmds>
 8009d8e:	bb28      	cbnz	r0, 8009ddc <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009d90:	7833      	ldrb	r3, [r6, #0]
 8009d92:	9a00      	ldr	r2, [sp, #0]
 8009d94:	f362 0303 	bfi	r3, r2, #0, #4
 8009d98:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	4b13      	ldr	r3, [pc, #76]	; (8009dec <PrepareFrame+0x178>)
 8009d9e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8009da2:	e78f      	b.n	8009cc4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009da4:	4a13      	ldr	r2, [pc, #76]	; (8009df4 <PrepareFrame+0x180>)
 8009da6:	4669      	mov	r1, sp
 8009da8:	f001 fb64 	bl	800b474 <LoRaMacCommandsSerializeCmds>
 8009dac:	b1c0      	cbz	r0, 8009de0 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009dae:	2013      	movs	r0, #19
 8009db0:	e788      	b.n	8009cc4 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009db2:	f1b8 0f00 	cmp.w	r8, #0
 8009db6:	d017      	beq.n	8009de8 <PrepareFrame+0x174>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d083      	beq.n	8009cc4 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009dbc:	4c0b      	ldr	r4, [pc, #44]	; (8009dec <PrepareFrame+0x178>)
 8009dbe:	b282      	uxth	r2, r0
 8009dc0:	4641      	mov	r1, r8
 8009dc2:	1ce0      	adds	r0, r4, #3
 8009dc4:	f004 fc13 	bl	800e5ee <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8009dc8:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8009dcc:	3301      	adds	r3, #1
 8009dce:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	e777      	b.n	8009cc4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009dd4:	2012      	movs	r0, #18
 8009dd6:	e775      	b.n	8009cc4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009dd8:	2013      	movs	r0, #19
 8009dda:	e773      	b.n	8009cc4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009ddc:	2013      	movs	r0, #19
 8009dde:	e771      	b.n	8009cc4 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009de0:	200a      	movs	r0, #10
 8009de2:	e76f      	b.n	8009cc4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009de4:	2013      	movs	r0, #19
 8009de6:	e76d      	b.n	8009cc4 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8009de8:	2000      	movs	r0, #0
 8009dea:	e76b      	b.n	8009cc4 <PrepareFrame+0x50>
 8009dec:	20000628 	.word	0x20000628
 8009df0:	20008000 	.word	0x20008000
 8009df4:	20000ac8 	.word	0x20000ac8
 8009df8:	20000740 	.word	0x20000740

08009dfc <Send>:
{
 8009dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e00:	b08a      	sub	sp, #40	; 0x28
 8009e02:	4617      	mov	r7, r2
 8009e04:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009e06:	4c45      	ldr	r4, [pc, #276]	; (8009f1c <Send+0x120>)
 8009e08:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8009e0c:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009e10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009e12:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009e14:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d07c      	beq.n	8009f16 <Send+0x11a>
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009e20:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 8009e24:	b90b      	cbnz	r3, 8009e2a <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009e26:	2100      	movs	r1, #0
 8009e28:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009e30:	483a      	ldr	r0, [pc, #232]	; (8009f1c <Send+0x120>)
 8009e32:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 8009e36:	f361 13c7 	bfi	r3, r1, #7, #1
 8009e3a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009e3e:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d054      	beq.n	8009ef0 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009e46:	4b35      	ldr	r3, [pc, #212]	; (8009f1c <Send+0x120>)
 8009e48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e4c:	b12b      	cbz	r3, 8009e5a <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 8009e4e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009e52:	f043 0320 	orr.w	r3, r3, #32
 8009e56:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009e60:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009e64:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009e66:	4b2e      	ldr	r3, [pc, #184]	; (8009f20 <Send+0x124>)
 8009e68:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8009e6c:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009e70:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8009e74:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009e78:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009e7c:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009e80:	4926      	ldr	r1, [pc, #152]	; (8009f1c <Send+0x120>)
 8009e82:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 8009e86:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e8a:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8009e8e:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009e92:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8009e96:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009e9a:	ab08      	add	r3, sp, #32
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	f101 0360 	add.w	r3, r1, #96	; 0x60
 8009ea2:	f101 0238 	add.w	r2, r1, #56	; 0x38
 8009ea6:	3139      	adds	r1, #57	; 0x39
 8009ea8:	a803      	add	r0, sp, #12
 8009eaa:	f001 f92d 	bl	800b108 <LoRaMacAdrCalcNext>
 8009eae:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009eb2:	f360 1386 	bfi	r3, r0, #6, #1
 8009eb6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009eba:	f8cd 8000 	str.w	r8, [sp]
 8009ebe:	463b      	mov	r3, r7
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	a909      	add	r1, sp, #36	; 0x24
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	f7ff fed5 	bl	8009c74 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009eca:	4604      	mov	r4, r0
 8009ecc:	b108      	cbz	r0, 8009ed2 <Send+0xd6>
 8009ece:	280a      	cmp	r0, #10
 8009ed0:	d104      	bne.n	8009edc <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009ed2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8009ed6:	f7ff fa0b 	bl	80092f0 <ScheduleTx>
 8009eda:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009edc:	b17c      	cbz	r4, 8009efe <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <Send+0x120>)
 8009ee0:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009ee4:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 8009ee8:	4620      	mov	r0, r4
 8009eea:	b00a      	add	sp, #40	; 0x28
 8009eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8009ef0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009ef4:	f043 0310 	orr.w	r3, r3, #16
 8009ef8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009efc:	e7a3      	b.n	8009e46 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <Send+0x120>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009f06:	9a08      	ldr	r2, [sp, #32]
 8009f08:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009f0a:	f001 fa7b 	bl	800b404 <LoRaMacCommandsRemoveNoneStickyCmds>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d0ea      	beq.n	8009ee8 <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f12:	2413      	movs	r4, #19
 8009f14:	e7e8      	b.n	8009ee8 <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009f16:	2407      	movs	r4, #7
 8009f18:	e7e6      	b.n	8009ee8 <Send+0xec>
 8009f1a:	bf00      	nop
 8009f1c:	20008000 	.word	0x20008000
 8009f20:	20000628 	.word	0x20000628

08009f24 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8009f24:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <LoRaMacIsBusy+0x2c>)
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	f013 0f01 	tst.w	r3, #1
 8009f2c:	d10a      	bne.n	8009f44 <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009f2e:	4b09      	ldr	r3, [pc, #36]	; (8009f54 <LoRaMacIsBusy+0x30>)
 8009f30:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009f34:	b943      	cbnz	r3, 8009f48 <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009f36:	4b07      	ldr	r3, [pc, #28]	; (8009f54 <LoRaMacIsBusy+0x30>)
 8009f38:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d005      	beq.n	8009f4c <LoRaMacIsBusy+0x28>
    return true;
 8009f40:	2001      	movs	r0, #1
 8009f42:	4770      	bx	lr
        return true;
 8009f44:	2001      	movs	r0, #1
 8009f46:	4770      	bx	lr
    return true;
 8009f48:	2001      	movs	r0, #1
 8009f4a:	4770      	bx	lr
        return false;
 8009f4c:	2000      	movs	r0, #0
}
 8009f4e:	4770      	bx	lr
 8009f50:	20000624 	.word	0x20000624
 8009f54:	20000628 	.word	0x20000628

08009f58 <LoRaMacProcess>:
{
 8009f58:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 8009f5a:	f7ff f81d 	bl	8008f98 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8009f5e:	f001 f974 	bl	800b24a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009f62:	4b20      	ldr	r3, [pc, #128]	; (8009fe4 <LoRaMacProcess+0x8c>)
 8009f64:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009f68:	f013 0f20 	tst.w	r3, #32
 8009f6c:	d10d      	bne.n	8009f8a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 8009f6e:	f7fd fed3 	bl	8007d18 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009f72:	4b1c      	ldr	r3, [pc, #112]	; (8009fe4 <LoRaMacProcess+0x8c>)
 8009f74:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d024      	beq.n	8009fc6 <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8009f7c:	4b19      	ldr	r3, [pc, #100]	; (8009fe4 <LoRaMacProcess+0x8c>)
 8009f7e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009f82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f86:	d121      	bne.n	8009fcc <LoRaMacProcess+0x74>
}
 8009f88:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	f7fd febe 	bl	8007d0c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8009f90:	f7fd fefa 	bl	8007d88 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8009f94:	f7fd ffd2 	bl	8007f3c <IsRequestPending>
 8009f98:	b110      	cbz	r0, 8009fa0 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8009f9a:	f7fe f8b9 	bl	8008110 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 8009f9e:	b918      	cbnz	r0, 8009fa8 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 8009fa0:	f7ff f83c 	bl	800901c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8009fa4:	f7ff fa5a 	bl	800945c <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8009fa8:	f7ff fa94 	bl	80094d4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8009fac:	f7ff fadc 	bl	8009568 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	f7fd feab 	bl	8007d0c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8009fb6:	4a0b      	ldr	r2, [pc, #44]	; (8009fe4 <LoRaMacProcess+0x8c>)
 8009fb8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fc0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8009fc4:	e7d3      	b.n	8009f6e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8009fc6:	f7ff fae1 	bl	800958c <OpenContinuousRxCWindow>
 8009fca:	e7d7      	b.n	8009f7c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <LoRaMacProcess+0x8c>)
 8009fce:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009fd2:	f36f 1286 	bfc	r2, #6, #1
 8009fd6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 8009fda:	4803      	ldr	r0, [pc, #12]	; (8009fe8 <LoRaMacProcess+0x90>)
 8009fdc:	f7ff fb86 	bl	80096ec <LoRaMacHandleNvm>
}
 8009fe0:	e7d2      	b.n	8009f88 <LoRaMacProcess+0x30>
 8009fe2:	bf00      	nop
 8009fe4:	20000628 	.word	0x20000628
 8009fe8:	20008000 	.word	0x20008000

08009fec <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	f000 81a4 	beq.w	800a340 <LoRaMacInitialization+0x354>
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	4691      	mov	r9, r2
 8009ffc:	4680      	mov	r8, r0
 8009ffe:	2900      	cmp	r1, #0
 800a000:	f000 81a0 	beq.w	800a344 <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a004:	6803      	ldr	r3, [r0, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	f000 819e 	beq.w	800a348 <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a00c:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 819c 	beq.w	800a34c <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a014:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 819a 	beq.w	800a350 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800a01c:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 8198 	beq.w	800a354 <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a024:	4610      	mov	r0, r2
 800a026:	f002 f8cb 	bl	800c1c0 <RegionIsActive>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	f000 8194 	beq.w	800a358 <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a030:	4640      	mov	r0, r8
 800a032:	f001 fac9 	bl	800b5c8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a036:	4ccc      	ldr	r4, [pc, #816]	; (800a368 <LoRaMacInitialization+0x37c>)
 800a038:	f240 528c 	movw	r2, #1420	; 0x58c
 800a03c:	2100      	movs	r1, #0
 800a03e:	4620      	mov	r0, r4
 800a040:	f004 faed 	bl	800e61e <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a044:	4dc9      	ldr	r5, [pc, #804]	; (800a36c <LoRaMacInitialization+0x380>)
 800a046:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800a04a:	2100      	movs	r1, #0
 800a04c:	4628      	mov	r0, r5
 800a04e:	f004 fae6 	bl	800e61e <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a052:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a056:	2600      	movs	r6, #0
 800a058:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800a05c:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a060:	4bc3      	ldr	r3, [pc, #780]	; (800a370 <LoRaMacInitialization+0x384>)
 800a062:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a066:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a06a:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800a06e:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a070:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800a074:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800a076:	4bbf      	ldr	r3, [pc, #764]	; (800a374 <LoRaMacInitialization+0x388>)
 800a078:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a07a:	a905      	add	r1, sp, #20
 800a07c:	4648      	mov	r0, r9
 800a07e:	f002 f8be 	bl	800c1fe <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a082:	230f      	movs	r3, #15
 800a084:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a088:	a90a      	add	r1, sp, #40	; 0x28
 800a08a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a08e:	f002 f89d 	bl	800c1cc <RegionGetPhyParam>
 800a092:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a094:	1b80      	subs	r0, r0, r6
 800a096:	bf18      	it	ne
 800a098:	2001      	movne	r0, #1
 800a09a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a09e:	f04f 0a0a 	mov.w	sl, #10
 800a0a2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a0a6:	a90a      	add	r1, sp, #40	; 0x28
 800a0a8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0ac:	f002 f88e 	bl	800c1cc <RegionGetPhyParam>
 800a0b0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a0b2:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a0b6:	f04f 0906 	mov.w	r9, #6
 800a0ba:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a0be:	a90a      	add	r1, sp, #40	; 0x28
 800a0c0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0c4:	f002 f882 	bl	800c1cc <RegionGetPhyParam>
 800a0c8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a0ca:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a0ce:	2310      	movs	r3, #16
 800a0d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a0d4:	a90a      	add	r1, sp, #40	; 0x28
 800a0d6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0da:	f002 f877 	bl	800c1cc <RegionGetPhyParam>
 800a0de:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a0e0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a0e4:	2311      	movs	r3, #17
 800a0e6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a0ea:	a90a      	add	r1, sp, #40	; 0x28
 800a0ec:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0f0:	f002 f86c 	bl	800c1cc <RegionGetPhyParam>
 800a0f4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a0f6:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a0fa:	2312      	movs	r3, #18
 800a0fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a100:	a90a      	add	r1, sp, #40	; 0x28
 800a102:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a106:	f002 f861 	bl	800c1cc <RegionGetPhyParam>
 800a10a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a10c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a110:	2313      	movs	r3, #19
 800a112:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a116:	a90a      	add	r1, sp, #40	; 0x28
 800a118:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a11c:	f002 f856 	bl	800c1cc <RegionGetPhyParam>
 800a120:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a122:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a126:	2314      	movs	r3, #20
 800a128:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a12c:	a90a      	add	r1, sp, #40	; 0x28
 800a12e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a132:	f002 f84b 	bl	800c1cc <RegionGetPhyParam>
 800a136:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a138:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a13c:	2316      	movs	r3, #22
 800a13e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a142:	a90a      	add	r1, sp, #40	; 0x28
 800a144:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a148:	f002 f840 	bl	800c1cc <RegionGetPhyParam>
 800a14c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a14e:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a152:	2317      	movs	r3, #23
 800a154:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a158:	a90a      	add	r1, sp, #40	; 0x28
 800a15a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a15e:	f002 f835 	bl	800c1cc <RegionGetPhyParam>
 800a162:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a164:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a168:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a16c:	2318      	movs	r3, #24
 800a16e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a172:	a90a      	add	r1, sp, #40	; 0x28
 800a174:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a178:	f002 f828 	bl	800c1cc <RegionGetPhyParam>
 800a17c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a17e:	b2c0      	uxtb	r0, r0
 800a180:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a184:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a188:	231d      	movs	r3, #29
 800a18a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a18e:	a90a      	add	r1, sp, #40	; 0x28
 800a190:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a194:	f002 f81a 	bl	800c1cc <RegionGetPhyParam>
 800a198:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a19a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a19e:	231e      	movs	r3, #30
 800a1a0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1a4:	a90a      	add	r1, sp, #40	; 0x28
 800a1a6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1aa:	f002 f80f 	bl	800c1cc <RegionGetPhyParam>
 800a1ae:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a1b0:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a1b4:	231f      	movs	r3, #31
 800a1b6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1ba:	a90a      	add	r1, sp, #40	; 0x28
 800a1bc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1c0:	f002 f804 	bl	800c1cc <RegionGetPhyParam>
 800a1c4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a1cc:	2320      	movs	r3, #32
 800a1ce:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1d2:	a90a      	add	r1, sp, #40	; 0x28
 800a1d4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1d8:	f001 fff8 	bl	800c1cc <RegionGetPhyParam>
 800a1dc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a1e4:	230b      	movs	r3, #11
 800a1e6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1ea:	a90a      	add	r1, sp, #40	; 0x28
 800a1ec:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1f0:	f001 ffec 	bl	800c1cc <RegionGetPhyParam>
 800a1f4:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800a1f6:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a1fa:	230c      	movs	r3, #12
 800a1fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a200:	a90a      	add	r1, sp, #40	; 0x28
 800a202:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a206:	f001 ffe1 	bl	800c1cc <RegionGetPhyParam>
 800a20a:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800a20c:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a210:	f04f 0b01 	mov.w	fp, #1
 800a214:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a218:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a21c:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a220:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a224:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a228:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a22c:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a22e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a232:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a234:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a238:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a23a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a23e:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a240:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a244:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a246:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800a24a:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800a24e:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800a252:	f7ff fbaf 	bl	80099b4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a256:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800a25a:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800a25e:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800a262:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a266:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a268:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a26a:	9600      	str	r6, [sp, #0]
 800a26c:	4b42      	ldr	r3, [pc, #264]	; (800a378 <LoRaMacInitialization+0x38c>)
 800a26e:	4632      	mov	r2, r6
 800a270:	f04f 31ff 	mov.w	r1, #4294967295
 800a274:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800a278:	f006 fb58 	bl	801092c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a27c:	9600      	str	r6, [sp, #0]
 800a27e:	4b3f      	ldr	r3, [pc, #252]	; (800a37c <LoRaMacInitialization+0x390>)
 800a280:	4632      	mov	r2, r6
 800a282:	f04f 31ff 	mov.w	r1, #4294967295
 800a286:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800a28a:	f006 fb4f 	bl	801092c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a28e:	9600      	str	r6, [sp, #0]
 800a290:	4b3b      	ldr	r3, [pc, #236]	; (800a380 <LoRaMacInitialization+0x394>)
 800a292:	4632      	mov	r2, r6
 800a294:	f04f 31ff 	mov.w	r1, #4294967295
 800a298:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800a29c:	f006 fb46 	bl	801092c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800a2a0:	9600      	str	r6, [sp, #0]
 800a2a2:	4b38      	ldr	r3, [pc, #224]	; (800a384 <LoRaMacInitialization+0x398>)
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	f04f 31ff 	mov.w	r1, #4294967295
 800a2aa:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800a2ae:	f006 fb3d 	bl	801092c <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a2b2:	f10d 0808 	add.w	r8, sp, #8
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	f006 faca 	bl	8010850 <SysTimeGetMcuTime>
 800a2bc:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800a2c0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a2c4:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800a2c8:	4b2f      	ldr	r3, [pc, #188]	; (800a388 <LoRaMacInitialization+0x39c>)
 800a2ca:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a2cc:	4b2f      	ldr	r3, [pc, #188]	; (800a38c <LoRaMacInitialization+0x3a0>)
 800a2ce:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a2d2:	4b2f      	ldr	r3, [pc, #188]	; (800a390 <LoRaMacInitialization+0x3a4>)
 800a2d4:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a2d8:	4b2e      	ldr	r3, [pc, #184]	; (800a394 <LoRaMacInitialization+0x3a8>)
 800a2da:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a2de:	4b2e      	ldr	r3, [pc, #184]	; (800a398 <LoRaMacInitialization+0x3ac>)
 800a2e0:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a2e4:	4b2d      	ldr	r3, [pc, #180]	; (800a39c <LoRaMacInitialization+0x3b0>)
 800a2e6:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a2ea:	4b2d      	ldr	r3, [pc, #180]	; (800a3a0 <LoRaMacInitialization+0x3b4>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a2f2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800a2fa:	f003 fed3 	bl	800e0a4 <SecureElementInit>
 800a2fe:	bb80      	cbnz	r0, 800a362 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a300:	4620      	mov	r0, r4
 800a302:	f001 fbf1 	bl	800bae8 <LoRaMacCryptoInit>
 800a306:	2800      	cmp	r0, #0
 800a308:	d14c      	bne.n	800a3a4 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a30a:	f001 f823 	bl	800b354 <LoRaMacCommandsInit>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d14a      	bne.n	800a3a8 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a312:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800a316:	f001 fc39 	bl	800bb8c <LoRaMacCryptoSetMulticastReference>
 800a31a:	4604      	mov	r4, r0
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d145      	bne.n	800a3ac <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a320:	4d1f      	ldr	r5, [pc, #124]	; (800a3a0 <LoRaMacInitialization+0x3b4>)
 800a322:	696b      	ldr	r3, [r5, #20]
 800a324:	4798      	blx	r3
 800a326:	f004 f94f 	bl	800e5c8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a32a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a32c:	4a0e      	ldr	r2, [pc, #56]	; (800a368 <LoRaMacInitialization+0x37c>)
 800a32e:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800a332:	4798      	blx	r3
    Radio.Sleep( );
 800a334:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a336:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a338:	4658      	mov	r0, fp
 800a33a:	f7fd fce7 	bl	8007d0c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a33e:	e00c      	b.n	800a35a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a340:	2403      	movs	r4, #3
 800a342:	e00a      	b.n	800a35a <LoRaMacInitialization+0x36e>
 800a344:	2403      	movs	r4, #3
 800a346:	e008      	b.n	800a35a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a348:	2403      	movs	r4, #3
 800a34a:	e006      	b.n	800a35a <LoRaMacInitialization+0x36e>
 800a34c:	2403      	movs	r4, #3
 800a34e:	e004      	b.n	800a35a <LoRaMacInitialization+0x36e>
 800a350:	2403      	movs	r4, #3
 800a352:	e002      	b.n	800a35a <LoRaMacInitialization+0x36e>
 800a354:	2403      	movs	r4, #3
 800a356:	e000      	b.n	800a35a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a358:	2409      	movs	r4, #9
}
 800a35a:	4620      	mov	r0, r4
 800a35c:	b00d      	add	sp, #52	; 0x34
 800a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a362:	2411      	movs	r4, #17
 800a364:	e7f9      	b.n	800a35a <LoRaMacInitialization+0x36e>
 800a366:	bf00      	nop
 800a368:	20008000 	.word	0x20008000
 800a36c:	20000628 	.word	0x20000628
 800a370:	01000400 	.word	0x01000400
 800a374:	20000b48 	.word	0x20000b48
 800a378:	080093f9 	.word	0x080093f9
 800a37c:	0800969d 	.word	0x0800969d
 800a380:	08009645 	.word	0x08009645
 800a384:	080080a5 	.word	0x080080a5
 800a388:	20000624 	.word	0x20000624
 800a38c:	0800995d 	.word	0x0800995d
 800a390:	080098fd 	.word	0x080098fd
 800a394:	08007cc1 	.word	0x08007cc1
 800a398:	080098c9 	.word	0x080098c9
 800a39c:	08009895 	.word	0x08009895
 800a3a0:	08011d10 	.word	0x08011d10
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a3a4:	2411      	movs	r4, #17
 800a3a6:	e7d8      	b.n	800a35a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a3a8:	2413      	movs	r4, #19
 800a3aa:	e7d6      	b.n	800a35a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a3ac:	2411      	movs	r4, #17
 800a3ae:	e7d4      	b.n	800a35a <LoRaMacInitialization+0x36e>

0800a3b0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	4b02      	ldr	r3, [pc, #8]	; (800a3bc <LoRaMacStart+0xc>)
 800a3b4:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	20000628 	.word	0x20000628

0800a3c0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800a3c0:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a3c2:	f7ff fdaf 	bl	8009f24 <LoRaMacIsBusy>
 800a3c6:	b130      	cbz	r0, 800a3d6 <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a3c8:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <LoRaMacStop+0x24>)
 800a3ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d006      	beq.n	800a3e0 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800a3d2:	2001      	movs	r0, #1
}
 800a3d4:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800a3d6:	4b03      	ldr	r3, [pc, #12]	; (800a3e4 <LoRaMacStop+0x24>)
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800a3de:	e7f9      	b.n	800a3d4 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e7f7      	b.n	800a3d4 <LoRaMacStop+0x14>
 800a3e4:	20000628 	.word	0x20000628

0800a3e8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800a3e8:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800a3ea:	4c14      	ldr	r4, [pc, #80]	; (800a43c <LoRaMacHalt+0x54>)
 800a3ec:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a3f0:	f006 fafa 	bl	80109e8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a3f4:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800a3f8:	f006 faf6 	bl	80109e8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a3fc:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a400:	f006 faf2 	bl	80109e8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800a404:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800a408:	f006 faee 	bl	80109e8 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a40c:	f000 ff0a 	bl	800b224 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a410:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <LoRaMacHalt+0x58>)
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a416:	2500      	movs	r5, #0
 800a418:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800a41c:	4e09      	ldr	r6, [pc, #36]	; (800a444 <LoRaMacHalt+0x5c>)
 800a41e:	4630      	mov	r0, r6
 800a420:	f7ff f964 	bl	80096ec <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a424:	f240 528c 	movw	r2, #1420	; 0x58c
 800a428:	4631      	mov	r1, r6
 800a42a:	4807      	ldr	r0, [pc, #28]	; (800a448 <LoRaMacHalt+0x60>)
 800a42c:	f004 f8df 	bl	800e5ee <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800a430:	2301      	movs	r3, #1
 800a432:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800a436:	4628      	mov	r0, r5
 800a438:	bd70      	pop	{r4, r5, r6, pc}
 800a43a:	bf00      	nop
 800a43c:	20000628 	.word	0x20000628
 800a440:	08011d10 	.word	0x08011d10
 800a444:	20008000 	.word	0x20008000
 800a448:	2000858c 	.word	0x2000858c

0800a44c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a44c:	b530      	push	{r4, r5, lr}
 800a44e:	b08b      	sub	sp, #44	; 0x2c
 800a450:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a452:	4b32      	ldr	r3, [pc, #200]	; (800a51c <LoRaMacQueryTxPossible+0xd0>)
 800a454:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a456:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a458:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800a45c:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a460:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a464:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800a468:	4b2d      	ldr	r3, [pc, #180]	; (800a520 <LoRaMacQueryTxPossible+0xd4>)
 800a46a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800a46e:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800a476:	2900      	cmp	r1, #0
 800a478:	d049      	beq.n	800a50e <LoRaMacQueryTxPossible+0xc2>
 800a47a:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a47c:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a480:	4b26      	ldr	r3, [pc, #152]	; (800a51c <LoRaMacQueryTxPossible+0xd0>)
 800a482:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800a486:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a48a:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a48c:	4924      	ldr	r1, [pc, #144]	; (800a520 <LoRaMacQueryTxPossible+0xd4>)
 800a48e:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800a492:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a496:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800a49a:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a49e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a4a2:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a4a6:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800a4aa:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a4ae:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a4b2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a4b6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800a4ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800a4c2:	ab04      	add	r3, sp, #16
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	f10d 030d 	add.w	r3, sp, #13
 800a4ca:	f10d 020e 	add.w	r2, sp, #14
 800a4ce:	f10d 010f 	add.w	r1, sp, #15
 800a4d2:	a805      	add	r0, sp, #20
 800a4d4:	f000 fe18 	bl	800b108 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a4d8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800a4dc:	f7fd fd3a 	bl	8007f54 <GetMaxAppPayloadWithoutFOptsLength>
 800a4e0:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a4e2:	a802      	add	r0, sp, #8
 800a4e4:	f000 ffba 	bl	800b45c <LoRaMacCommandsGetSizeSerializedCmds>
 800a4e8:	b998      	cbnz	r0, 800a512 <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a4ea:	9b02      	ldr	r3, [sp, #8]
 800a4ec:	2b0f      	cmp	r3, #15
 800a4ee:	d80a      	bhi.n	800a506 <LoRaMacQueryTxPossible+0xba>
 800a4f0:	786a      	ldrb	r2, [r5, #1]
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d807      	bhi.n	800a506 <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a4fa:	9b02      	ldr	r3, [sp, #8]
 800a4fc:	441c      	add	r4, r3
 800a4fe:	42a2      	cmp	r2, r4
 800a500:	d309      	bcc.n	800a516 <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a502:	b00b      	add	sp, #44	; 0x2c
 800a504:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a50a:	2008      	movs	r0, #8
 800a50c:	e7f9      	b.n	800a502 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a50e:	2003      	movs	r0, #3
 800a510:	e7f7      	b.n	800a502 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a512:	2013      	movs	r0, #19
 800a514:	e7f5      	b.n	800a502 <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a516:	2008      	movs	r0, #8
 800a518:	e7f3      	b.n	800a502 <LoRaMacQueryTxPossible+0xb6>
 800a51a:	bf00      	nop
 800a51c:	20008000 	.word	0x20008000
 800a520:	20000628 	.word	0x20000628

0800a524 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a524:	2800      	cmp	r0, #0
 800a526:	f000 813d 	beq.w	800a7a4 <LoRaMacMibGetRequestConfirm+0x280>
{
 800a52a:	b510      	push	{r4, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a530:	7800      	ldrb	r0, [r0, #0]
 800a532:	2839      	cmp	r0, #57	; 0x39
 800a534:	f200 8132 	bhi.w	800a79c <LoRaMacMibGetRequestConfirm+0x278>
 800a538:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a53c:	0040003a 	.word	0x0040003a
 800a540:	004b0046 	.word	0x004b0046
 800a544:	00560050 	.word	0x00560050
 800a548:	0130005c 	.word	0x0130005c
 800a54c:	01300130 	.word	0x01300130
 800a550:	01300130 	.word	0x01300130
 800a554:	01300130 	.word	0x01300130
 800a558:	00620130 	.word	0x00620130
 800a55c:	006e0068 	.word	0x006e0068
 800a560:	0083007b 	.word	0x0083007b
 800a564:	0093008b 	.word	0x0093008b
 800a568:	009b00a8 	.word	0x009b00a8
 800a56c:	00bb00b5 	.word	0x00bb00b5
 800a570:	00c500c0 	.word	0x00c500c0
 800a574:	00cf00ca 	.word	0x00cf00ca
 800a578:	00e500d4 	.word	0x00e500d4
 800a57c:	00f700eb 	.word	0x00f700eb
 800a580:	00fd00f1 	.word	0x00fd00f1
 800a584:	01080102 	.word	0x01080102
 800a588:	010d0115 	.word	0x010d0115
 800a58c:	01300111 	.word	0x01300111
 800a590:	0130011b 	.word	0x0130011b
 800a594:	01300130 	.word	0x01300130
 800a598:	01300130 	.word	0x01300130
 800a59c:	01300130 	.word	0x01300130
 800a5a0:	01300130 	.word	0x01300130
 800a5a4:	01300130 	.word	0x01300130
 800a5a8:	01300130 	.word	0x01300130
 800a5ac:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a5b0:	4b7d      	ldr	r3, [pc, #500]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a5b2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a5b6:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a5b8:	b004      	add	sp, #16
 800a5ba:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a5bc:	4b7a      	ldr	r3, [pc, #488]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a5be:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800a5c2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5c4:	2000      	movs	r0, #0
            break;
 800a5c6:	e7f7      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a5c8:	f003 ffca 	bl	800e560 <SecureElementGetDevEui>
 800a5cc:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5ce:	2000      	movs	r0, #0
            break;
 800a5d0:	e7f2      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a5d2:	f003 ffdb 	bl	800e58c <SecureElementGetJoinEui>
 800a5d6:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5d8:	2000      	movs	r0, #0
            break;
 800a5da:	e7ed      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a5dc:	4b72      	ldr	r3, [pc, #456]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a5de:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800a5e2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5e4:	2000      	movs	r0, #0
            break;
 800a5e6:	e7e7      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a5e8:	4b6f      	ldr	r3, [pc, #444]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a5ea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a5ee:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5f0:	2000      	movs	r0, #0
            break;
 800a5f2:	e7e1      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800a5f4:	4b6c      	ldr	r3, [pc, #432]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a5f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a5fa:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5fc:	2000      	movs	r0, #0
            break;
 800a5fe:	e7db      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a600:	4b69      	ldr	r3, [pc, #420]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a602:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800a606:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a608:	2000      	movs	r0, #0
            break;
 800a60a:	e7d5      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a60c:	4b66      	ldr	r3, [pc, #408]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a60e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a612:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a614:	2000      	movs	r0, #0
            break;
 800a616:	e7cf      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800a618:	231c      	movs	r3, #28
 800a61a:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a61e:	a902      	add	r1, sp, #8
 800a620:	4b61      	ldr	r3, [pc, #388]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a622:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a626:	f001 fdd1 	bl	800c1cc <RegionGetPhyParam>
 800a62a:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800a62c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a62e:	2000      	movs	r0, #0
            break;
 800a630:	e7c2      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a632:	3404      	adds	r4, #4
 800a634:	4b5d      	ldr	r3, [pc, #372]	; (800a7ac <LoRaMacMibGetRequestConfirm+0x288>)
 800a636:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a63a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a63e:	2000      	movs	r0, #0
            break;
 800a640:	e7ba      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a642:	3404      	adds	r4, #4
 800a644:	4b5a      	ldr	r3, [pc, #360]	; (800a7b0 <LoRaMacMibGetRequestConfirm+0x28c>)
 800a646:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a64a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a64e:	2000      	movs	r0, #0
            break;
 800a650:	e7b2      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a652:	3404      	adds	r4, #4
 800a654:	4b57      	ldr	r3, [pc, #348]	; (800a7b4 <LoRaMacMibGetRequestConfirm+0x290>)
 800a656:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a65a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a65e:	2000      	movs	r0, #0
            break;
 800a660:	e7aa      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a662:	3404      	adds	r4, #4
 800a664:	4b54      	ldr	r3, [pc, #336]	; (800a7b8 <LoRaMacMibGetRequestConfirm+0x294>)
 800a666:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a66a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a66e:	2000      	movs	r0, #0
            break;
 800a670:	e7a2      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a672:	231a      	movs	r3, #26
 800a674:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a678:	a902      	add	r1, sp, #8
 800a67a:	4b4b      	ldr	r3, [pc, #300]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a67c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a680:	f001 fda4 	bl	800c1cc <RegionGetPhyParam>
 800a684:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a686:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a688:	2000      	movs	r0, #0
            break;
 800a68a:	e795      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a68c:	2319      	movs	r3, #25
 800a68e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a692:	a902      	add	r1, sp, #8
 800a694:	4b44      	ldr	r3, [pc, #272]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a696:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a69a:	f001 fd97 	bl	800c1cc <RegionGetPhyParam>
 800a69e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a6a0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6a2:	2000      	movs	r0, #0
            break;
 800a6a4:	e788      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a6a6:	4b40      	ldr	r3, [pc, #256]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a6a8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a6ac:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6ae:	2000      	movs	r0, #0
            break;
 800a6b0:	e782      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a6b2:	4b3d      	ldr	r3, [pc, #244]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a6b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6b6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6b8:	2000      	movs	r0, #0
            break;
 800a6ba:	e77d      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a6bc:	4b3a      	ldr	r3, [pc, #232]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a6be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6c2:	2000      	movs	r0, #0
            break;
 800a6c4:	e778      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a6c6:	4b38      	ldr	r3, [pc, #224]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ca:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6cc:	2000      	movs	r0, #0
            break;
 800a6ce:	e773      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a6d0:	4b35      	ldr	r3, [pc, #212]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6d6:	2000      	movs	r0, #0
            break;
 800a6d8:	e76e      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a6da:	4b33      	ldr	r3, [pc, #204]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a6dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6de:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6e0:	2000      	movs	r0, #0
            break;
 800a6e2:	e769      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a6ea:	4b2f      	ldr	r3, [pc, #188]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a6ec:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a6f0:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a6f4:	a902      	add	r1, sp, #8
 800a6f6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a6fa:	f001 fd67 	bl	800c1cc <RegionGetPhyParam>
 800a6fe:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800a700:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a702:	2000      	movs	r0, #0
            break;
 800a704:	e758      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a706:	4b28      	ldr	r3, [pc, #160]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a708:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800a70c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a70e:	2000      	movs	r0, #0
            break;
 800a710:	e752      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a712:	4b25      	ldr	r3, [pc, #148]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a714:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a718:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a71a:	2000      	movs	r0, #0
            break;
 800a71c:	e74c      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a71e:	4b22      	ldr	r3, [pc, #136]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a720:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a724:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a726:	2000      	movs	r0, #0
            break;
 800a728:	e746      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a72a:	4b1f      	ldr	r3, [pc, #124]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a72c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a730:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a732:	2000      	movs	r0, #0
            break;
 800a734:	e740      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a736:	4b1c      	ldr	r3, [pc, #112]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a73a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a73c:	2000      	movs	r0, #0
            break;
 800a73e:	e73b      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a740:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a742:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a746:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a748:	2000      	movs	r0, #0
            break;
 800a74a:	e735      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a74c:	4b16      	ldr	r3, [pc, #88]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a74e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a750:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a752:	2000      	movs	r0, #0
            break;
 800a754:	e730      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800a756:	4b14      	ldr	r3, [pc, #80]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a758:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a75a:	2000      	movs	r0, #0
            break;
 800a75c:	e72c      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800a75e:	4b17      	ldr	r3, [pc, #92]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x298>)
 800a760:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a762:	2000      	movs	r0, #0
            break;
 800a764:	e728      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a766:	4b10      	ldr	r3, [pc, #64]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a768:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a76c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a76e:	2000      	movs	r0, #0
            break;
 800a770:	e722      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a772:	4b0d      	ldr	r3, [pc, #52]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a774:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a778:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a77a:	f001 fde1 	bl	800c340 <RegionGetVersion>
 800a77e:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a780:	2000      	movs	r0, #0
            break;
 800a782:	e719      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a784:	4b08      	ldr	r3, [pc, #32]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a78a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a78c:	2000      	movs	r0, #0
            break;
 800a78e:	e713      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800a790:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800a792:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800a796:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a798:	2000      	movs	r0, #0
            break;
 800a79a:	e70d      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 fd45 	bl	800b22c <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a7a2:	e709      	b.n	800a5b8 <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a7a4:	2003      	movs	r0, #3
}
 800a7a6:	4770      	bx	lr
 800a7a8:	20008000 	.word	0x20008000
 800a7ac:	20008064 	.word	0x20008064
 800a7b0:	200080a8 	.word	0x200080a8
 800a7b4:	2000806c 	.word	0x2000806c
 800a7b8:	200080b0 	.word	0x200080b0
 800a7bc:	2000858c 	.word	0x2000858c

0800a7c0 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f000 8254 	beq.w	800ac6e <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800a7c6:	b530      	push	{r4, r5, lr}
 800a7c8:	b085      	sub	sp, #20
 800a7ca:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a7cc:	4ba3      	ldr	r3, [pc, #652]	; (800aa5c <LoRaMacMibSetRequestConfirm+0x29c>)
 800a7ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a7d2:	f013 0f02 	tst.w	r3, #2
 800a7d6:	f040 824c 	bne.w	800ac72 <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800a7da:	7805      	ldrb	r5, [r0, #0]
 800a7dc:	2d39      	cmp	r5, #57	; 0x39
 800a7de:	f200 8243 	bhi.w	800ac68 <LoRaMacMibSetRequestConfirm+0x4a8>
 800a7e2:	e8df f015 	tbh	[pc, r5, lsl #1]
 800a7e6:	003a      	.short	0x003a
 800a7e8:	00500047 	.word	0x00500047
 800a7ec:	005e0057 	.word	0x005e0057
 800a7f0:	006a0064 	.word	0x006a0064
 800a7f4:	007b0070 	.word	0x007b0070
 800a7f8:	00910086 	.word	0x00910086
 800a7fc:	00a7009c 	.word	0x00a7009c
 800a800:	00bd00b2 	.word	0x00bd00b2
 800a804:	00d400c9 	.word	0x00d400c9
 800a808:	00da0241 	.word	0x00da0241
 800a80c:	011a0100 	.word	0x011a0100
 800a810:	017d0153 	.word	0x017d0153
 800a814:	018d016d 	.word	0x018d016d
 800a818:	019d0198 	.word	0x019d0198
 800a81c:	01a701a2 	.word	0x01a701a2
 800a820:	024101ac 	.word	0x024101ac
 800a824:	01c601b1 	.word	0x01c601b1
 800a828:	01df01f3 	.word	0x01df01f3
 800a82c:	020e0207 	.word	0x020e0207
 800a830:	021b0216 	.word	0x021b0216
 800a834:	02410221 	.word	0x02410221
 800a838:	02410224 	.word	0x02410224
 800a83c:	02410241 	.word	0x02410241
 800a840:	02410241 	.word	0x02410241
 800a844:	02410241 	.word	0x02410241
 800a848:	02410241 	.word	0x02410241
 800a84c:	02410241 	.word	0x02410241
 800a850:	02410241 	.word	0x02410241
 800a854:	02350241 	.word	0x02350241
 800a858:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a85a:	7900      	ldrb	r0, [r0, #4]
 800a85c:	f7ff f95a 	bl	8009b14 <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800a860:	b930      	cbnz	r0, 800a870 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a862:	4a7e      	ldr	r2, [pc, #504]	; (800aa5c <LoRaMacMibSetRequestConfirm+0x29c>)
 800a864:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800a870:	b005      	add	sp, #20
 800a872:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a874:	7903      	ldrb	r3, [r0, #4]
 800a876:	2b02      	cmp	r3, #2
 800a878:	f000 81fd 	beq.w	800ac76 <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800a87c:	4a78      	ldr	r2, [pc, #480]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a87e:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a882:	2000      	movs	r0, #0
 800a884:	e7ed      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a886:	6840      	ldr	r0, [r0, #4]
 800a888:	f003 fe5c 	bl	800e544 <SecureElementSetDevEui>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d0e8      	beq.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a890:	2003      	movs	r0, #3
 800a892:	e7ed      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a894:	6840      	ldr	r0, [r0, #4]
 800a896:	f003 fe69 	bl	800e56c <SecureElementSetJoinEui>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d0e1      	beq.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a89e:	4628      	mov	r0, r5
 800a8a0:	e7e6      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800a8a2:	7902      	ldrb	r2, [r0, #4]
 800a8a4:	4b6e      	ldr	r3, [pc, #440]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a8a6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e7d9      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800a8ae:	6842      	ldr	r2, [r0, #4]
 800a8b0:	4b6b      	ldr	r3, [pc, #428]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a8b2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	e7d3      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800a8ba:	6842      	ldr	r2, [r0, #4]
 800a8bc:	4b68      	ldr	r3, [pc, #416]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a8be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	e7cd      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800a8c6:	6841      	ldr	r1, [r0, #4]
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	f000 81d6 	beq.w	800ac7a <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	f001 fa6e 	bl	800bdb0 <LoRaMacCryptoSetKey>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d0c4      	beq.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a8d8:	2011      	movs	r0, #17
 800a8da:	e7c9      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800a8dc:	6841      	ldr	r1, [r0, #4]
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	f000 81cd 	beq.w	800ac7e <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a8e4:	2001      	movs	r0, #1
 800a8e6:	f001 fa63 	bl	800bdb0 <LoRaMacCryptoSetKey>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d0b9      	beq.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a8ee:	2011      	movs	r0, #17
 800a8f0:	e7be      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800a8f2:	6841      	ldr	r1, [r0, #4]
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	f000 81c4 	beq.w	800ac82 <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800a8fa:	2002      	movs	r0, #2
 800a8fc:	f001 fa58 	bl	800bdb0 <LoRaMacCryptoSetKey>
 800a900:	2800      	cmp	r0, #0
 800a902:	d0ae      	beq.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a904:	2011      	movs	r0, #17
 800a906:	e7b3      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800a908:	6841      	ldr	r1, [r0, #4]
 800a90a:	2900      	cmp	r1, #0
 800a90c:	f000 81bb 	beq.w	800ac86 <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800a910:	2003      	movs	r0, #3
 800a912:	f001 fa4d 	bl	800bdb0 <LoRaMacCryptoSetKey>
 800a916:	2800      	cmp	r0, #0
 800a918:	d0a3      	beq.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a91a:	2011      	movs	r0, #17
 800a91c:	e7a8      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800a91e:	6841      	ldr	r1, [r0, #4]
 800a920:	2900      	cmp	r1, #0
 800a922:	f000 81b2 	beq.w	800ac8a <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800a926:	207f      	movs	r0, #127	; 0x7f
 800a928:	f001 fa42 	bl	800bdb0 <LoRaMacCryptoSetKey>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d098      	beq.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a930:	2011      	movs	r0, #17
 800a932:	e79d      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800a934:	6841      	ldr	r1, [r0, #4]
 800a936:	2900      	cmp	r1, #0
 800a938:	f000 81a9 	beq.w	800ac8e <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800a93c:	2080      	movs	r0, #128	; 0x80
 800a93e:	f001 fa37 	bl	800bdb0 <LoRaMacCryptoSetKey>
 800a942:	2800      	cmp	r0, #0
 800a944:	d08d      	beq.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a946:	2011      	movs	r0, #17
 800a948:	e792      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800a94a:	6841      	ldr	r1, [r0, #4]
 800a94c:	2900      	cmp	r1, #0
 800a94e:	f000 81a0 	beq.w	800ac92 <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800a952:	2081      	movs	r0, #129	; 0x81
 800a954:	f001 fa2c 	bl	800bdb0 <LoRaMacCryptoSetKey>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d082      	beq.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a95c:	2011      	movs	r0, #17
 800a95e:	e787      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a960:	6841      	ldr	r1, [r0, #4]
 800a962:	2900      	cmp	r1, #0
 800a964:	f000 8197 	beq.w	800ac96 <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800a968:	2082      	movs	r0, #130	; 0x82
 800a96a:	f001 fa21 	bl	800bdb0 <LoRaMacCryptoSetKey>
 800a96e:	2800      	cmp	r0, #0
 800a970:	f43f af77 	beq.w	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a974:	2011      	movs	r0, #17
 800a976:	e77b      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800a978:	7900      	ldrb	r0, [r0, #4]
 800a97a:	4b39      	ldr	r3, [pc, #228]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a97c:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a980:	4c38      	ldr	r4, [pc, #224]	; (800aa64 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800a982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a984:	4798      	blx	r3
            Radio.Sleep( );
 800a986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a988:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a98a:	2000      	movs	r0, #0
 800a98c:	e769      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800a98e:	7902      	ldrb	r2, [r0, #4]
 800a990:	4b33      	ldr	r3, [pc, #204]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a996:	2000      	movs	r0, #0
 800a998:	e763      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a99a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a99e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a9a2:	4b2f      	ldr	r3, [pc, #188]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9a4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a9a8:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800a9ac:	2207      	movs	r2, #7
 800a9ae:	a901      	add	r1, sp, #4
 800a9b0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a9b4:	f001 fc2b 	bl	800c20e <RegionVerify>
 800a9b8:	b908      	cbnz	r0, 800a9be <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9ba:	2003      	movs	r0, #3
 800a9bc:	e750      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800a9be:	6863      	ldr	r3, [r4, #4]
 800a9c0:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	a901      	add	r1, sp, #4
 800a9c6:	4b26      	ldr	r3, [pc, #152]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9c8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a9cc:	f001 fc1f 	bl	800c20e <RegionVerify>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	f000 8162 	beq.w	800ac9a <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800a9d6:	4b24      	ldr	r3, [pc, #144]	; (800aa68 <LoRaMacMibSetRequestConfirm+0x2a8>)
 800a9d8:	3404      	adds	r4, #4
 800a9da:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a9de:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e73c      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a9e6:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a9ea:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a9ee:	4b1c      	ldr	r3, [pc, #112]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9f0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a9f4:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a9f8:	2207      	movs	r2, #7
 800a9fa:	a901      	add	r1, sp, #4
 800a9fc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aa00:	f001 fc05 	bl	800c20e <RegionVerify>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	f000 814a 	beq.w	800ac9e <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800aa0a:	4b18      	ldr	r3, [pc, #96]	; (800aa6c <LoRaMacMibSetRequestConfirm+0x2ac>)
 800aa0c:	3404      	adds	r4, #4
 800aa0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa12:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa16:	2000      	movs	r0, #0
 800aa18:	e722      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800aa1a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800aa1e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa22:	4b0f      	ldr	r3, [pc, #60]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aa24:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aa28:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800aa2c:	2207      	movs	r2, #7
 800aa2e:	a901      	add	r1, sp, #4
 800aa30:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aa34:	f001 fbeb 	bl	800c20e <RegionVerify>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	f000 8132 	beq.w	800aca2 <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800aa3e:	4b08      	ldr	r3, [pc, #32]	; (800aa60 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aa40:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800aa44:	3404      	adds	r4, #4
 800aa46:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa4a:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800aa4e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d00c      	beq.n	800aa70 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa56:	2000      	movs	r0, #0
 800aa58:	e702      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
 800aa5a:	bf00      	nop
 800aa5c:	20000628 	.word	0x20000628
 800aa60:	20008000 	.word	0x20008000
 800aa64:	08011d10 	.word	0x08011d10
 800aa68:	20008064 	.word	0x20008064
 800aa6c:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800aa70:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800aa74:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	f43f aef1 	beq.w	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800aa7e:	4b90      	ldr	r3, [pc, #576]	; (800acc0 <LoRaMacMibSetRequestConfirm+0x500>)
 800aa80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa82:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800aa84:	f7fe fd82 	bl	800958c <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa88:	2000      	movs	r0, #0
 800aa8a:	e6e9      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800aa8c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800aa90:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa94:	4b8b      	ldr	r3, [pc, #556]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800aa96:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aa9a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800aa9e:	2207      	movs	r2, #7
 800aaa0:	a901      	add	r1, sp, #4
 800aaa2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aaa6:	f001 fbb2 	bl	800c20e <RegionVerify>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	f000 80fb 	beq.w	800aca6 <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800aab0:	4b85      	ldr	r3, [pc, #532]	; (800acc8 <LoRaMacMibSetRequestConfirm+0x508>)
 800aab2:	3404      	adds	r4, #4
 800aab4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aab8:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aabc:	2000      	movs	r0, #0
 800aabe:	e6cf      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800aac0:	6843      	ldr	r3, [r0, #4]
 800aac2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800aac4:	2301      	movs	r3, #1
 800aac6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800aaca:	a902      	add	r1, sp, #8
 800aacc:	4b7d      	ldr	r3, [pc, #500]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800aace:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aad2:	f001 fbaf 	bl	800c234 <RegionChanMaskSet>
 800aad6:	b108      	cbz	r0, 800aadc <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aad8:	2000      	movs	r0, #0
 800aada:	e6c1      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aadc:	2003      	movs	r0, #3
 800aade:	e6c7      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800aae0:	6843      	ldr	r3, [r0, #4]
 800aae2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800aaea:	a902      	add	r1, sp, #8
 800aaec:	4b75      	ldr	r3, [pc, #468]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800aaee:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aaf2:	f001 fb9f 	bl	800c234 <RegionChanMaskSet>
 800aaf6:	b108      	cbz	r0, 800aafc <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaf8:	2000      	movs	r0, #0
 800aafa:	e6b1      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aafc:	2003      	movs	r0, #3
 800aafe:	e6b7      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ab00:	7902      	ldrb	r2, [r0, #4]
 800ab02:	1e53      	subs	r3, r2, #1
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b0e      	cmp	r3, #14
 800ab08:	f200 80cf 	bhi.w	800acaa <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ab0c:	4b6d      	ldr	r3, [pc, #436]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab12:	2000      	movs	r0, #0
 800ab14:	e6a4      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ab16:	6842      	ldr	r2, [r0, #4]
 800ab18:	4b6a      	ldr	r3, [pc, #424]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab1a:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e6a0      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ab20:	6842      	ldr	r2, [r0, #4]
 800ab22:	4b68      	ldr	r3, [pc, #416]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab24:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab26:	2000      	movs	r0, #0
 800ab28:	e69b      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ab2a:	6842      	ldr	r2, [r0, #4]
 800ab2c:	4b65      	ldr	r3, [pc, #404]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab2e:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab30:	2000      	movs	r0, #0
 800ab32:	e696      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ab34:	6842      	ldr	r2, [r0, #4]
 800ab36:	4b63      	ldr	r3, [pc, #396]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab38:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	e691      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ab3e:	6842      	ldr	r2, [r0, #4]
 800ab40:	4b60      	ldr	r3, [pc, #384]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab42:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab44:	2000      	movs	r0, #0
 800ab46:	e68c      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ab48:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ab4c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800ab50:	2206      	movs	r2, #6
 800ab52:	a901      	add	r1, sp, #4
 800ab54:	4b5b      	ldr	r3, [pc, #364]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab56:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab5a:	f001 fb58 	bl	800c20e <RegionVerify>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f000 80a5 	beq.w	800acae <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ab64:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ab68:	4b56      	ldr	r3, [pc, #344]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab6a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab6e:	2000      	movs	r0, #0
 800ab70:	e676      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ab72:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ab76:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ab7a:	4b52      	ldr	r3, [pc, #328]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab7c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ab80:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ab84:	2205      	movs	r2, #5
 800ab86:	a901      	add	r1, sp, #4
 800ab88:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab8c:	f001 fb3f 	bl	800c20e <RegionVerify>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	f000 808e 	beq.w	800acb2 <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ab96:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ab9a:	4b4a      	ldr	r3, [pc, #296]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aba0:	2000      	movs	r0, #0
 800aba2:	e65d      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800aba4:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800aba8:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800abac:	220a      	movs	r2, #10
 800abae:	a901      	add	r1, sp, #4
 800abb0:	4b44      	ldr	r3, [pc, #272]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800abb2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800abb6:	f001 fb2a 	bl	800c20e <RegionVerify>
 800abba:	2800      	cmp	r0, #0
 800abbc:	d07b      	beq.n	800acb6 <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800abbe:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800abc2:	4b40      	ldr	r3, [pc, #256]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800abc4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abc8:	2000      	movs	r0, #0
 800abca:	e649      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800abcc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800abd0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800abd4:	2209      	movs	r2, #9
 800abd6:	a901      	add	r1, sp, #4
 800abd8:	4b3a      	ldr	r3, [pc, #232]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800abda:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800abde:	f001 fb16 	bl	800c20e <RegionVerify>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d069      	beq.n	800acba <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800abe6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800abea:	4b36      	ldr	r3, [pc, #216]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800abec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abf0:	2000      	movs	r0, #0
 800abf2:	e635      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800abf4:	6842      	ldr	r2, [r0, #4]
 800abf6:	4b33      	ldr	r3, [pc, #204]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800abf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800abfc:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abfe:	2000      	movs	r0, #0
 800ac00:	e62f      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ac02:	7902      	ldrb	r2, [r0, #4]
 800ac04:	4b2f      	ldr	r3, [pc, #188]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac06:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800ac0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac0e:	2000      	movs	r0, #0
 800ac10:	e627      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800ac12:	6842      	ldr	r2, [r0, #4]
 800ac14:	4b2b      	ldr	r3, [pc, #172]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac16:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac18:	2000      	movs	r0, #0
 800ac1a:	e622      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800ac1c:	6842      	ldr	r2, [r0, #4]
 800ac1e:	4b29      	ldr	r3, [pc, #164]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac24:	2000      	movs	r0, #0
 800ac26:	e61c      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800ac28:	f7fe fdc4 	bl	80097b4 <RestoreNvmData>
            break;
 800ac2c:	e618      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800ac2e:	7983      	ldrb	r3, [r0, #6]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d901      	bls.n	800ac38 <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac34:	2003      	movs	r0, #3
 800ac36:	e61b      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800ac38:	6842      	ldr	r2, [r0, #4]
 800ac3a:	4b22      	ldr	r3, [pc, #136]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac3c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ac40:	6840      	ldr	r0, [r0, #4]
 800ac42:	f000 ff69 	bl	800bb18 <LoRaMacCryptoSetLrWanVersion>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f43f ae0a 	beq.w	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ac4c:	2011      	movs	r0, #17
 800ac4e:	e60f      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800ac50:	6842      	ldr	r2, [r0, #4]
 800ac52:	4b1c      	ldr	r3, [pc, #112]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac58:	2000      	movs	r0, #0
 800ac5a:	e602      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800ac5c:	7902      	ldrb	r2, [r0, #4]
 800ac5e:	4b19      	ldr	r3, [pc, #100]	; (800acc4 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac60:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac64:	2000      	movs	r0, #0
 800ac66:	e5fc      	b.n	800a862 <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800ac68:	f000 fae2 	bl	800b230 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800ac6c:	e5f8      	b.n	800a860 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ac6e:	2003      	movs	r0, #3
}
 800ac70:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800ac72:	2001      	movs	r0, #1
 800ac74:	e5fc      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac76:	2003      	movs	r0, #3
 800ac78:	e5fa      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac7a:	2003      	movs	r0, #3
 800ac7c:	e5f8      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac7e:	2003      	movs	r0, #3
 800ac80:	e5f6      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac82:	2003      	movs	r0, #3
 800ac84:	e5f4      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac86:	2003      	movs	r0, #3
 800ac88:	e5f2      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac8a:	2003      	movs	r0, #3
 800ac8c:	e5f0      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac8e:	2003      	movs	r0, #3
 800ac90:	e5ee      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac92:	2003      	movs	r0, #3
 800ac94:	e5ec      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac96:	2003      	movs	r0, #3
 800ac98:	e5ea      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac9a:	2003      	movs	r0, #3
 800ac9c:	e5e8      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac9e:	2003      	movs	r0, #3
 800aca0:	e5e6      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aca2:	2003      	movs	r0, #3
 800aca4:	e5e4      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aca6:	2003      	movs	r0, #3
 800aca8:	e5e2      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acaa:	2003      	movs	r0, #3
 800acac:	e5e0      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acae:	2003      	movs	r0, #3
 800acb0:	e5de      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acb2:	2003      	movs	r0, #3
 800acb4:	e5dc      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acb6:	2003      	movs	r0, #3
 800acb8:	e5da      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acba:	2003      	movs	r0, #3
 800acbc:	e5d8      	b.n	800a870 <LoRaMacMibSetRequestConfirm+0xb0>
 800acbe:	bf00      	nop
 800acc0:	08011d10 	.word	0x08011d10
 800acc4:	20008000 	.word	0x20008000
 800acc8:	200080b0 	.word	0x200080b0

0800accc <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800acd0:	2300      	movs	r3, #0
 800acd2:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800acd6:	2800      	cmp	r0, #0
 800acd8:	f000 80ea 	beq.w	800aeb0 <LoRaMacMlmeRequest+0x1e4>
 800acdc:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800acde:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800ace0:	f7ff f920 	bl	8009f24 <LoRaMacIsBusy>
 800ace4:	b118      	cbz	r0, 800acee <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800ace6:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800ace8:	4620      	mov	r0, r4
 800acea:	b006      	add	sp, #24
 800acec:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800acee:	f000 fd49 	bl	800b784 <LoRaMacConfirmQueueIsFull>
 800acf2:	b108      	cbz	r0, 800acf8 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800acf4:	2401      	movs	r4, #1
 800acf6:	e7f7      	b.n	800ace8 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800acf8:	f000 fd3e 	bl	800b778 <LoRaMacConfirmQueueGetCnt>
 800acfc:	b308      	cbz	r0, 800ad42 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800acfe:	4b6d      	ldr	r3, [pc, #436]	; (800aeb4 <LoRaMacMlmeRequest+0x1e8>)
 800ad00:	2101      	movs	r1, #1
 800ad02:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ad06:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800ad0a:	f042 0204 	orr.w	r2, r2, #4
 800ad0e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800ad12:	782b      	ldrb	r3, [r5, #0]
 800ad14:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad18:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800ad22:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800ad26:	461c      	mov	r4, r3
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	2b0c      	cmp	r3, #12
 800ad2c:	f200 80a6 	bhi.w	800ae7c <LoRaMacMlmeRequest+0x1b0>
 800ad30:	e8df f003 	tbb	[pc, r3]
 800ad34:	5aa4a40d 	.word	0x5aa4a40d
 800ad38:	a4a4a464 	.word	0xa4a4a464
 800ad3c:	7695a46d 	.word	0x7695a46d
 800ad40:	8c          	.byte	0x8c
 800ad41:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800ad42:	2214      	movs	r2, #20
 800ad44:	2100      	movs	r1, #0
 800ad46:	485c      	ldr	r0, [pc, #368]	; (800aeb8 <LoRaMacMlmeRequest+0x1ec>)
 800ad48:	f003 fc69 	bl	800e61e <memset1>
 800ad4c:	e7d7      	b.n	800acfe <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800ad4e:	4b59      	ldr	r3, [pc, #356]	; (800aeb4 <LoRaMacMlmeRequest+0x1e8>)
 800ad50:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ad54:	f013 0f20 	tst.w	r3, #32
 800ad58:	d1c6      	bne.n	800ace8 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800ad5a:	792b      	ldrb	r3, [r5, #4]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d003      	beq.n	800ad68 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d021      	beq.n	800ada8 <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ad64:	2402      	movs	r4, #2
 800ad66:	e08a      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800ad68:	f7fe fe24 	bl	80099b4 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800ad6c:	4c53      	ldr	r4, [pc, #332]	; (800aebc <LoRaMacMlmeRequest+0x1f0>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ad74:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ad78:	f001 fabe 	bl	800c2f8 <RegionAlternateDr>
 800ad7c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ad80:	2307      	movs	r3, #7
 800ad82:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800ad86:	20ff      	movs	r0, #255	; 0xff
 800ad88:	f7fe ff4a 	bl	8009c20 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d075      	beq.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800ad92:	4e4a      	ldr	r6, [pc, #296]	; (800aebc <LoRaMacMlmeRequest+0x1f0>)
 800ad94:	2201      	movs	r2, #1
 800ad96:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ad9a:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800ad9e:	f001 faab 	bl	800c2f8 <RegionAlternateDr>
 800ada2:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800ada6:	e06a      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800ada8:	4e44      	ldr	r6, [pc, #272]	; (800aebc <LoRaMacMlmeRequest+0x1f0>)
 800adaa:	2400      	movs	r4, #0
 800adac:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800adb0:	2302      	movs	r3, #2
 800adb2:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800adb6:	4669      	mov	r1, sp
 800adb8:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800adbc:	f001 fa1f 	bl	800c1fe <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800adc0:	792b      	ldrb	r3, [r5, #4]
 800adc2:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800adc6:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800adca:	2301      	movs	r3, #1
 800adcc:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800add0:	4e38      	ldr	r6, [pc, #224]	; (800aeb4 <LoRaMacMlmeRequest+0x1e8>)
 800add2:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800adda:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800adde:	f043 0320 	orr.w	r3, r3, #32
 800ade2:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800ade6:	e04a      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ade8:	2200      	movs	r2, #0
 800adea:	a904      	add	r1, sp, #16
 800adec:	2002      	movs	r0, #2
 800adee:	f000 fac1 	bl	800b374 <LoRaMacCommandsAddCmd>
 800adf2:	4604      	mov	r4, r0
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d042      	beq.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800adf8:	2413      	movs	r4, #19
 800adfa:	e040      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800adfc:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800ae00:	b2d2      	uxtb	r2, r2
 800ae02:	68a9      	ldr	r1, [r5, #8]
 800ae04:	88a8      	ldrh	r0, [r5, #4]
 800ae06:	f7fc ffe3 	bl	8007dd0 <SetTxContinuousWave>
 800ae0a:	4604      	mov	r4, r0
            break;
 800ae0c:	e037      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ae0e:	2200      	movs	r2, #0
 800ae10:	a904      	add	r1, sp, #16
 800ae12:	200d      	movs	r0, #13
 800ae14:	f000 faae 	bl	800b374 <LoRaMacCommandsAddCmd>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	b380      	cbz	r0, 800ae7e <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae1c:	2413      	movs	r4, #19
 800ae1e:	e02e      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800ae20:	4b26      	ldr	r3, [pc, #152]	; (800aebc <LoRaMacMlmeRequest+0x1f0>)
 800ae22:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ae26:	b10b      	cbz	r3, 800ae2c <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ae28:	2402      	movs	r4, #2
 800ae2a:	e028      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800ae2c:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800ae2e:	f004 0007 	and.w	r0, r4, #7
 800ae32:	f000 f9f6 	bl	800b222 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800ae36:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	a904      	add	r1, sp, #16
 800ae3e:	2010      	movs	r0, #16
 800ae40:	f000 fa98 	bl	800b374 <LoRaMacCommandsAddCmd>
 800ae44:	4604      	mov	r4, r0
 800ae46:	b1d0      	cbz	r0, 800ae7e <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae48:	2413      	movs	r4, #19
 800ae4a:	e018      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	a904      	add	r1, sp, #16
 800ae50:	2012      	movs	r0, #18
 800ae52:	f000 fa8f 	bl	800b374 <LoRaMacCommandsAddCmd>
 800ae56:	4604      	mov	r4, r0
 800ae58:	b188      	cbz	r0, 800ae7e <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae5a:	2413      	movs	r4, #19
 800ae5c:	e00f      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800ae64:	f000 f9ce 	bl	800b204 <LoRaMacClassBIsAcquisitionInProgress>
 800ae68:	b108      	cbz	r0, 800ae6e <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800ae6a:	2401      	movs	r4, #1
 800ae6c:	e007      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800ae6e:	f000 f9c6 	bl	800b1fe <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800ae72:	2000      	movs	r0, #0
 800ae74:	f000 f9c8 	bl	800b208 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800ae78:	2400      	movs	r4, #0
 800ae7a:	e000      	b.n	800ae7e <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800ae7c:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ae7e:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <LoRaMacMlmeRequest+0x1e8>)
 800ae80:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800ae84:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800ae86:	b17c      	cbz	r4, 800aea8 <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ae88:	f000 fc76 	bl	800b778 <LoRaMacConfirmQueueGetCnt>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	f47f af2b 	bne.w	800ace8 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800ae92:	4b08      	ldr	r3, [pc, #32]	; (800aeb4 <LoRaMacMlmeRequest+0x1e8>)
 800ae94:	2100      	movs	r1, #0
 800ae96:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ae9a:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800ae9e:	f361 0282 	bfi	r2, r1, #2, #1
 800aea2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800aea6:	e71f      	b.n	800ace8 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800aea8:	a805      	add	r0, sp, #20
 800aeaa:	f000 fba1 	bl	800b5f0 <LoRaMacConfirmQueueAdd>
 800aeae:	e71b      	b.n	800ace8 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aeb0:	2403      	movs	r4, #3
 800aeb2:	e719      	b.n	800ace8 <LoRaMacMlmeRequest+0x1c>
 800aeb4:	20000628 	.word	0x20000628
 800aeb8:	20000a80 	.word	0x20000a80
 800aebc:	20008000 	.word	0x20008000

0800aec0 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	b091      	sub	sp, #68	; 0x44
 800aec6:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800aec8:	2800      	cmp	r0, #0
 800aeca:	f000 80de 	beq.w	800b08a <LoRaMacMcpsRequest+0x1ca>
 800aece:	f04f 0a00 	mov.w	sl, #0
 800aed2:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800aed4:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800aed8:	f7ff f824 	bl	8009f24 <LoRaMacIsBusy>
 800aedc:	4680      	mov	r8, r0
 800aede:	b118      	cbz	r0, 800aee8 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800aee0:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800aee2:	b011      	add	sp, #68	; 0x44
 800aee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800aee8:	ac06      	add	r4, sp, #24
 800aeea:	462e      	mov	r6, r5
 800aeec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800aeee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aef0:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800aef4:	4651      	mov	r1, sl
 800aef6:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800aefa:	4c66      	ldr	r4, [pc, #408]	; (800b094 <LoRaMacMcpsRequest+0x1d4>)
 800aefc:	2214      	movs	r2, #20
 800aefe:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800af02:	f003 fb8c 	bl	800e61e <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800af0c:	4b62      	ldr	r3, [pc, #392]	; (800b098 <LoRaMacMcpsRequest+0x1d8>)
 800af0e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800af12:	2b02      	cmp	r3, #2
 800af14:	d065      	beq.n	800afe2 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800af16:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800af1a:	2f01      	cmp	r7, #1
 800af1c:	f000 8086 	beq.w	800b02c <LoRaMacMcpsRequest+0x16c>
 800af20:	2f03      	cmp	r7, #3
 800af22:	f000 8096 	beq.w	800b052 <LoRaMacMcpsRequest+0x192>
 800af26:	2f00      	cmp	r7, #0
 800af28:	d06d      	beq.n	800b006 <LoRaMacMcpsRequest+0x146>
 800af2a:	f04f 0b00 	mov.w	fp, #0
 800af2e:	f8cd b014 	str.w	fp, [sp, #20]
 800af32:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800af36:	2302      	movs	r3, #2
 800af38:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800af3c:	4e56      	ldr	r6, [pc, #344]	; (800b098 <LoRaMacMcpsRequest+0x1d8>)
 800af3e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800af42:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800af46:	a90e      	add	r1, sp, #56	; 0x38
 800af48:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800af4c:	f001 f93e 	bl	800c1cc <RegionGetPhyParam>
 800af50:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800af52:	b244      	sxtb	r4, r0
 800af54:	45a3      	cmp	fp, r4
 800af56:	bfb8      	it	lt
 800af58:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800af5a:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800af5e:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800af62:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800af66:	4648      	mov	r0, r9
 800af68:	f7fc ff04 	bl	8007d74 <CheckForMinimumAbpDatarate>
 800af6c:	4603      	mov	r3, r0
 800af6e:	b900      	cbnz	r0, 800af72 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800af70:	465c      	mov	r4, fp
    if( readyToSend == true )
 800af72:	f1b8 0f00 	cmp.w	r8, #0
 800af76:	f000 8082 	beq.w	800b07e <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800af7a:	f1b9 0f00 	cmp.w	r9, #0
 800af7e:	d000      	beq.n	800af82 <LoRaMacMcpsRequest+0xc2>
 800af80:	b19b      	cbz	r3, 800afaa <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800af82:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800af86:	4b44      	ldr	r3, [pc, #272]	; (800b098 <LoRaMacMcpsRequest+0x1d8>)
 800af88:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800af8c:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800af90:	2205      	movs	r2, #5
 800af92:	a90b      	add	r1, sp, #44	; 0x2c
 800af94:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800af98:	f001 f939 	bl	800c20e <RegionVerify>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	d076      	beq.n	800b08e <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800afa0:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800afa4:	4b3c      	ldr	r3, [pc, #240]	; (800b098 <LoRaMacMcpsRequest+0x1d8>)
 800afa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800afaa:	4b3a      	ldr	r3, [pc, #232]	; (800b094 <LoRaMacMcpsRequest+0x1d4>)
 800afac:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800afb0:	4b39      	ldr	r3, [pc, #228]	; (800b098 <LoRaMacMcpsRequest+0x1d8>)
 800afb2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800afb6:	f7fe f81d 	bl	8008ff4 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800afba:	9b03      	ldr	r3, [sp, #12]
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	4653      	mov	r3, sl
 800afc0:	9a05      	ldr	r2, [sp, #20]
 800afc2:	9904      	ldr	r1, [sp, #16]
 800afc4:	a80c      	add	r0, sp, #48	; 0x30
 800afc6:	f7fe ff19 	bl	8009dfc <Send>
        if( status == LORAMAC_STATUS_OK )
 800afca:	2800      	cmp	r0, #0
 800afcc:	d152      	bne.n	800b074 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800afce:	4b31      	ldr	r3, [pc, #196]	; (800b094 <LoRaMacMcpsRequest+0x1d4>)
 800afd0:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800afd4:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800afd8:	f042 0201 	orr.w	r2, r2, #1
 800afdc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800afe0:	e04e      	b.n	800b080 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800afe2:	4b2d      	ldr	r3, [pc, #180]	; (800b098 <LoRaMacMcpsRequest+0x1d8>)
 800afe4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d194      	bne.n	800af16 <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800afec:	4b2a      	ldr	r3, [pc, #168]	; (800b098 <LoRaMacMcpsRequest+0x1d8>)
 800afee:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d18f      	bne.n	800af16 <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800aff6:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800affa:	2b00      	cmp	r3, #0
 800affc:	d18b      	bne.n	800af16 <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800affe:	2301      	movs	r3, #1
 800b000:	f88d 3018 	strb.w	r3, [sp, #24]
 800b004:	e787      	b.n	800af16 <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b006:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b00a:	2202      	movs	r2, #2
 800b00c:	f362 1347 	bfi	r3, r2, #5, #3
 800b010:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800b014:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b018:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800b01a:	9b08      	ldr	r3, [sp, #32]
 800b01c:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800b01e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800b022:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b026:	f04f 0801 	mov.w	r8, #1
            break;
 800b02a:	e784      	b.n	800af36 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b02c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b030:	2204      	movs	r2, #4
 800b032:	f362 1347 	bfi	r3, r2, #5, #3
 800b036:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800b03a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b03e:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800b040:	9b08      	ldr	r3, [sp, #32]
 800b042:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800b044:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800b048:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b04c:	f04f 0801 	mov.w	r8, #1
            break;
 800b050:	e771      	b.n	800af36 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b052:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b056:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b05a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800b05e:	9b07      	ldr	r3, [sp, #28]
 800b060:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800b062:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800b066:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800b06a:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	9304      	str	r3, [sp, #16]
            break;
 800b072:	e760      	b.n	800af36 <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800b074:	4b07      	ldr	r3, [pc, #28]	; (800b094 <LoRaMacMcpsRequest+0x1d4>)
 800b076:	2200      	movs	r2, #0
 800b078:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800b07c:	e000      	b.n	800b080 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b07e:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b080:	4b04      	ldr	r3, [pc, #16]	; (800b094 <LoRaMacMcpsRequest+0x1d4>)
 800b082:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800b086:	612b      	str	r3, [r5, #16]
    return status;
 800b088:	e72b      	b.n	800aee2 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b08a:	2003      	movs	r0, #3
 800b08c:	e729      	b.n	800aee2 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b08e:	2003      	movs	r0, #3
 800b090:	e727      	b.n	800aee2 <LoRaMacMcpsRequest+0x22>
 800b092:	bf00      	nop
 800b094:	20000628 	.word	0x20000628
 800b098:	20008000 	.word	0x20008000

0800b09c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b09c:	b510      	push	{r4, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b0a2:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b0a6:	220f      	movs	r2, #15
 800b0a8:	a901      	add	r1, sp, #4
 800b0aa:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b0ac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b0b0:	f001 f8ad 	bl	800c20e <RegionVerify>
 800b0b4:	b110      	cbz	r0, 800b0bc <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b0b6:	4b02      	ldr	r3, [pc, #8]	; (800b0c0 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b0b8:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800b0bc:	b002      	add	sp, #8
 800b0be:	bd10      	pop	{r4, pc}
 800b0c0:	20008000 	.word	0x20008000

0800b0c4 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b0c4:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b0c6:	f7ff f97b 	bl	800a3c0 <LoRaMacStop>
 800b0ca:	b110      	cbz	r0, 800b0d2 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b0cc:	2401      	movs	r4, #1
    }
}
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	bd38      	pop	{r3, r4, r5, pc}
 800b0d2:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b0d4:	4d0a      	ldr	r5, [pc, #40]	; (800b100 <LoRaMacDeInitialization+0x3c>)
 800b0d6:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b0da:	f005 fc85 	bl	80109e8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b0de:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b0e2:	f005 fc81 	bl	80109e8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b0e6:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b0ea:	f005 fc7d 	bl	80109e8 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b0ee:	f000 f899 	bl	800b224 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800b0f2:	f7fe fc5f 	bl	80099b4 <ResetMacParameters>
        Radio.Sleep( );
 800b0f6:	4b03      	ldr	r3, [pc, #12]	; (800b104 <LoRaMacDeInitialization+0x40>)
 800b0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fa:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b0fc:	e7e7      	b.n	800b0ce <LoRaMacDeInitialization+0xa>
 800b0fe:	bf00      	nop
 800b100:	20000628 	.word	0x20000628
 800b104:	08011d10 	.word	0x08011d10

0800b108 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	b08b      	sub	sp, #44	; 0x2c
 800b10e:	460f      	mov	r7, r1
 800b110:	4616      	mov	r6, r2
 800b112:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b114:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800b118:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800b11c:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b120:	6842      	ldr	r2, [r0, #4]
 800b122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b124:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800b126:	f890 8001 	ldrb.w	r8, [r0, #1]
 800b12a:	f1b8 0f00 	cmp.w	r8, #0
 800b12e:	d109      	bne.n	800b144 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800b130:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b134:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800b138:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800b13c:	4640      	mov	r0, r8
 800b13e:	b00b      	add	sp, #44	; 0x2c
 800b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b144:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b146:	2302      	movs	r3, #2
 800b148:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b14c:	7bc3      	ldrb	r3, [r0, #15]
 800b14e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b152:	a908      	add	r1, sp, #32
 800b154:	7c00      	ldrb	r0, [r0, #16]
 800b156:	f001 f839 	bl	800c1cc <RegionGetPhyParam>
 800b15a:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800b15c:	b243      	sxtb	r3, r0
 800b15e:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800b160:	454b      	cmp	r3, r9
 800b162:	bfb8      	it	lt
 800b164:	464b      	movlt	r3, r9
 800b166:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800b168:	6862      	ldr	r2, [r4, #4]
 800b16a:	8923      	ldrh	r3, [r4, #8]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d201      	bcs.n	800b174 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800b170:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b174:	8961      	ldrh	r1, [r4, #10]
 800b176:	440b      	add	r3, r1
 800b178:	429a      	cmp	r2, r3
 800b17a:	d224      	bcs.n	800b1c6 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800b17c:	6863      	ldr	r3, [r4, #4]
 800b17e:	8921      	ldrh	r1, [r4, #8]
 800b180:	8962      	ldrh	r2, [r4, #10]
 800b182:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800b186:	4283      	cmp	r3, r0
 800b188:	d332      	bcc.n	800b1f0 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800b18a:	1a5b      	subs	r3, r3, r1
 800b18c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b190:	fb02 3311 	mls	r3, r2, r1, r3
 800b194:	bb7b      	cbnz	r3, 800b1f6 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800b196:	9b01      	ldr	r3, [sp, #4]
 800b198:	4599      	cmp	r9, r3
 800b19a:	dc03      	bgt.n	800b1a4 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800b19c:	7823      	ldrb	r3, [r4, #0]
 800b19e:	b9eb      	cbnz	r3, 800b1dc <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800b1a0:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b1a4:	2321      	movs	r3, #33	; 0x21
 800b1a6:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800b1aa:	9b00      	ldr	r3, [sp, #0]
 800b1ac:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b1b0:	7be3      	ldrb	r3, [r4, #15]
 800b1b2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b1b6:	a908      	add	r1, sp, #32
 800b1b8:	7c20      	ldrb	r0, [r4, #16]
 800b1ba:	f001 f807 	bl	800c1cc <RegionGetPhyParam>
 800b1be:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800b1c0:	fa4f f980 	sxtb.w	r9, r0
 800b1c4:	e7b4      	b.n	800b130 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800b1c6:	230a      	movs	r3, #10
 800b1c8:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b1cc:	a908      	add	r1, sp, #32
 800b1ce:	7c20      	ldrb	r0, [r4, #16]
 800b1d0:	f000 fffc 	bl	800c1cc <RegionGetPhyParam>
 800b1d4:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800b1d6:	fa4f fa80 	sxtb.w	sl, r0
 800b1da:	e7cf      	b.n	800b17c <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b1dc:	2302      	movs	r3, #2
 800b1de:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800b1e2:	a903      	add	r1, sp, #12
 800b1e4:	7c20      	ldrb	r0, [r4, #16]
 800b1e6:	f001 f80a 	bl	800c1fe <RegionInitDefaults>
                    nbTrans = 1;
 800b1ea:	f04f 0b01 	mov.w	fp, #1
 800b1ee:	e7d9      	b.n	800b1a4 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800b1f0:	f8dd 9000 	ldr.w	r9, [sp]
 800b1f4:	e79c      	b.n	800b130 <LoRaMacAdrCalcNext+0x28>
 800b1f6:	f8dd 9000 	ldr.w	r9, [sp]
 800b1fa:	e799      	b.n	800b130 <LoRaMacAdrCalcNext+0x28>

0800b1fc <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b1fc:	4770      	bx	lr

0800b1fe <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b1fe:	4770      	bx	lr

0800b200 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b200:	4770      	bx	lr

0800b202 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b202:	4770      	bx	lr

0800b204 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b204:	2000      	movs	r0, #0
 800b206:	4770      	bx	lr

0800b208 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b208:	4770      	bx	lr

0800b20a <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b20a:	4770      	bx	lr

0800b20c <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b20c:	4770      	bx	lr

0800b20e <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b20e:	2000      	movs	r0, #0
 800b210:	4770      	bx	lr

0800b212 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b212:	2000      	movs	r0, #0
 800b214:	4770      	bx	lr

0800b216 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b216:	2000      	movs	r0, #0
 800b218:	4770      	bx	lr

0800b21a <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b21a:	2000      	movs	r0, #0
 800b21c:	4770      	bx	lr

0800b21e <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b21e:	2000      	movs	r0, #0
 800b220:	4770      	bx	lr

0800b222 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b222:	4770      	bx	lr

0800b224 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b224:	4770      	bx	lr

0800b226 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b226:	4770      	bx	lr

0800b228 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b228:	2002      	movs	r0, #2
 800b22a:	4770      	bx	lr

0800b22c <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b22c:	2002      	movs	r0, #2
 800b22e:	4770      	bx	lr

0800b230 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b230:	2002      	movs	r0, #2
 800b232:	4770      	bx	lr

0800b234 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b234:	4770      	bx	lr

0800b236 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b236:	2000      	movs	r0, #0
 800b238:	4770      	bx	lr

0800b23a <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b23a:	4770      	bx	lr

0800b23c <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b23c:	4770      	bx	lr

0800b23e <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b23e:	2000      	movs	r0, #0
 800b240:	4770      	bx	lr

0800b242 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b242:	2000      	movs	r0, #0
 800b244:	4770      	bx	lr

0800b246 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b246:	4770      	bx	lr

0800b248 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b248:	4770      	bx	lr

0800b24a <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b24a:	4770      	bx	lr

0800b24c <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b24c:	2300      	movs	r3, #0
 800b24e:	2b0f      	cmp	r3, #15
 800b250:	d804      	bhi.n	800b25c <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800b252:	5cc2      	ldrb	r2, [r0, r3]
 800b254:	b922      	cbnz	r2, 800b260 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b256:	3301      	adds	r3, #1
 800b258:	b29b      	uxth	r3, r3
 800b25a:	e7f8      	b.n	800b24e <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800b25c:	2001      	movs	r0, #1
 800b25e:	4770      	bx	lr
            return false;
 800b260:	2000      	movs	r0, #0
}
 800b262:	4770      	bx	lr

0800b264 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800b264:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800b266:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b268:	0125      	lsls	r5, r4, #4
 800b26a:	f105 0308 	add.w	r3, r5, #8
 800b26e:	4d06      	ldr	r5, [pc, #24]	; (800b288 <MallocNewMacCommandSlot+0x24>)
 800b270:	441d      	add	r5, r3
 800b272:	4628      	mov	r0, r5
 800b274:	f7ff ffea 	bl	800b24c <IsSlotFree>
 800b278:	b920      	cbnz	r0, 800b284 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800b27a:	3401      	adds	r4, #1
 800b27c:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800b27e:	2c20      	cmp	r4, #32
 800b280:	d1f2      	bne.n	800b268 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800b282:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800b284:	4628      	mov	r0, r5
 800b286:	bd38      	pop	{r3, r4, r5, pc}
 800b288:	20000bec 	.word	0x20000bec

0800b28c <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800b28c:	b120      	cbz	r0, 800b298 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800b28e:	2200      	movs	r2, #0
 800b290:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800b292:	6042      	str	r2, [r0, #4]

    return true;
 800b294:	2001      	movs	r0, #1
 800b296:	4770      	bx	lr
        return false;
 800b298:	2000      	movs	r0, #0
}
 800b29a:	4770      	bx	lr

0800b29c <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b29c:	4603      	mov	r3, r0
 800b29e:	b160      	cbz	r0, 800b2ba <LinkedListAdd+0x1e>
 800b2a0:	b169      	cbz	r1, 800b2be <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800b2a2:	6802      	ldr	r2, [r0, #0]
 800b2a4:	b13a      	cbz	r2, 800b2b6 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	b102      	cbz	r2, 800b2ac <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800b2aa:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800b2b0:	6059      	str	r1, [r3, #4]

    return true;
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	4770      	bx	lr
        list->First = element;
 800b2b6:	6001      	str	r1, [r0, #0]
 800b2b8:	e7f5      	b.n	800b2a6 <LinkedListAdd+0xa>
        return false;
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	4770      	bx	lr
 800b2be:	2000      	movs	r0, #0
}
 800b2c0:	4770      	bx	lr

0800b2c2 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b2c2:	b160      	cbz	r0, 800b2de <LinkedListGetPrevious+0x1c>
 800b2c4:	b161      	cbz	r1, 800b2e0 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800b2c6:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800b2c8:	4281      	cmp	r1, r0
 800b2ca:	d102      	bne.n	800b2d2 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800b2cc:	2000      	movs	r0, #0
    }

    return curElement;
}
 800b2ce:	4770      	bx	lr
            curElement = curElement->Next;
 800b2d0:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d0fb      	beq.n	800b2ce <LinkedListGetPrevious+0xc>
 800b2d6:	6803      	ldr	r3, [r0, #0]
 800b2d8:	428b      	cmp	r3, r1
 800b2da:	d1f9      	bne.n	800b2d0 <LinkedListGetPrevious+0xe>
 800b2dc:	4770      	bx	lr
 800b2de:	4770      	bx	lr
        return NULL;
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	4770      	bx	lr

0800b2e4 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b2e4:	b1b8      	cbz	r0, 800b316 <LinkedListRemove+0x32>
{
 800b2e6:	b538      	push	{r3, r4, r5, lr}
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800b2ec:	b1a9      	cbz	r1, 800b31a <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800b2ee:	f7ff ffe8 	bl	800b2c2 <LinkedListGetPrevious>

    if( list->First == element )
 800b2f2:	682b      	ldr	r3, [r5, #0]
 800b2f4:	42a3      	cmp	r3, r4
 800b2f6:	d009      	beq.n	800b30c <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800b2f8:	686b      	ldr	r3, [r5, #4]
 800b2fa:	42a3      	cmp	r3, r4
 800b2fc:	d009      	beq.n	800b312 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800b2fe:	b108      	cbz	r0, 800b304 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800b304:	2300      	movs	r3, #0
 800b306:	6023      	str	r3, [r4, #0]

    return true;
 800b308:	2001      	movs	r0, #1
}
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	602b      	str	r3, [r5, #0]
 800b310:	e7f2      	b.n	800b2f8 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800b312:	6068      	str	r0, [r5, #4]
 800b314:	e7f3      	b.n	800b2fe <LinkedListRemove+0x1a>
        return false;
 800b316:	2000      	movs	r0, #0
}
 800b318:	4770      	bx	lr
        return false;
 800b31a:	2000      	movs	r0, #0
 800b31c:	e7f5      	b.n	800b30a <LinkedListRemove+0x26>
	...

0800b320 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800b320:	2811      	cmp	r0, #17
 800b322:	d808      	bhi.n	800b336 <IsSticky+0x16>
 800b324:	2301      	movs	r3, #1
 800b326:	fa03 f000 	lsl.w	r0, r3, r0
 800b32a:	4b04      	ldr	r3, [pc, #16]	; (800b33c <IsSticky+0x1c>)
 800b32c:	4218      	tst	r0, r3
 800b32e:	bf14      	ite	ne
 800b330:	2001      	movne	r0, #1
 800b332:	2000      	moveq	r0, #0
 800b334:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800b336:	2000      	movs	r0, #0
    }
}
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	00020720 	.word	0x00020720

0800b340 <FreeMacCommandSlot>:
    if( slot == NULL )
 800b340:	b130      	cbz	r0, 800b350 <FreeMacCommandSlot+0x10>
{
 800b342:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b344:	2210      	movs	r2, #16
 800b346:	2100      	movs	r1, #0
 800b348:	f003 f969 	bl	800e61e <memset1>
    return true;
 800b34c:	2001      	movs	r0, #1
}
 800b34e:	bd08      	pop	{r3, pc}
        return false;
 800b350:	2000      	movs	r0, #0
}
 800b352:	4770      	bx	lr

0800b354 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800b354:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800b356:	4c06      	ldr	r4, [pc, #24]	; (800b370 <LoRaMacCommandsInit+0x1c>)
 800b358:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800b35c:	2100      	movs	r1, #0
 800b35e:	4620      	mov	r0, r4
 800b360:	f003 f95d 	bl	800e61e <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800b364:	4620      	mov	r0, r4
 800b366:	f7ff ff91 	bl	800b28c <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b36a:	2000      	movs	r0, #0
 800b36c:	bd10      	pop	{r4, pc}
 800b36e:	bf00      	nop
 800b370:	20000bec 	.word	0x20000bec

0800b374 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800b374:	b301      	cbz	r1, 800b3b8 <LoRaMacCommandsAddCmd+0x44>
{
 800b376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b378:	4605      	mov	r5, r0
 800b37a:	4614      	mov	r4, r2
 800b37c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800b37e:	f7ff ff71 	bl	800b264 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800b382:	4606      	mov	r6, r0
 800b384:	b1d0      	cbz	r0, 800b3bc <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800b386:	4601      	mov	r1, r0
 800b388:	480e      	ldr	r0, [pc, #56]	; (800b3c4 <LoRaMacCommandsAddCmd+0x50>)
 800b38a:	f7ff ff87 	bl	800b29c <LinkedListAdd>
 800b38e:	b1b8      	cbz	r0, 800b3c0 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b390:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800b392:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b394:	b2a2      	uxth	r2, r4
 800b396:	4639      	mov	r1, r7
 800b398:	1d70      	adds	r0, r6, #5
 800b39a:	f003 f928 	bl	800e5ee <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f7ff ffbe 	bl	800b320 <IsSticky>
 800b3a4:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b3a6:	4b07      	ldr	r3, [pc, #28]	; (800b3c4 <LoRaMacCommandsAddCmd+0x50>)
 800b3a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b3ac:	4414      	add	r4, r2
 800b3ae:	3401      	adds	r4, #1
 800b3b0:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800b3b4:	2000      	movs	r0, #0
}
 800b3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b3b8:	2001      	movs	r0, #1
}
 800b3ba:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b3bc:	2002      	movs	r0, #2
 800b3be:	e7fa      	b.n	800b3b6 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800b3c0:	2005      	movs	r0, #5
 800b3c2:	e7f8      	b.n	800b3b6 <LoRaMacCommandsAddCmd+0x42>
 800b3c4:	20000bec 	.word	0x20000bec

0800b3c8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800b3c8:	b1a0      	cbz	r0, 800b3f4 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	480b      	ldr	r0, [pc, #44]	; (800b400 <LoRaMacCommandsRemoveCmd+0x38>)
 800b3d2:	f7ff ff87 	bl	800b2e4 <LinkedListRemove>
 800b3d6:	b178      	cbz	r0, 800b3f8 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b3d8:	68a1      	ldr	r1, [r4, #8]
 800b3da:	4a09      	ldr	r2, [pc, #36]	; (800b400 <LoRaMacCommandsRemoveCmd+0x38>)
 800b3dc:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800b3e0:	1a5b      	subs	r3, r3, r1
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f7ff ffa9 	bl	800b340 <FreeMacCommandSlot>
 800b3ee:	b128      	cbz	r0, 800b3fc <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b3f0:	2000      	movs	r0, #0
}
 800b3f2:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b3f4:	2001      	movs	r0, #1
}
 800b3f6:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b3f8:	2003      	movs	r0, #3
 800b3fa:	e7fa      	b.n	800b3f2 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800b3fc:	2005      	movs	r0, #5
 800b3fe:	e7f8      	b.n	800b3f2 <LoRaMacCommandsRemoveCmd+0x2a>
 800b400:	20000bec 	.word	0x20000bec

0800b404 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b404:	4b0a      	ldr	r3, [pc, #40]	; (800b430 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800b406:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b408:	b120      	cbz	r0, 800b414 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800b40a:	7b03      	ldrb	r3, [r0, #12]
 800b40c:	b11b      	cbz	r3, 800b416 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800b40e:	6800      	ldr	r0, [r0, #0]
 800b410:	e7fa      	b.n	800b408 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b412:	bd10      	pop	{r4, pc}
 800b414:	4770      	bx	lr
{
 800b416:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800b418:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800b41a:	f7ff ffd5 	bl	800b3c8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800b41e:	4620      	mov	r0, r4
    while( curElement != NULL )
 800b420:	2800      	cmp	r0, #0
 800b422:	d0f6      	beq.n	800b412 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800b424:	7b03      	ldrb	r3, [r0, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0f6      	beq.n	800b418 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800b42a:	6800      	ldr	r0, [r0, #0]
 800b42c:	e7f8      	b.n	800b420 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800b42e:	bf00      	nop
 800b430:	20000bec 	.word	0x20000bec

0800b434 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b434:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b436:	4b08      	ldr	r3, [pc, #32]	; (800b458 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800b438:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b43a:	e000      	b.n	800b43e <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800b43c:	462c      	mov	r4, r5
    while( curElement != NULL )
 800b43e:	b14c      	cbz	r4, 800b454 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800b440:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800b442:	7920      	ldrb	r0, [r4, #4]
 800b444:	f7ff ff6c 	bl	800b320 <IsSticky>
 800b448:	2800      	cmp	r0, #0
 800b44a:	d0f7      	beq.n	800b43c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7ff ffbb 	bl	800b3c8 <LoRaMacCommandsRemoveCmd>
 800b452:	e7f3      	b.n	800b43c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b454:	2000      	movs	r0, #0
 800b456:	bd38      	pop	{r3, r4, r5, pc}
 800b458:	20000bec 	.word	0x20000bec

0800b45c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800b45c:	b128      	cbz	r0, 800b46a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800b45e:	4a04      	ldr	r2, [pc, #16]	; (800b470 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b460:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800b464:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800b466:	2000      	movs	r0, #0
 800b468:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b46a:	2001      	movs	r0, #1
}
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	20000bec 	.word	0x20000bec

0800b474 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800b478:	4b16      	ldr	r3, [pc, #88]	; (800b4d4 <LoRaMacCommandsSerializeCmds+0x60>)
 800b47a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b47c:	b32a      	cbz	r2, 800b4ca <LoRaMacCommandsSerializeCmds+0x56>
 800b47e:	4607      	mov	r7, r0
 800b480:	4688      	mov	r8, r1
 800b482:	4616      	mov	r6, r2
 800b484:	b319      	cbz	r1, 800b4ce <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800b486:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b488:	b194      	cbz	r4, 800b4b0 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b48a:	1a7a      	subs	r2, r7, r1
 800b48c:	68a3      	ldr	r3, [r4, #8]
 800b48e:	3301      	adds	r3, #1
 800b490:	429a      	cmp	r2, r3
 800b492:	d30d      	bcc.n	800b4b0 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800b494:	1c4d      	adds	r5, r1, #1
 800b496:	b2ed      	uxtb	r5, r5
 800b498:	7923      	ldrb	r3, [r4, #4]
 800b49a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b49c:	8922      	ldrh	r2, [r4, #8]
 800b49e:	1d61      	adds	r1, r4, #5
 800b4a0:	1970      	adds	r0, r6, r5
 800b4a2:	f003 f8a4 	bl	800e5ee <memcpy1>
            itr += curElement->PayloadSize;
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	441d      	add	r5, r3
 800b4aa:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800b4ac:	6824      	ldr	r4, [r4, #0]
 800b4ae:	e7eb      	b.n	800b488 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800b4b0:	b12c      	cbz	r4, 800b4be <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800b4b2:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f7ff ff87 	bl	800b3c8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800b4ba:	462c      	mov	r4, r5
 800b4bc:	e7f8      	b.n	800b4b0 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b4be:	4640      	mov	r0, r8
 800b4c0:	f7ff ffcc 	bl	800b45c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b4c4:	2000      	movs	r0, #0
}
 800b4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	e7fb      	b.n	800b4c6 <LoRaMacCommandsSerializeCmds+0x52>
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	e7f9      	b.n	800b4c6 <LoRaMacCommandsSerializeCmds+0x52>
 800b4d2:	bf00      	nop
 800b4d4:	20000bec 	.word	0x20000bec

0800b4d8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800b4d8:	4601      	mov	r1, r0
 800b4da:	b170      	cbz	r0, 800b4fa <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800b4dc:	4b08      	ldr	r3, [pc, #32]	; (800b500 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800b4de:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b4e4:	b13b      	cbz	r3, 800b4f6 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800b4e6:	7b1a      	ldrb	r2, [r3, #12]
 800b4e8:	b90a      	cbnz	r2, 800b4ee <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	e7fa      	b.n	800b4e4 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b4fa:	2001      	movs	r0, #1
}
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	20000bec 	.word	0x20000bec

0800b504 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b504:	1e83      	subs	r3, r0, #2
 800b506:	2b11      	cmp	r3, #17
 800b508:	d80a      	bhi.n	800b520 <LoRaMacCommandsGetCmdSize+0x1c>
 800b50a:	e8df f003 	tbb	[pc, r3]
 800b50e:	0b23      	.short	0x0b23
 800b510:	110f240d 	.word	0x110f240d
 800b514:	09171513 	.word	0x09171513
 800b518:	09091909 	.word	0x09091909
 800b51c:	211f1d1b 	.word	0x211f1d1b
 800b520:	2000      	movs	r0, #0
 800b522:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800b524:	2005      	movs	r0, #5
            break;
 800b526:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800b528:	2002      	movs	r0, #2
            break;
 800b52a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800b52c:	2001      	movs	r0, #1
            break;
 800b52e:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800b530:	2006      	movs	r0, #6
            break;
 800b532:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800b534:	2002      	movs	r0, #2
            break;
 800b536:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800b538:	2002      	movs	r0, #2
            break;
 800b53a:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800b53c:	2005      	movs	r0, #5
            break;
 800b53e:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800b540:	2006      	movs	r0, #6
            break;
 800b542:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800b544:	2001      	movs	r0, #1
            break;
 800b546:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800b548:	2005      	movs	r0, #5
            break;
 800b54a:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800b54c:	2004      	movs	r0, #4
            break;
 800b54e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b550:	2004      	movs	r0, #4
            break;
 800b552:	4770      	bx	lr
            cidSize = 3;
 800b554:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b556:	4770      	bx	lr

0800b558 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b558:	4b03      	ldr	r3, [pc, #12]	; (800b568 <IncreaseBufferPointer+0x10>)
 800b55a:	4298      	cmp	r0, r3
 800b55c:	d001      	beq.n	800b562 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800b55e:	3004      	adds	r0, #4
 800b560:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b562:	4802      	ldr	r0, [pc, #8]	; (800b56c <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	20000e14 	.word	0x20000e14
 800b56c:	20000e04 	.word	0x20000e04

0800b570 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800b570:	b108      	cbz	r0, 800b576 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800b572:	2000      	movs	r0, #0
 800b574:	4770      	bx	lr
        return true;
 800b576:	2001      	movs	r0, #1
}
 800b578:	4770      	bx	lr

0800b57a <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b57a:	2804      	cmp	r0, #4
 800b57c:	d801      	bhi.n	800b582 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800b57e:	2000      	movs	r0, #0
 800b580:	4770      	bx	lr
        return true;
 800b582:	2001      	movs	r0, #1
}
 800b584:	4770      	bx	lr
	...

0800b588 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58a:	4606      	mov	r6, r0
 800b58c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b58e:	4b0d      	ldr	r3, [pc, #52]	; (800b5c4 <GetElement+0x3c>)
 800b590:	f893 7020 	ldrb.w	r7, [r3, #32]
 800b594:	4638      	mov	r0, r7
 800b596:	f7ff ffeb 	bl	800b570 <IsListEmpty>
 800b59a:	b970      	cbnz	r0, 800b5ba <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b59c:	2500      	movs	r5, #0
 800b59e:	42af      	cmp	r7, r5
 800b5a0:	d909      	bls.n	800b5b6 <GetElement+0x2e>
    {
        if( element->Request == request )
 800b5a2:	7823      	ldrb	r3, [r4, #0]
 800b5a4:	42b3      	cmp	r3, r6
 800b5a6:	d00a      	beq.n	800b5be <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f7ff ffd5 	bl	800b558 <IncreaseBufferPointer>
 800b5ae:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b5b0:	3501      	adds	r5, #1
 800b5b2:	b2ed      	uxtb	r5, r5
 800b5b4:	e7f3      	b.n	800b59e <GetElement+0x16>
    }

    return NULL;
 800b5b6:	2000      	movs	r0, #0
}
 800b5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	e7fc      	b.n	800b5b8 <GetElement+0x30>
            return element;
 800b5be:	4620      	mov	r0, r4
 800b5c0:	e7fa      	b.n	800b5b8 <GetElement+0x30>
 800b5c2:	bf00      	nop
 800b5c4:	20000df8 	.word	0x20000df8

0800b5c8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b5c8:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b5ca:	4c08      	ldr	r4, [pc, #32]	; (800b5ec <LoRaMacConfirmQueueInit+0x24>)
 800b5cc:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b5d4:	f104 000c 	add.w	r0, r4, #12
 800b5d8:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b5da:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800b5dc:	2214      	movs	r2, #20
 800b5de:	21ff      	movs	r1, #255	; 0xff
 800b5e0:	f003 f81d 	bl	800e61e <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b5ea:	bd10      	pop	{r4, pc}
 800b5ec:	20000df8 	.word	0x20000df8

0800b5f0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b5f4:	4b0f      	ldr	r3, [pc, #60]	; (800b634 <LoRaMacConfirmQueueAdd+0x44>)
 800b5f6:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b5fa:	f7ff ffbe 	bl	800b57a <IsListFull>
 800b5fe:	b9b8      	cbnz	r0, 800b630 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b600:	4c0c      	ldr	r4, [pc, #48]	; (800b634 <LoRaMacConfirmQueueAdd+0x44>)
 800b602:	68a3      	ldr	r3, [r4, #8]
 800b604:	782a      	ldrb	r2, [r5, #0]
 800b606:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b608:	68a3      	ldr	r3, [r4, #8]
 800b60a:	786a      	ldrb	r2, [r5, #1]
 800b60c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b60e:	68a3      	ldr	r3, [r4, #8]
 800b610:	78ea      	ldrb	r2, [r5, #3]
 800b612:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800b614:	68a3      	ldr	r3, [r4, #8]
 800b616:	78aa      	ldrb	r2, [r5, #2]
 800b618:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800b61a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b61e:	3301      	adds	r3, #1
 800b620:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b624:	68a0      	ldr	r0, [r4, #8]
 800b626:	f7ff ff97 	bl	800b558 <IncreaseBufferPointer>
 800b62a:	60a0      	str	r0, [r4, #8]

    return true;
 800b62c:	2001      	movs	r0, #1
}
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b630:	2000      	movs	r0, #0
 800b632:	e7fc      	b.n	800b62e <LoRaMacConfirmQueueAdd+0x3e>
 800b634:	20000df8 	.word	0x20000df8

0800b638 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b638:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b63a:	4b09      	ldr	r3, [pc, #36]	; (800b660 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b63c:	f893 4020 	ldrb.w	r4, [r3, #32]
 800b640:	4620      	mov	r0, r4
 800b642:	f7ff ff95 	bl	800b570 <IsListEmpty>
 800b646:	b948      	cbnz	r0, 800b65c <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800b648:	4d05      	ldr	r5, [pc, #20]	; (800b660 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b64a:	3c01      	subs	r4, #1
 800b64c:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b650:	6868      	ldr	r0, [r5, #4]
 800b652:	f7ff ff81 	bl	800b558 <IncreaseBufferPointer>
 800b656:	6068      	str	r0, [r5, #4]

    return true;
 800b658:	2001      	movs	r0, #1
}
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b65c:	2000      	movs	r0, #0
 800b65e:	e7fc      	b.n	800b65a <LoRaMacConfirmQueueRemoveFirst+0x22>
 800b660:	20000df8 	.word	0x20000df8

0800b664 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4605      	mov	r5, r0
 800b668:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b66a:	4b08      	ldr	r3, [pc, #32]	; (800b68c <LoRaMacConfirmQueueSetStatus+0x28>)
 800b66c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b670:	f7ff ff7e 	bl	800b570 <IsListEmpty>
 800b674:	b948      	cbnz	r0, 800b68a <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b676:	4b05      	ldr	r3, [pc, #20]	; (800b68c <LoRaMacConfirmQueueSetStatus+0x28>)
 800b678:	689a      	ldr	r2, [r3, #8]
 800b67a:	6859      	ldr	r1, [r3, #4]
 800b67c:	4620      	mov	r0, r4
 800b67e:	f7ff ff83 	bl	800b588 <GetElement>
        if( element != NULL )
 800b682:	b110      	cbz	r0, 800b68a <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800b684:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800b686:	2201      	movs	r2, #1
 800b688:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	20000df8 	.word	0x20000df8

0800b690 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b690:	b510      	push	{r4, lr}
 800b692:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b694:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b696:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b69a:	f7ff ff69 	bl	800b570 <IsListEmpty>
 800b69e:	b940      	cbnz	r0, 800b6b2 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b6a0:	4b06      	ldr	r3, [pc, #24]	; (800b6bc <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b6a2:	689a      	ldr	r2, [r3, #8]
 800b6a4:	6859      	ldr	r1, [r3, #4]
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f7ff ff6e 	bl	800b588 <GetElement>
        if( element != NULL )
 800b6ac:	b118      	cbz	r0, 800b6b6 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800b6ae:	7840      	ldrb	r0, [r0, #1]
 800b6b0:	e000      	b.n	800b6b4 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b6b2:	2001      	movs	r0, #1
}
 800b6b4:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	e7fc      	b.n	800b6b4 <LoRaMacConfirmQueueGetStatus+0x24>
 800b6ba:	bf00      	nop
 800b6bc:	20000df8 	.word	0x20000df8

0800b6c0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b6c4:	4b0c      	ldr	r3, [pc, #48]	; (800b6f8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b6c6:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800b6c8:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b6cc:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b6d0:	f7ff ff4e 	bl	800b570 <IsListEmpty>
 800b6d4:	b150      	cbz	r0, 800b6ec <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f7ff ff3b 	bl	800b558 <IncreaseBufferPointer>
 800b6e2:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b6e4:	4b04      	ldr	r3, [pc, #16]	; (800b6f8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	4283      	cmp	r3, r0
 800b6ea:	d0f4      	beq.n	800b6d6 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800b6ec:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b6ee:	78e3      	ldrb	r3, [r4, #3]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1f3      	bne.n	800b6dc <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800b6f4:	e7f0      	b.n	800b6d8 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800b6f6:	bf00      	nop
 800b6f8:	20000df8 	.word	0x20000df8

0800b6fc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800b6fc:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b6fe:	4b04      	ldr	r3, [pc, #16]	; (800b710 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800b700:	689a      	ldr	r2, [r3, #8]
 800b702:	6859      	ldr	r1, [r3, #4]
 800b704:	f7ff ff40 	bl	800b588 <GetElement>
 800b708:	b100      	cbz	r0, 800b70c <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800b70a:	2001      	movs	r0, #1
    }
    return false;
}
 800b70c:	bd08      	pop	{r3, pc}
 800b70e:	bf00      	nop
 800b710:	20000df8 	.word	0x20000df8

0800b714 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b716:	b083      	sub	sp, #12
 800b718:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800b71a:	4b16      	ldr	r3, [pc, #88]	; (800b774 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b71c:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800b720:	2400      	movs	r4, #0
 800b722:	e00d      	b.n	800b740 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b724:	781a      	ldrb	r2, [r3, #0]
 800b726:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b72a:	785a      	ldrb	r2, [r3, #1]
 800b72c:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b730:	78db      	ldrb	r3, [r3, #3]
 800b732:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800b736:	f7ff ff7f 	bl	800b638 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800b73a:	b1a5      	cbz	r5, 800b766 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b73c:	3401      	adds	r4, #1
 800b73e:	b2e4      	uxtb	r4, r4
 800b740:	42bc      	cmp	r4, r7
 800b742:	d214      	bcs.n	800b76e <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b744:	4b0b      	ldr	r3, [pc, #44]	; (800b774 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	7812      	ldrb	r2, [r2, #0]
 800b74a:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	7852      	ldrb	r2, [r2, #1]
 800b750:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800b756:	2d00      	cmp	r5, #0
 800b758:	d0e4      	beq.n	800b724 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b75a:	4b06      	ldr	r3, [pc, #24]	; (800b774 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	4630      	mov	r0, r6
 800b762:	4798      	blx	r3
 800b764:	e7e7      	b.n	800b736 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b766:	a801      	add	r0, sp, #4
 800b768:	f7ff ff42 	bl	800b5f0 <LoRaMacConfirmQueueAdd>
 800b76c:	e7e6      	b.n	800b73c <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800b76e:	b003      	add	sp, #12
 800b770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b772:	bf00      	nop
 800b774:	20000df8 	.word	0x20000df8

0800b778 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800b778:	4b01      	ldr	r3, [pc, #4]	; (800b780 <LoRaMacConfirmQueueGetCnt+0x8>)
 800b77a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b77e:	4770      	bx	lr
 800b780:	20000df8 	.word	0x20000df8

0800b784 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800b784:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b786:	4b03      	ldr	r3, [pc, #12]	; (800b794 <LoRaMacConfirmQueueIsFull+0x10>)
 800b788:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b78c:	f7ff fef5 	bl	800b57a <IsListFull>
    }
    else
    {
        return false;
    }
}
 800b790:	bd08      	pop	{r3, pc}
 800b792:	bf00      	nop
 800b794:	20000df8 	.word	0x20000df8

0800b798 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800b798:	b410      	push	{r4}
 800b79a:	9c01      	ldr	r4, [sp, #4]
 800b79c:	9902      	ldr	r1, [sp, #8]
 800b79e:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800b7a0:	b1da      	cbz	r2, 800b7da <PrepareB0+0x42>
 800b7a2:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800b7a4:	2049      	movs	r0, #73	; 0x49
 800b7a6:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800b7ac:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800b7ae:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800b7b0:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800b7b2:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800b7b4:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b7b6:	0a23      	lsrs	r3, r4, #8
 800b7b8:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b7ba:	0c23      	lsrs	r3, r4, #16
 800b7bc:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b7be:	0e24      	lsrs	r4, r4, #24
 800b7c0:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800b7c2:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b7c4:	0a0b      	lsrs	r3, r1, #8
 800b7c6:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b7c8:	0c0b      	lsrs	r3, r1, #16
 800b7ca:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b7cc:	0e09      	lsrs	r1, r1, #24
 800b7ce:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800b7d0:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800b7d2:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b7d6:	bc10      	pop	{r4}
 800b7d8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b7da:	2009      	movs	r0, #9
 800b7dc:	e7fb      	b.n	800b7d6 <PrepareB0+0x3e>
	...

0800b7e0 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d80e      	bhi.n	800b804 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800b7e6:	469c      	mov	ip, r3
 800b7e8:	4a07      	ldr	r2, [pc, #28]	; (800b808 <GetKeyAddrItem+0x28>)
 800b7ea:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800b7ee:	4282      	cmp	r2, r0
 800b7f0:	d002      	beq.n	800b7f8 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	e7f4      	b.n	800b7e2 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800b7f8:	4b03      	ldr	r3, [pc, #12]	; (800b808 <GetKeyAddrItem+0x28>)
 800b7fa:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800b7fe:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800b800:	2000      	movs	r0, #0
 800b802:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b804:	200b      	movs	r0, #11
}
 800b806:	4770      	bx	lr
 800b808:	20000100 	.word	0x20000100

0800b80c <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800b80c:	460b      	mov	r3, r1
 800b80e:	2900      	cmp	r1, #0
 800b810:	d024      	beq.n	800b85c <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800b812:	3801      	subs	r0, #1
 800b814:	2803      	cmp	r0, #3
 800b816:	d823      	bhi.n	800b860 <GetLastFcntDown+0x54>
 800b818:	e8df f000 	tbb	[pc, r0]
 800b81c:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800b820:	4a10      	ldr	r2, [pc, #64]	; (800b864 <GetLastFcntDown+0x58>)
 800b822:	6812      	ldr	r2, [r2, #0]
 800b824:	6911      	ldr	r1, [r2, #16]
 800b826:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800b828:	6913      	ldr	r3, [r2, #16]
 800b82a:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800b82c:	2000      	movs	r0, #0
            break;
 800b82e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800b830:	4a0c      	ldr	r2, [pc, #48]	; (800b864 <GetLastFcntDown+0x58>)
 800b832:	6812      	ldr	r2, [r2, #0]
 800b834:	6951      	ldr	r1, [r2, #20]
 800b836:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800b838:	6953      	ldr	r3, [r2, #20]
 800b83a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b83c:	2000      	movs	r0, #0
            break;
 800b83e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800b840:	4a08      	ldr	r2, [pc, #32]	; (800b864 <GetLastFcntDown+0x58>)
 800b842:	6812      	ldr	r2, [r2, #0]
 800b844:	6991      	ldr	r1, [r2, #24]
 800b846:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b848:	6993      	ldr	r3, [r2, #24]
 800b84a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b84c:	2000      	movs	r0, #0
            break;
 800b84e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800b850:	4a04      	ldr	r2, [pc, #16]	; (800b864 <GetLastFcntDown+0x58>)
 800b852:	6812      	ldr	r2, [r2, #0]
 800b854:	69d2      	ldr	r2, [r2, #28]
 800b856:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b858:	2000      	movs	r0, #0
            break;
 800b85a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b85c:	2009      	movs	r0, #9
 800b85e:	4770      	bx	lr
    switch( fCntID )
 800b860:	2005      	movs	r0, #5
}
 800b862:	4770      	bx	lr
 800b864:	20000e1c 	.word	0x20000e1c

0800b868 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800b868:	b510      	push	{r4, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b872:	a901      	add	r1, sp, #4
 800b874:	f7ff ffca 	bl	800b80c <GetLastFcntDown>
 800b878:	b948      	cbnz	r0, 800b88e <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	d309      	bcc.n	800b894 <CheckFCntDown+0x2c>
 800b880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b884:	d001      	beq.n	800b88a <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800b886:	2000      	movs	r0, #0
 800b888:	e002      	b.n	800b890 <CheckFCntDown+0x28>
        return true;
 800b88a:	2001      	movs	r0, #1
 800b88c:	e000      	b.n	800b890 <CheckFCntDown+0x28>
        return false;
 800b88e:	2000      	movs	r0, #0
    }
}
 800b890:	b002      	add	sp, #8
 800b892:	bd10      	pop	{r4, pc}
        return true;
 800b894:	2001      	movs	r0, #1
 800b896:	e7fb      	b.n	800b890 <CheckFCntDown+0x28>

0800b898 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800b898:	3801      	subs	r0, #1
 800b89a:	2803      	cmp	r0, #3
 800b89c:	d812      	bhi.n	800b8c4 <UpdateFCntDown+0x2c>
 800b89e:	e8df f000 	tbb	[pc, r0]
 800b8a2:	0602      	.short	0x0602
 800b8a4:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800b8a6:	4b08      	ldr	r3, [pc, #32]	; (800b8c8 <UpdateFCntDown+0x30>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6119      	str	r1, [r3, #16]
            break;
 800b8ac:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800b8ae:	4b06      	ldr	r3, [pc, #24]	; (800b8c8 <UpdateFCntDown+0x30>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6159      	str	r1, [r3, #20]
            break;
 800b8b4:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800b8b6:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <UpdateFCntDown+0x30>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6199      	str	r1, [r3, #24]
            break;
 800b8bc:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800b8be:	4b02      	ldr	r3, [pc, #8]	; (800b8c8 <UpdateFCntDown+0x30>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	20000e1c 	.word	0x20000e1c

0800b8cc <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800b8cc:	4b0a      	ldr	r3, [pc, #40]	; (800b8f8 <ResetFCnts+0x2c>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b8d4:	f04f 31ff 	mov.w	r1, #4294967295
 800b8d8:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b8da:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800b8dc:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b8de:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dd00      	ble.n	800b8e6 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800b8e4:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800b8e6:	1d99      	adds	r1, r3, #6
 800b8e8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f0:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	e7f4      	b.n	800b8e0 <ResetFCnts+0x14>
 800b8f6:	bf00      	nop
 800b8f8:	20000e1c 	.word	0x20000e1c

0800b8fc <ComputeCmacB0>:
{
 800b8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b900:	b088      	sub	sp, #32
 800b902:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800b904:	b1f0      	cbz	r0, 800b944 <ComputeCmacB0+0x48>
 800b906:	460c      	mov	r4, r1
 800b908:	4615      	mov	r5, r2
 800b90a:	461a      	mov	r2, r3
 800b90c:	4680      	mov	r8, r0
 800b90e:	b1de      	cbz	r6, 800b948 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b910:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b914:	d81a      	bhi.n	800b94c <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b916:	af04      	add	r7, sp, #16
 800b918:	9702      	str	r7, [sp, #8]
 800b91a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800b926:	4629      	mov	r1, r5
 800b928:	4620      	mov	r0, r4
 800b92a:	f7ff ff35 	bl	800b798 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800b92e:	9600      	str	r6, [sp, #0]
 800b930:	462b      	mov	r3, r5
 800b932:	4622      	mov	r2, r4
 800b934:	4641      	mov	r1, r8
 800b936:	4638      	mov	r0, r7
 800b938:	f002 fd01 	bl	800e33e <SecureElementComputeAesCmac>
 800b93c:	b940      	cbnz	r0, 800b950 <ComputeCmacB0+0x54>
}
 800b93e:	b008      	add	sp, #32
 800b940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b944:	2009      	movs	r0, #9
 800b946:	e7fa      	b.n	800b93e <ComputeCmacB0+0x42>
 800b948:	2009      	movs	r0, #9
 800b94a:	e7f8      	b.n	800b93e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b94c:	200d      	movs	r0, #13
 800b94e:	e7f6      	b.n	800b93e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b950:	200e      	movs	r0, #14
 800b952:	e7f4      	b.n	800b93e <ComputeCmacB0+0x42>

0800b954 <DeriveSessionKey10x>:
{
 800b954:	b510      	push	{r4, lr}
 800b956:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800b958:	2400      	movs	r4, #0
 800b95a:	9400      	str	r4, [sp, #0]
 800b95c:	9401      	str	r4, [sp, #4]
 800b95e:	9402      	str	r4, [sp, #8]
 800b960:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800b962:	2802      	cmp	r0, #2
 800b964:	d003      	beq.n	800b96e <DeriveSessionKey10x+0x1a>
 800b966:	2803      	cmp	r0, #3
 800b968:	d025      	beq.n	800b9b6 <DeriveSessionKey10x+0x62>
 800b96a:	200a      	movs	r0, #10
 800b96c:	e021      	b.n	800b9b2 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800b96e:	2401      	movs	r4, #1
 800b970:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800b974:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800b978:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b97c:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800b980:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800b984:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800b988:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800b98c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b990:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800b994:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800b998:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800b99c:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800b9a0:	0a1b      	lsrs	r3, r3, #8
 800b9a2:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	4668      	mov	r0, sp
 800b9ac:	f002 fd66 	bl	800e47c <SecureElementDeriveAndStoreKey>
 800b9b0:	b928      	cbnz	r0, 800b9be <DeriveSessionKey10x+0x6a>
}
 800b9b2:	b004      	add	sp, #16
 800b9b4:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800b9b6:	2402      	movs	r4, #2
 800b9b8:	f88d 4000 	strb.w	r4, [sp]
            break;
 800b9bc:	e7da      	b.n	800b974 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b9be:	200e      	movs	r0, #14
 800b9c0:	e7f7      	b.n	800b9b2 <DeriveSessionKey10x+0x5e>

0800b9c2 <PayloadEncrypt>:
{
 800b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	4690      	mov	r8, r2
 800b9ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d052      	beq.n	800ba76 <PayloadEncrypt+0xb4>
 800b9d0:	460d      	mov	r5, r1
 800b9d2:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800b9d4:	2600      	movs	r6, #0
 800b9d6:	9604      	str	r6, [sp, #16]
 800b9d8:	9605      	str	r6, [sp, #20]
 800b9da:	9606      	str	r6, [sp, #24]
 800b9dc:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800b9de:	9600      	str	r6, [sp, #0]
 800b9e0:	9601      	str	r6, [sp, #4]
 800b9e2:	9602      	str	r6, [sp, #8]
 800b9e4:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800b9e6:	2701      	movs	r7, #1
 800b9e8:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800b9ec:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800b9f0:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800b9f4:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800b9f8:	0a19      	lsrs	r1, r3, #8
 800b9fa:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800b9fe:	0c19      	lsrs	r1, r3, #16
 800ba00:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800ba04:	0e1b      	lsrs	r3, r3, #24
 800ba06:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800ba0a:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800ba0e:	0a13      	lsrs	r3, r2, #8
 800ba10:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800ba14:	0c13      	lsrs	r3, r2, #16
 800ba16:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800ba1a:	0e12      	lsrs	r2, r2, #24
 800ba1c:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800ba20:	e014      	b.n	800ba4c <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800ba22:	18f2      	adds	r2, r6, r3
 800ba24:	5ca0      	ldrb	r0, [r4, r2]
 800ba26:	f103 0120 	add.w	r1, r3, #32
 800ba2a:	4469      	add	r1, sp
 800ba2c:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800ba30:	4048      	eors	r0, r1
 800ba32:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800ba34:	3301      	adds	r3, #1
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	462a      	mov	r2, r5
 800ba3a:	2d10      	cmp	r5, #16
 800ba3c:	bfa8      	it	ge
 800ba3e:	2210      	movge	r2, #16
 800ba40:	4293      	cmp	r3, r2
 800ba42:	dbee      	blt.n	800ba22 <PayloadEncrypt+0x60>
        size -= 16;
 800ba44:	3d10      	subs	r5, #16
 800ba46:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800ba48:	3610      	adds	r6, #16
 800ba4a:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800ba4c:	2d00      	cmp	r5, #0
 800ba4e:	dd0e      	ble.n	800ba6e <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800ba50:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800ba54:	3701      	adds	r7, #1
 800ba56:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800ba58:	ab04      	add	r3, sp, #16
 800ba5a:	4642      	mov	r2, r8
 800ba5c:	2110      	movs	r1, #16
 800ba5e:	4668      	mov	r0, sp
 800ba60:	f002 fc92 	bl	800e388 <SecureElementAesEncrypt>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d0e6      	beq.n	800ba38 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba6a:	200e      	movs	r0, #14
 800ba6c:	e000      	b.n	800ba70 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800ba6e:	2000      	movs	r0, #0
}
 800ba70:	b008      	add	sp, #32
 800ba72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba76:	2009      	movs	r0, #9
 800ba78:	e7fa      	b.n	800ba70 <PayloadEncrypt+0xae>

0800ba7a <VerifyCmacB0>:
    if( msg == 0 )
 800ba7a:	b370      	cbz	r0, 800bada <VerifyCmacB0+0x60>
{
 800ba7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba80:	b0c8      	sub	sp, #288	; 0x120
 800ba82:	460c      	mov	r4, r1
 800ba84:	4615      	mov	r5, r2
 800ba86:	461e      	mov	r6, r3
 800ba88:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ba8a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ba8e:	d826      	bhi.n	800bade <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ba90:	af04      	add	r7, sp, #16
 800ba92:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ba96:	2100      	movs	r1, #0
 800ba98:	4638      	mov	r0, r7
 800ba9a:	f002 fdc0 	bl	800e61e <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ba9e:	9702      	str	r7, [sp, #8]
 800baa0:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800baa2:	9301      	str	r3, [sp, #4]
 800baa4:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800baac:	4632      	mov	r2, r6
 800baae:	4629      	mov	r1, r5
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7ff fe71 	bl	800b798 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bab6:	4622      	mov	r2, r4
 800bab8:	4641      	mov	r1, r8
 800baba:	a808      	add	r0, sp, #32
 800babc:	f002 fd97 	bl	800e5ee <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800bac0:	f104 0110 	add.w	r1, r4, #16
 800bac4:	462b      	mov	r3, r5
 800bac6:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800bac8:	b289      	uxth	r1, r1
 800baca:	4638      	mov	r0, r7
 800bacc:	f002 fc46 	bl	800e35c <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800bad0:	b130      	cbz	r0, 800bae0 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800bad2:	2801      	cmp	r0, #1
 800bad4:	d004      	beq.n	800bae0 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bad6:	200e      	movs	r0, #14
 800bad8:	e002      	b.n	800bae0 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bada:	2009      	movs	r0, #9
}
 800badc:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bade:	200d      	movs	r0, #13
}
 800bae0:	b048      	add	sp, #288	; 0x120
 800bae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bae8 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800bae8:	b188      	cbz	r0, 800bb0e <LoRaMacCryptoInit+0x26>
{
 800baea:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800baec:	4c09      	ldr	r4, [pc, #36]	; (800bb14 <LoRaMacCryptoInit+0x2c>)
 800baee:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800baf0:	2228      	movs	r2, #40	; 0x28
 800baf2:	2100      	movs	r1, #0
 800baf4:	f002 fd93 	bl	800e61e <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	2201      	movs	r2, #1
 800bafc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800bafe:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800bb00:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800bb02:	2400      	movs	r4, #0
 800bb04:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800bb06:	f7ff fee1 	bl	800b8cc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800bb0a:	4620      	mov	r0, r4
}
 800bb0c:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800bb0e:	2008      	movs	r0, #8
}
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20000e1c 	.word	0x20000e1c

0800bb18 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800bb18:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800bb1e:	2000      	movs	r0, #0
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	20000e1c 	.word	0x20000e1c

0800bb28 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800bb28:	b130      	cbz	r0, 800bb38 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800bb2a:	4b04      	ldr	r3, [pc, #16]	; (800bb3c <LoRaMacCryptoGetFCntUp+0x14>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	3301      	adds	r3, #1
 800bb32:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800bb34:	2000      	movs	r0, #0
 800bb36:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb38:	2009      	movs	r0, #9
}
 800bb3a:	4770      	bx	lr
 800bb3c:	20000e1c 	.word	0x20000e1c

0800bb40 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800bb40:	b530      	push	{r4, r5, lr}
 800bb42:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800bb44:	2300      	movs	r3, #0
 800bb46:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800bb48:	b1f2      	cbz	r2, 800bb88 <LoRaMacCryptoGetFCntDown+0x48>
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800bb4e:	a901      	add	r1, sp, #4
 800bb50:	f7ff fe5c 	bl	800b80c <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bb54:	b948      	cbnz	r0, 800bb6a <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800bb56:	9b01      	ldr	r3, [sp, #4]
 800bb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5c:	d007      	beq.n	800bb6e <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800bb62:	2a00      	cmp	r2, #0
 800bb64:	dd05      	ble.n	800bb72 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800bb66:	4413      	add	r3, r2
 800bb68:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bb6a:	b003      	add	sp, #12
 800bb6c:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800bb6e:	602c      	str	r4, [r5, #0]
 800bb70:	e7fb      	b.n	800bb6a <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800bb72:	b132      	cbz	r2, 800bb82 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800bb74:	0c1b      	lsrs	r3, r3, #16
 800bb76:	041b      	lsls	r3, r3, #16
 800bb78:	4423      	add	r3, r4
 800bb7a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	e7f3      	b.n	800bb6a <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800bb82:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800bb84:	2007      	movs	r0, #7
 800bb86:	e7f0      	b.n	800bb6a <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb88:	2009      	movs	r0, #9
 800bb8a:	e7ee      	b.n	800bb6a <LoRaMacCryptoGetFCntDown+0x2a>

0800bb8c <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	b908      	cbnz	r0, 800bb94 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb90:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bb92:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bb94:	2300      	movs	r3, #0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	dd01      	ble.n	800bb9e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800bb9e:	4a06      	ldr	r2, [pc, #24]	; (800bbb8 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800bba0:	6812      	ldr	r2, [r2, #0]
 800bba2:	202c      	movs	r0, #44	; 0x2c
 800bba4:	fb00 1003 	mla	r0, r0, r3, r1
 800bba8:	f103 0c06 	add.w	ip, r3, #6
 800bbac:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800bbb0:	3204      	adds	r2, #4
 800bbb2:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	e7ee      	b.n	800bb96 <LoRaMacCryptoSetMulticastReference+0xa>
 800bbb8:	20000e1c 	.word	0x20000e1c

0800bbbc <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800bbbc:	b1d8      	cbz	r0, 800bbf6 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800bbbe:	b510      	push	{r4, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800bbc4:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	8893      	ldrh	r3, [r2, #4]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800bbd0:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bbd2:	f000 fa2e 	bl	800c032 <LoRaMacSerializerJoinRequest>
 800bbd6:	b980      	cbnz	r0, 800bbfa <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bbd8:	4623      	mov	r3, r4
 800bbda:	f853 1b18 	ldr.w	r1, [r3], #24
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	2213      	movs	r2, #19
 800bbe4:	f002 fbab 	bl	800e33e <SecureElementComputeAesCmac>
 800bbe8:	b950      	cbnz	r0, 800bc00 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fa21 	bl	800c032 <LoRaMacSerializerJoinRequest>
 800bbf0:	b120      	cbz	r0, 800bbfc <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bbf2:	2010      	movs	r0, #16
 800bbf4:	e002      	b.n	800bbfc <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bbf6:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bbf8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bbfa:	2010      	movs	r0, #16
}
 800bbfc:	b002      	add	sp, #8
 800bbfe:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bc00:	200e      	movs	r0, #14
 800bc02:	e7fb      	b.n	800bbfc <LoRaMacCryptoPrepareJoinRequest+0x40>
 800bc04:	20000e1c 	.word	0x20000e1c

0800bc08 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d036      	beq.n	800bc7a <LoRaMacCryptoSecureMessage+0x72>
{
 800bc0c:	b530      	push	{r4, r5, lr}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	4604      	mov	r4, r0
 800bc12:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800bc14:	4b1d      	ldr	r3, [pc, #116]	; (800bc8c <LoRaMacCryptoSecureMessage+0x84>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	4283      	cmp	r3, r0
 800bc1c:	d82f      	bhi.n	800bc7e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800bc1e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800bc22:	b342      	cbz	r2, 800bc76 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800bc24:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800bc26:	42a3      	cmp	r3, r4
 800bc28:	d209      	bcs.n	800bc3e <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800bc2a:	9401      	str	r4, [sp, #4]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	68ab      	ldr	r3, [r5, #8]
 800bc32:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800bc36:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bc38:	f7ff fec3 	bl	800b9c2 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bc3c:	bb10      	cbnz	r0, 800bc84 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f000 fa2d 	bl	800c09e <LoRaMacSerializerData>
 800bc44:	b9e8      	cbnz	r0, 800bc82 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bc46:	7929      	ldrb	r1, [r5, #4]
 800bc48:	3904      	subs	r1, #4
 800bc4a:	462b      	mov	r3, r5
 800bc4c:	f853 0b2c 	ldr.w	r0, [r3], #44
 800bc50:	9303      	str	r3, [sp, #12]
 800bc52:	9402      	str	r4, [sp, #8]
 800bc54:	68ab      	ldr	r3, [r5, #8]
 800bc56:	9301      	str	r3, [sp, #4]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	2202      	movs	r2, #2
 800bc5e:	b289      	uxth	r1, r1
 800bc60:	f7ff fe4c 	bl	800b8fc <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bc64:	b970      	cbnz	r0, 800bc84 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bc66:	4628      	mov	r0, r5
 800bc68:	f000 fa19 	bl	800c09e <LoRaMacSerializerData>
 800bc6c:	b960      	cbnz	r0, 800bc88 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800bc6e:	4b07      	ldr	r3, [pc, #28]	; (800bc8c <LoRaMacCryptoSecureMessage+0x84>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800bc74:	e006      	b.n	800bc84 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800bc76:	2202      	movs	r2, #2
 800bc78:	e7d5      	b.n	800bc26 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc7a:	2009      	movs	r0, #9
}
 800bc7c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bc7e:	2006      	movs	r0, #6
 800bc80:	e000      	b.n	800bc84 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bc82:	2010      	movs	r0, #16
}
 800bc84:	b005      	add	sp, #20
 800bc86:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bc88:	2010      	movs	r0, #16
 800bc8a:	e7fb      	b.n	800bc84 <LoRaMacCryptoSecureMessage+0x7c>
 800bc8c:	20000e1c 	.word	0x20000e1c

0800bc90 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800bc90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc94:	b087      	sub	sp, #28
 800bc96:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800bc98:	2e00      	cmp	r6, #0
 800bc9a:	d049      	beq.n	800bd30 <LoRaMacCryptoUnsecureMessage+0xa0>
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	4688      	mov	r8, r1
 800bca0:	4617      	mov	r7, r2
 800bca2:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800bca4:	4619      	mov	r1, r3
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7ff fdde 	bl	800b868 <CheckFCntDown>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d041      	beq.n	800bd34 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	f000 f95f 	bl	800bf74 <LoRaMacParserData>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d141      	bne.n	800bd3e <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800bcba:	a905      	add	r1, sp, #20
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	f7ff fd8f 	bl	800b7e0 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bcc2:	4605      	mov	r5, r0
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d136      	bne.n	800bd36 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800bcc8:	9b05      	ldr	r3, [sp, #20]
 800bcca:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800bcce:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800bcd0:	68b3      	ldr	r3, [r6, #8]
 800bcd2:	4543      	cmp	r3, r8
 800bcd4:	d135      	bne.n	800bd42 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800bcd6:	7b33      	ldrb	r3, [r6, #12]
 800bcd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800bcdc:	491a      	ldr	r1, [pc, #104]	; (800bd48 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800bcde:	6809      	ldr	r1, [r1, #0]
 800bce0:	7889      	ldrb	r1, [r1, #2]
 800bce2:	b901      	cbnz	r1, 800bce6 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800bce4:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800bce6:	7931      	ldrb	r1, [r6, #4]
 800bce8:	3904      	subs	r1, #4
 800bcea:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800bcec:	9003      	str	r0, [sp, #12]
 800bcee:	9402      	str	r4, [sp, #8]
 800bcf0:	f8cd 8004 	str.w	r8, [sp, #4]
 800bcf4:	2001      	movs	r0, #1
 800bcf6:	9000      	str	r0, [sp, #0]
 800bcf8:	b289      	uxth	r1, r1
 800bcfa:	6830      	ldr	r0, [r6, #0]
 800bcfc:	f7ff febd 	bl	800ba7a <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bd00:	4605      	mov	r5, r0
 800bd02:	b9c0      	cbnz	r0, 800bd36 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800bd04:	f896 3020 	ldrb.w	r3, [r6, #32]
 800bd08:	b90b      	cbnz	r3, 800bd0e <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800bd0a:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800bd0e:	9401      	str	r4, [sp, #4]
 800bd10:	2301      	movs	r3, #1
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	4643      	mov	r3, r8
 800bd16:	464a      	mov	r2, r9
 800bd18:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800bd1c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800bd1e:	f7ff fe50 	bl	800b9c2 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bd22:	4605      	mov	r5, r0
 800bd24:	b938      	cbnz	r0, 800bd36 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800bd26:	4621      	mov	r1, r4
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f7ff fdb5 	bl	800b898 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800bd2e:	e002      	b.n	800bd36 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd30:	2509      	movs	r5, #9
 800bd32:	e000      	b.n	800bd36 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bd34:	2506      	movs	r5, #6
}
 800bd36:	4628      	mov	r0, r5
 800bd38:	b007      	add	sp, #28
 800bd3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bd3e:	250f      	movs	r5, #15
 800bd40:	e7f9      	b.n	800bd36 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800bd42:	2502      	movs	r5, #2
 800bd44:	e7f7      	b.n	800bd36 <LoRaMacCryptoUnsecureMessage+0xa6>
 800bd46:	bf00      	nop
 800bd48:	20000e1c 	.word	0x20000e1c

0800bd4c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800bd4c:	b9b1      	cbnz	r1, 800bd7c <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800bd4e:	b500      	push	{lr}
 800bd50:	b085      	sub	sp, #20
 800bd52:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800bd54:	2300      	movs	r3, #0
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	9302      	str	r3, [sp, #8]
 800bd5c:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800bd5e:	2801      	cmp	r0, #1
 800bd60:	d008      	beq.n	800bd74 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800bd62:	2204      	movs	r2, #4
 800bd64:	4661      	mov	r1, ip
 800bd66:	4668      	mov	r0, sp
 800bd68:	f002 fb88 	bl	800e47c <SecureElementDeriveAndStoreKey>
 800bd6c:	b940      	cbnz	r0, 800bd80 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bd6e:	b005      	add	sp, #20
 800bd70:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800bd74:	2320      	movs	r3, #32
 800bd76:	f88d 3000 	strb.w	r3, [sp]
 800bd7a:	e7f2      	b.n	800bd62 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800bd7c:	200a      	movs	r0, #10
}
 800bd7e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bd80:	200e      	movs	r0, #14
 800bd82:	e7f4      	b.n	800bd6e <LoRaMacCryptoDeriveMcRootKey+0x22>

0800bd84 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800bd84:	2804      	cmp	r0, #4
 800bd86:	d001      	beq.n	800bd8c <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800bd88:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bd8a:	4770      	bx	lr
{
 800bd8c:	b500      	push	{lr}
 800bd8e:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800bd90:	2300      	movs	r3, #0
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	9301      	str	r3, [sp, #4]
 800bd96:	9302      	str	r3, [sp, #8]
 800bd98:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800bd9a:	227f      	movs	r2, #127	; 0x7f
 800bd9c:	4601      	mov	r1, r0
 800bd9e:	4668      	mov	r0, sp
 800bda0:	f002 fb6c 	bl	800e47c <SecureElementDeriveAndStoreKey>
 800bda4:	b910      	cbnz	r0, 800bdac <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800bda6:	b005      	add	sp, #20
 800bda8:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdac:	200e      	movs	r0, #14
 800bdae:	e7fa      	b.n	800bda6 <LoRaMacCryptoDeriveMcKEKey+0x22>

0800bdb0 <LoRaMacCryptoSetKey>:
{
 800bdb0:	b510      	push	{r4, lr}
 800bdb2:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800bdb4:	f002 fb20 	bl	800e3f8 <SecureElementSetKey>
 800bdb8:	b978      	cbnz	r0, 800bdda <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800bdba:	b104      	cbz	r4, 800bdbe <LoRaMacCryptoSetKey+0xe>
}
 800bdbc:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800bdbe:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <LoRaMacCryptoSetKey+0x34>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	7898      	ldrb	r0, [r3, #2]
 800bdc6:	f7ff ffc1 	bl	800bd4c <LoRaMacCryptoDeriveMcRootKey>
 800bdca:	b940      	cbnz	r0, 800bdde <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bdcc:	2004      	movs	r0, #4
 800bdce:	f7ff ffd9 	bl	800bd84 <LoRaMacCryptoDeriveMcKEKey>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d0f2      	beq.n	800bdbc <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdd6:	200e      	movs	r0, #14
 800bdd8:	e7f0      	b.n	800bdbc <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdda:	200e      	movs	r0, #14
 800bddc:	e7ee      	b.n	800bdbc <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdde:	200e      	movs	r0, #14
 800bde0:	e7ec      	b.n	800bdbc <LoRaMacCryptoSetKey+0xc>
 800bde2:	bf00      	nop
 800bde4:	20000e1c 	.word	0x20000e1c

0800bde8 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800bde8:	2a00      	cmp	r2, #0
 800bdea:	d064      	beq.n	800beb6 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800bdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdee:	b08f      	sub	sp, #60	; 0x3c
 800bdf0:	4607      	mov	r7, r0
 800bdf2:	460d      	mov	r5, r1
 800bdf4:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800bdf6:	2900      	cmp	r1, #0
 800bdf8:	d05f      	beq.n	800beba <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800bdfa:	2600      	movs	r6, #0
 800bdfc:	9605      	str	r6, [sp, #20]
 800bdfe:	221d      	movs	r2, #29
 800be00:	4631      	mov	r1, r6
 800be02:	a806      	add	r0, sp, #24
 800be04:	f005 f874 	bl	8010ef0 <memset>
    uint8_t versionMinor         = 0;
 800be08:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800be0c:	4b2f      	ldr	r3, [pc, #188]	; (800becc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800be12:	f10d 0313 	add.w	r3, sp, #19
 800be16:	9302      	str	r3, [sp, #8]
 800be18:	ab05      	add	r3, sp, #20
 800be1a:	9301      	str	r3, [sp, #4]
 800be1c:	7923      	ldrb	r3, [r4, #4]
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	4632      	mov	r2, r6
 800be24:	4629      	mov	r1, r5
 800be26:	4638      	mov	r0, r7
 800be28:	f002 fb48 	bl	800e4bc <SecureElementProcessJoinAccept>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d146      	bne.n	800bebe <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800be30:	7922      	ldrb	r2, [r4, #4]
 800be32:	a905      	add	r1, sp, #20
 800be34:	6820      	ldr	r0, [r4, #0]
 800be36:	f002 fbda 	bl	800e5ee <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800be3a:	4620      	mov	r0, r4
 800be3c:	f000 f848 	bl	800bed0 <LoRaMacParserJoinAccept>
 800be40:	2800      	cmp	r0, #0
 800be42:	d13f      	bne.n	800bec4 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800be44:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800be46:	79e3      	ldrb	r3, [r4, #7]
 800be48:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800be4c:	7a23      	ldrb	r3, [r4, #8]
 800be4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800be52:	4b1e      	ldr	r3, [pc, #120]	; (800becc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689a      	ldr	r2, [r3, #8]
 800be58:	42aa      	cmp	r2, r5
 800be5a:	d035      	beq.n	800bec8 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800be5c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800be5e:	2100      	movs	r1, #0
 800be60:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800be64:	f7ff ff72 	bl	800bd4c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be68:	bb50      	cbnz	r0, 800bec0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800be6a:	2004      	movs	r0, #4
 800be6c:	f7ff ff8a 	bl	800bd84 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be70:	bb30      	cbnz	r0, 800bec0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800be72:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800be74:	7aa2      	ldrb	r2, [r4, #10]
 800be76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800be7a:	7ae4      	ldrb	r4, [r4, #11]
 800be7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800be80:	4633      	mov	r3, r6
 800be82:	4622      	mov	r2, r4
 800be84:	4629      	mov	r1, r5
 800be86:	2003      	movs	r0, #3
 800be88:	f7ff fd64 	bl	800b954 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be8c:	b9c0      	cbnz	r0, 800bec0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800be8e:	4633      	mov	r3, r6
 800be90:	4622      	mov	r2, r4
 800be92:	4629      	mov	r1, r5
 800be94:	2002      	movs	r0, #2
 800be96:	f7ff fd5d 	bl	800b954 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be9a:	b988      	cbnz	r0, 800bec0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800be9c:	4b0b      	ldr	r3, [pc, #44]	; (800becc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800bea4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800bea6:	2200      	movs	r2, #0
 800bea8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295
 800beae:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800beb0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800beb2:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800beb4:	e004      	b.n	800bec0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800beb6:	2009      	movs	r0, #9
}
 800beb8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800beba:	2009      	movs	r0, #9
 800bebc:	e000      	b.n	800bec0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bebe:	200e      	movs	r0, #14
}
 800bec0:	b00f      	add	sp, #60	; 0x3c
 800bec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bec4:	200f      	movs	r0, #15
 800bec6:	e7fb      	b.n	800bec0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800bec8:	2003      	movs	r0, #3
 800beca:	e7f9      	b.n	800bec0 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800becc:	20000e1c 	.word	0x20000e1c

0800bed0 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d049      	beq.n	800bf68 <LoRaMacParserJoinAccept+0x98>
{
 800bed4:	b510      	push	{r4, lr}
 800bed6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bed8:	6801      	ldr	r1, [r0, #0]
 800beda:	2900      	cmp	r1, #0
 800bedc:	d046      	beq.n	800bf6c <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bede:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee2:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800bee4:	2203      	movs	r2, #3
 800bee6:	3006      	adds	r0, #6
 800bee8:	f002 fb81 	bl	800e5ee <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800beec:	4620      	mov	r0, r4
 800beee:	f850 1b09 	ldr.w	r1, [r0], #9
 800bef2:	2203      	movs	r2, #3
 800bef4:	3104      	adds	r1, #4
 800bef6:	f002 fb7a 	bl	800e5ee <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800befa:	6821      	ldr	r1, [r4, #0]
 800befc:	79cb      	ldrb	r3, [r1, #7]
 800befe:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bf00:	7a0a      	ldrb	r2, [r1, #8]
 800bf02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bf06:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bf08:	7a4a      	ldrb	r2, [r1, #9]
 800bf0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf0e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bf10:	7a8a      	ldrb	r2, [r1, #10]
 800bf12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bf16:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800bf18:	7acb      	ldrb	r3, [r1, #11]
 800bf1a:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800bf1c:	7b0b      	ldrb	r3, [r1, #12]
 800bf1e:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800bf20:	7923      	ldrb	r3, [r4, #4]
 800bf22:	2b21      	cmp	r3, #33	; 0x21
 800bf24:	d018      	beq.n	800bf58 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800bf26:	2b11      	cmp	r3, #17
 800bf28:	dc22      	bgt.n	800bf70 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800bf2a:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800bf2c:	6821      	ldr	r1, [r4, #0]
 800bf2e:	f102 0c01 	add.w	ip, r2, #1
 800bf32:	5c8b      	ldrb	r3, [r1, r2]
 800bf34:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bf36:	1c90      	adds	r0, r2, #2
 800bf38:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800bf3c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800bf40:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bf42:	3203      	adds	r2, #3
 800bf44:	5c08      	ldrb	r0, [r1, r0]
 800bf46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf4a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bf4c:	5c8a      	ldrb	r2, [r1, r2]
 800bf4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bf52:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800bf54:	2000      	movs	r0, #0
}
 800bf56:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800bf58:	2210      	movs	r2, #16
 800bf5a:	310d      	adds	r1, #13
 800bf5c:	f104 0012 	add.w	r0, r4, #18
 800bf60:	f002 fb45 	bl	800e5ee <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800bf64:	221d      	movs	r2, #29
 800bf66:	e7e1      	b.n	800bf2c <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800bf68:	2002      	movs	r0, #2
}
 800bf6a:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800bf6c:	2002      	movs	r0, #2
 800bf6e:	e7f2      	b.n	800bf56 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800bf70:	2001      	movs	r0, #1
 800bf72:	e7f0      	b.n	800bf56 <LoRaMacParserJoinAccept+0x86>

0800bf74 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d058      	beq.n	800c02a <LoRaMacParserData+0xb6>
{
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bf7c:	6801      	ldr	r1, [r0, #0]
 800bf7e:	2900      	cmp	r1, #0
 800bf80:	d055      	beq.n	800c02e <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bf82:	780b      	ldrb	r3, [r1, #0]
 800bf84:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800bf86:	784b      	ldrb	r3, [r1, #1]
 800bf88:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bf8a:	788a      	ldrb	r2, [r1, #2]
 800bf8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bf90:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bf92:	78ca      	ldrb	r2, [r1, #3]
 800bf94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf98:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bf9a:	790a      	ldrb	r2, [r1, #4]
 800bf9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bfa0:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800bfa2:	794b      	ldrb	r3, [r1, #5]
 800bfa4:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800bfa6:	798b      	ldrb	r3, [r1, #6]
 800bfa8:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800bfaa:	79ca      	ldrb	r2, [r1, #7]
 800bfac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bfb0:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800bfb2:	7b02      	ldrb	r2, [r0, #12]
 800bfb4:	f002 020f 	and.w	r2, r2, #15
 800bfb8:	3108      	adds	r1, #8
 800bfba:	3010      	adds	r0, #16
 800bfbc:	f002 fb17 	bl	800e5ee <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bfc0:	7b23      	ldrb	r3, [r4, #12]
 800bfc2:	f003 030f 	and.w	r3, r3, #15
 800bfc6:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800bfd0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800bfd4:	7922      	ldrb	r2, [r4, #4]
 800bfd6:	1a11      	subs	r1, r2, r0
 800bfd8:	2904      	cmp	r1, #4
 800bfda:	dc16      	bgt.n	800c00a <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800bfdc:	6822      	ldr	r2, [r4, #0]
 800bfde:	7923      	ldrb	r3, [r4, #4]
 800bfe0:	441a      	add	r2, r3
 800bfe2:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800bfe6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800bfe8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800bfec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bff0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800bff2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800bff6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bffa:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800bffc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800c000:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c004:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800c006:	2000      	movs	r0, #0
}
 800c008:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c00a:	6821      	ldr	r1, [r4, #0]
 800c00c:	3309      	adds	r3, #9
 800c00e:	5c08      	ldrb	r0, [r1, r0]
 800c010:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c014:	1ad2      	subs	r2, r2, r3
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	3a04      	subs	r2, #4
 800c01a:	b2d2      	uxtb	r2, r2
 800c01c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c020:	4419      	add	r1, r3
 800c022:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c024:	f002 fae3 	bl	800e5ee <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800c028:	e7d8      	b.n	800bfdc <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800c02a:	2002      	movs	r0, #2
}
 800c02c:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c02e:	2002      	movs	r0, #2
 800c030:	e7ea      	b.n	800c008 <LoRaMacParserData+0x94>

0800c032 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c032:	b370      	cbz	r0, 800c092 <LoRaMacSerializerJoinRequest+0x60>
{
 800c034:	b510      	push	{r4, lr}
 800c036:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c038:	6803      	ldr	r3, [r0, #0]
 800c03a:	b363      	cbz	r3, 800c096 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c03c:	7902      	ldrb	r2, [r0, #4]
 800c03e:	2a16      	cmp	r2, #22
 800c040:	d92b      	bls.n	800c09a <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c042:	7942      	ldrb	r2, [r0, #5]
 800c044:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c046:	4601      	mov	r1, r0
 800c048:	f851 0b06 	ldr.w	r0, [r1], #6
 800c04c:	2208      	movs	r2, #8
 800c04e:	3001      	adds	r0, #1
 800c050:	f002 fad8 	bl	800e604 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c054:	4621      	mov	r1, r4
 800c056:	f851 0b0e 	ldr.w	r0, [r1], #14
 800c05a:	2208      	movs	r2, #8
 800c05c:	3009      	adds	r0, #9
 800c05e:	f002 fad1 	bl	800e604 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c062:	8ae2      	ldrh	r2, [r4, #22]
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c068:	8ae3      	ldrh	r3, [r4, #22]
 800c06a:	6822      	ldr	r2, [r4, #0]
 800c06c:	0a1b      	lsrs	r3, r3, #8
 800c06e:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c070:	69a2      	ldr	r2, [r4, #24]
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c076:	69a3      	ldr	r3, [r4, #24]
 800c078:	0a1b      	lsrs	r3, r3, #8
 800c07a:	6822      	ldr	r2, [r4, #0]
 800c07c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c07e:	8b62      	ldrh	r2, [r4, #26]
 800c080:	6823      	ldr	r3, [r4, #0]
 800c082:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c084:	7ee2      	ldrb	r2, [r4, #27]
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800c08a:	2317      	movs	r3, #23
 800c08c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c08e:	2000      	movs	r0, #0
}
 800c090:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c092:	2001      	movs	r0, #1
}
 800c094:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c096:	2001      	movs	r0, #1
 800c098:	e7fa      	b.n	800c090 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c09a:	2002      	movs	r0, #2
 800c09c:	e7f8      	b.n	800c090 <LoRaMacSerializerJoinRequest+0x5e>

0800c09e <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d066      	beq.n	800c170 <LoRaMacSerializerData+0xd2>
{
 800c0a2:	b538      	push	{r3, r4, r5, lr}
 800c0a4:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c0a6:	6801      	ldr	r1, [r0, #0]
 800c0a8:	2900      	cmp	r1, #0
 800c0aa:	d063      	beq.n	800c174 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c0ac:	7b02      	ldrb	r2, [r0, #12]
 800c0ae:	f002 020f 	and.w	r2, r2, #15
 800c0b2:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c0b6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c0ba:	b10b      	cbz	r3, 800c0c0 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800c0bc:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800c0c0:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800c0c6:	7922      	ldrb	r2, [r4, #4]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d355      	bcc.n	800c178 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c0cc:	7963      	ldrb	r3, [r4, #5]
 800c0ce:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c0d0:	68a2      	ldr	r2, [r4, #8]
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c0d6:	68a3      	ldr	r3, [r4, #8]
 800c0d8:	0a1b      	lsrs	r3, r3, #8
 800c0da:	6822      	ldr	r2, [r4, #0]
 800c0dc:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c0de:	8962      	ldrh	r2, [r4, #10]
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c0e4:	7ae2      	ldrb	r2, [r4, #11]
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	7b22      	ldrb	r2, [r4, #12]
 800c0ee:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c0f0:	89e2      	ldrh	r2, [r4, #14]
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c0f6:	89e3      	ldrh	r3, [r4, #14]
 800c0f8:	6822      	ldr	r2, [r4, #0]
 800c0fa:	0a1b      	lsrs	r3, r3, #8
 800c0fc:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c0fe:	4621      	mov	r1, r4
 800c100:	f851 0b10 	ldr.w	r0, [r1], #16
 800c104:	7b22      	ldrb	r2, [r4, #12]
 800c106:	f002 020f 	and.w	r2, r2, #15
 800c10a:	3008      	adds	r0, #8
 800c10c:	f002 fa6f 	bl	800e5ee <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c110:	7b23      	ldrb	r3, [r4, #12]
 800c112:	f003 030f 	and.w	r3, r3, #15
 800c116:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c11a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c11e:	b12a      	cbz	r2, 800c12c <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c120:	6822      	ldr	r2, [r4, #0]
 800c122:	f894 1020 	ldrb.w	r1, [r4, #32]
 800c126:	5551      	strb	r1, [r2, r5]
 800c128:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c132:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c134:	4428      	add	r0, r5
 800c136:	f002 fa5a 	bl	800e5ee <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c13a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c13e:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c140:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c142:	6821      	ldr	r1, [r4, #0]
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	b292      	uxth	r2, r2
 800c148:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c14a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c14c:	0a08      	lsrs	r0, r1, #8
 800c14e:	6825      	ldr	r5, [r4, #0]
 800c150:	1c99      	adds	r1, r3, #2
 800c152:	b289      	uxth	r1, r1
 800c154:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c156:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800c158:	6820      	ldr	r0, [r4, #0]
 800c15a:	1cda      	adds	r2, r3, #3
 800c15c:	b292      	uxth	r2, r2
 800c15e:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c160:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800c164:	6821      	ldr	r1, [r4, #0]
 800c166:	3304      	adds	r3, #4
 800c168:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800c16a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c16c:	2000      	movs	r0, #0
}
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c170:	2001      	movs	r0, #1
}
 800c172:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c174:	2001      	movs	r0, #1
 800c176:	e7fa      	b.n	800c16e <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c178:	2002      	movs	r0, #2
 800c17a:	e7f8      	b.n	800c16e <LoRaMacSerializerData+0xd0>

0800c17c <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800c17c:	4b02      	ldr	r3, [pc, #8]	; (800c188 <NvmDataMgmtEvent+0xc>)
 800c17e:	881a      	ldrh	r2, [r3, #0]
 800c180:	4310      	orrs	r0, r2
 800c182:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	20000e20 	.word	0x20000e20

0800c18c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c18c:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800c18e:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <NvmDataMgmtStoreBegin+0x1c>)
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	b11b      	cbz	r3, 800c19c <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800c194:	f7fe f914 	bl	800a3c0 <LoRaMacStop>
 800c198:	b918      	cbnz	r0, 800c1a2 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c19a:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800c19c:	f06f 0001 	mvn.w	r0, #1
 800c1a0:	e7fb      	b.n	800c19a <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800c1a2:	f06f 0002 	mvn.w	r0, #2
 800c1a6:	e7f8      	b.n	800c19a <NvmDataMgmtStoreBegin+0xe>
 800c1a8:	20000e20 	.word	0x20000e20

0800c1ac <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c1ac:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c1ae:	2400      	movs	r4, #0
 800c1b0:	4b02      	ldr	r3, [pc, #8]	; (800c1bc <NvmDataMgmtStoreEnd+0x10>)
 800c1b2:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800c1b4:	f7fe f8fc 	bl	800a3b0 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	bd10      	pop	{r4, pc}
 800c1bc:	20000e20 	.word	0x20000e20

0800c1c0 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c1c0:	2808      	cmp	r0, #8
 800c1c2:	d001      	beq.n	800c1c8 <RegionIsActive+0x8>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800c1c4:	2000      	movs	r0, #0
        }
    }
}
 800c1c6:	4770      	bx	lr
        US915_IS_ACTIVE( );
 800c1c8:	2001      	movs	r0, #1
 800c1ca:	4770      	bx	lr

0800c1cc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c1cc:	b500      	push	{lr}
 800c1ce:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	9300      	str	r3, [sp, #0]
    switch( region )
 800c1d4:	2808      	cmp	r0, #8
 800c1d6:	d005      	beq.n	800c1e4 <RegionGetPhyParam+0x18>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c1d8:	9b00      	ldr	r3, [sp, #0]
 800c1da:	9301      	str	r3, [sp, #4]
        }
    }
}
 800c1dc:	9801      	ldr	r0, [sp, #4]
 800c1de:	b003      	add	sp, #12
 800c1e0:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	f000 fd5b 	bl	800cca0 <RegionUS915GetPhyParam>
 800c1ea:	9001      	str	r0, [sp, #4]
 800c1ec:	e7f6      	b.n	800c1dc <RegionGetPhyParam+0x10>

0800c1ee <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800c1ee:	2808      	cmp	r0, #8
 800c1f0:	d000      	beq.n	800c1f4 <RegionSetBandTxDone+0x6>
 800c1f2:	4770      	bx	lr
{
 800c1f4:	b508      	push	{r3, lr}
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	f000 fe28 	bl	800ce4c <RegionUS915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800c1fc:	bd08      	pop	{r3, pc}

0800c1fe <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800c1fe:	2808      	cmp	r0, #8
 800c200:	d000      	beq.n	800c204 <RegionInitDefaults+0x6>
 800c202:	4770      	bx	lr
{
 800c204:	b508      	push	{r3, lr}
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 800c206:	4608      	mov	r0, r1
 800c208:	f000 fe3e 	bl	800ce88 <RegionUS915InitDefaults>
        default:
        {
            break;
        }
    }
}
 800c20c:	bd08      	pop	{r3, pc}

0800c20e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800c20e:	2808      	cmp	r0, #8
 800c210:	d001      	beq.n	800c216 <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800c212:	2000      	movs	r0, #0
        }
    }
}
 800c214:	4770      	bx	lr
{
 800c216:	b508      	push	{r3, lr}
 800c218:	460b      	mov	r3, r1
        US915_VERIFY( );
 800c21a:	4611      	mov	r1, r2
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 fed7 	bl	800cfd0 <RegionUS915Verify>
}
 800c222:	bd08      	pop	{r3, pc}

0800c224 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800c224:	2808      	cmp	r0, #8
 800c226:	d000      	beq.n	800c22a <RegionApplyCFList+0x6>
 800c228:	4770      	bx	lr
{
 800c22a:	b508      	push	{r3, lr}
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 800c22c:	4608      	mov	r0, r1
 800c22e:	f000 ff09 	bl	800d044 <RegionUS915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800c232:	bd08      	pop	{r3, pc}

0800c234 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800c234:	2808      	cmp	r0, #8
 800c236:	d001      	beq.n	800c23c <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800c238:	2000      	movs	r0, #0
        }
    }
}
 800c23a:	4770      	bx	lr
{
 800c23c:	b508      	push	{r3, lr}
        US915_CHAN_MASK_SET( );
 800c23e:	4608      	mov	r0, r1
 800c240:	f000 ff3e 	bl	800d0c0 <RegionUS915ChanMaskSet>
}
 800c244:	bd08      	pop	{r3, pc}

0800c246 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800c246:	2808      	cmp	r0, #8
 800c248:	d000      	beq.n	800c24c <RegionComputeRxWindowParameters+0x6>
 800c24a:	4770      	bx	lr
{
 800c24c:	b508      	push	{r3, lr}
 800c24e:	468c      	mov	ip, r1
 800c250:	4611      	mov	r1, r2
 800c252:	461a      	mov	r2, r3
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c254:	9b02      	ldr	r3, [sp, #8]
 800c256:	4660      	mov	r0, ip
 800c258:	f000 ff74 	bl	800d144 <RegionUS915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c25c:	bd08      	pop	{r3, pc}

0800c25e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800c25e:	2808      	cmp	r0, #8
 800c260:	d001      	beq.n	800c266 <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800c262:	2000      	movs	r0, #0
        }
    }
}
 800c264:	4770      	bx	lr
{
 800c266:	b508      	push	{r3, lr}
 800c268:	460b      	mov	r3, r1
        US915_RX_CONFIG( );
 800c26a:	4611      	mov	r1, r2
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 ff97 	bl	800d1a0 <RegionUS915RxConfig>
}
 800c272:	bd08      	pop	{r3, pc}

0800c274 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800c274:	2808      	cmp	r0, #8
 800c276:	d001      	beq.n	800c27c <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800c278:	2000      	movs	r0, #0
        }
    }
}
 800c27a:	4770      	bx	lr
{
 800c27c:	b508      	push	{r3, lr}
 800c27e:	468c      	mov	ip, r1
 800c280:	4611      	mov	r1, r2
        US915_TX_CONFIG( );
 800c282:	461a      	mov	r2, r3
 800c284:	4660      	mov	r0, ip
 800c286:	f000 ffe5 	bl	800d254 <RegionUS915TxConfig>
}
 800c28a:	bd08      	pop	{r3, pc}

0800c28c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800c28c:	2808      	cmp	r0, #8
 800c28e:	d001      	beq.n	800c294 <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800c290:	2000      	movs	r0, #0
        }
    }
}
 800c292:	4770      	bx	lr
{
 800c294:	b500      	push	{lr}
 800c296:	b083      	sub	sp, #12
 800c298:	468c      	mov	ip, r1
 800c29a:	4611      	mov	r1, r2
 800c29c:	461a      	mov	r2, r3
        US915_LINK_ADR_REQ( );
 800c29e:	9b05      	ldr	r3, [sp, #20]
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	9b04      	ldr	r3, [sp, #16]
 800c2a4:	4660      	mov	r0, ip
 800c2a6:	f001 f84f 	bl	800d348 <RegionUS915LinkAdrReq>
}
 800c2aa:	b003      	add	sp, #12
 800c2ac:	f85d fb04 	ldr.w	pc, [sp], #4

0800c2b0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800c2b0:	2808      	cmp	r0, #8
 800c2b2:	d001      	beq.n	800c2b8 <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c2b4:	2000      	movs	r0, #0
        }
    }
}
 800c2b6:	4770      	bx	lr
{
 800c2b8:	b508      	push	{r3, lr}
        US915_RX_PARAM_SETUP_REQ( );
 800c2ba:	4608      	mov	r0, r1
 800c2bc:	f001 f986 	bl	800d5cc <RegionUS915RxParamSetupReq>
}
 800c2c0:	bd08      	pop	{r3, pc}

0800c2c2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800c2c2:	2808      	cmp	r0, #8
 800c2c4:	d001      	beq.n	800c2ca <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c2c6:	2000      	movs	r0, #0
        }
    }
}
 800c2c8:	4770      	bx	lr
{
 800c2ca:	b508      	push	{r3, lr}
        US915_NEW_CHANNEL_REQ( );
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	f001 f9a8 	bl	800d622 <RegionUS915NewChannelReq>
}
 800c2d2:	bd08      	pop	{r3, pc}

0800c2d4 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800c2d4:	2808      	cmp	r0, #8
 800c2d6:	d001      	beq.n	800c2dc <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c2d8:	2000      	movs	r0, #0
        }
    }
}
 800c2da:	4770      	bx	lr
{
 800c2dc:	b508      	push	{r3, lr}
        US915_TX_PARAM_SETUP_REQ( );
 800c2de:	4608      	mov	r0, r1
 800c2e0:	f001 f9a2 	bl	800d628 <RegionUS915TxParamSetupReq>
}
 800c2e4:	bd08      	pop	{r3, pc}

0800c2e6 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800c2e6:	2808      	cmp	r0, #8
 800c2e8:	d001      	beq.n	800c2ee <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c2ea:	2000      	movs	r0, #0
        }
    }
}
 800c2ec:	4770      	bx	lr
{
 800c2ee:	b508      	push	{r3, lr}
        US915_DL_CHANNEL_REQ( );
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	f001 f99c 	bl	800d62e <RegionUS915DlChannelReq>
}
 800c2f6:	bd08      	pop	{r3, pc}

0800c2f8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800c2f8:	2808      	cmp	r0, #8
 800c2fa:	d001      	beq.n	800c300 <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800c2fc:	2000      	movs	r0, #0
        }
    }
}
 800c2fe:	4770      	bx	lr
{
 800c300:	b508      	push	{r3, lr}
 800c302:	460b      	mov	r3, r1
        US915_ALTERNATE_DR( );
 800c304:	4611      	mov	r1, r2
 800c306:	4618      	mov	r0, r3
 800c308:	f001 f994 	bl	800d634 <RegionUS915AlternateDr>
}
 800c30c:	bd08      	pop	{r3, pc}

0800c30e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800c30e:	2808      	cmp	r0, #8
 800c310:	d001      	beq.n	800c316 <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c312:	2009      	movs	r0, #9
        }
    }
}
 800c314:	4770      	bx	lr
{
 800c316:	b508      	push	{r3, lr}
 800c318:	468c      	mov	ip, r1
 800c31a:	4611      	mov	r1, r2
 800c31c:	461a      	mov	r2, r3
        US915_NEXT_CHANNEL( );
 800c31e:	9b02      	ldr	r3, [sp, #8]
 800c320:	4660      	mov	r0, ip
 800c322:	f001 f9a9 	bl	800d678 <RegionUS915NextChannel>
}
 800c326:	bd08      	pop	{r3, pc}

0800c328 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c328:	468c      	mov	ip, r1
 800c32a:	4611      	mov	r1, r2
    switch( region )
 800c32c:	2808      	cmp	r0, #8
 800c32e:	d001      	beq.n	800c334 <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c330:	b2d0      	uxtb	r0, r2
        }
    }
}
 800c332:	4770      	bx	lr
{
 800c334:	b508      	push	{r3, lr}
        US915_APPLY_DR_OFFSET( );
 800c336:	461a      	mov	r2, r3
 800c338:	4660      	mov	r0, ip
 800c33a:	f001 fa4b 	bl	800d7d4 <RegionUS915ApplyDrOffset>
}
 800c33e:	bd08      	pop	{r3, pc}

0800c340 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c340:	4800      	ldr	r0, [pc, #0]	; (800c344 <RegionGetVersion+0x4>)
 800c342:	4770      	bx	lr
 800c344:	02010001 	.word	0x02010001

0800c348 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800c348:	468c      	mov	ip, r1
 800c34a:	b1a9      	cbz	r1, 800c378 <FindAvailable125kHzChannels+0x30>
 800c34c:	b1b2      	cbz	r2, 800c37c <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800c352:	e001      	b.n	800c358 <FindAvailable125kHzChannels+0x10>
 800c354:	3301      	adds	r3, #1
 800c356:	b2db      	uxtb	r3, r3
 800c358:	2b07      	cmp	r3, #7
 800c35a:	d80b      	bhi.n	800c374 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800c35c:	fa40 f103 	asr.w	r1, r0, r3
 800c360:	f011 0f01 	tst.w	r1, #1
 800c364:	d0f6      	beq.n	800c354 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800c366:	7811      	ldrb	r1, [r2, #0]
 800c368:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800c36c:	7811      	ldrb	r1, [r2, #0]
 800c36e:	3101      	adds	r1, #1
 800c370:	7011      	strb	r1, [r2, #0]
 800c372:	e7ef      	b.n	800c354 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800c374:	2000      	movs	r0, #0
 800c376:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c378:	2003      	movs	r0, #3
 800c37a:	4770      	bx	lr
 800c37c:	2003      	movs	r0, #3
}
 800c37e:	4770      	bx	lr

0800c380 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800c380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c382:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800c384:	2300      	movs	r3, #0
 800c386:	9302      	str	r3, [sp, #8]
 800c388:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800c38a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800c38e:	2800      	cmp	r0, #0
 800c390:	d03e      	beq.n	800c410 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800c392:	460d      	mov	r5, r1
 800c394:	4617      	mov	r7, r2
 800c396:	4606      	mov	r6, r0
 800c398:	2900      	cmp	r1, #0
 800c39a:	d03b      	beq.n	800c414 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800c39c:	2a00      	cmp	r2, #0
 800c39e:	d03b      	beq.n	800c418 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800c3a0:	780c      	ldrb	r4, [r1, #0]
 800c3a2:	e017      	b.n	800c3d4 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800c3a4:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800c3a8:	0a00      	lsrs	r0, r0, #8
 800c3aa:	e019      	b.n	800c3e0 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800c3ac:	3901      	subs	r1, #1
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	f002 f910 	bl	800e5d4 <randr>
 800c3b4:	f100 0310 	add.w	r3, r0, #16
 800c3b8:	eb0d 0003 	add.w	r0, sp, r3
 800c3bc:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800c3c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3c4:	703b      	strb	r3, [r7, #0]
 800c3c6:	e016      	b.n	800c3f6 <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800c3c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3cc:	b9cb      	cbnz	r3, 800c402 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800c3ce:	782a      	ldrb	r2, [r5, #0]
 800c3d0:	42a2      	cmp	r2, r4
 800c3d2:	d016      	beq.n	800c402 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800c3d4:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800c3d6:	f014 0f01 	tst.w	r4, #1
 800c3da:	d1e3      	bne.n	800c3a4 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800c3dc:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800c3e0:	f10d 0207 	add.w	r2, sp, #7
 800c3e4:	a902      	add	r1, sp, #8
 800c3e6:	f7ff ffaf 	bl	800c348 <FindAvailable125kHzChannels>
 800c3ea:	2803      	cmp	r0, #3
 800c3ec:	d00b      	beq.n	800c406 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800c3ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c3f2:	2900      	cmp	r1, #0
 800c3f4:	d1da      	bne.n	800c3ac <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800c3f6:	3401      	adds	r4, #1
 800c3f8:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800c3fa:	2c07      	cmp	r4, #7
 800c3fc:	d9e4      	bls.n	800c3c8 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800c3fe:	2400      	movs	r4, #0
 800c400:	e7e2      	b.n	800c3c8 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800c402:	b913      	cbnz	r3, 800c40a <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800c404:	2003      	movs	r0, #3
}
 800c406:	b005      	add	sp, #20
 800c408:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800c40a:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800c40c:	2000      	movs	r0, #0
 800c40e:	e7fa      	b.n	800c406 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c410:	2003      	movs	r0, #3
 800c412:	e7f8      	b.n	800c406 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c414:	2003      	movs	r0, #3
 800c416:	e7f6      	b.n	800c406 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c418:	2003      	movs	r0, #3
 800c41a:	e7f4      	b.n	800c406 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800c41c <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800c41c:	fb02 1000 	mla	r0, r2, r0, r1
 800c420:	4770      	bx	lr

0800c422 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c422:	b082      	sub	sp, #8
 800c424:	f10d 0c08 	add.w	ip, sp, #8
 800c428:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800c42c:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800c42e:	b971      	cbnz	r1, 800c44e <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c430:	4613      	mov	r3, r2
 800c432:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800c436:	d306      	bcc.n	800c446 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800c438:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d80a      	bhi.n	800c456 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800c440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c444:	e000      	b.n	800c448 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c446:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c448:	4298      	cmp	r0, r3
 800c44a:	bf38      	it	cc
 800c44c:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800c44e:	b900      	cbnz	r0, 800c452 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800c450:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800c452:	b002      	add	sp, #8
 800c454:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c456:	f242 7310 	movw	r3, #10000	; 0x2710
 800c45a:	e7f5      	b.n	800c448 <GetDutyCycle+0x26>

0800c45c <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800c45c:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800c45e:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800c460:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800c462:	e001      	b.n	800c468 <CountChannels+0xc>
 800c464:	3301      	adds	r3, #1
 800c466:	b2db      	uxtb	r3, r3
 800c468:	428b      	cmp	r3, r1
 800c46a:	d207      	bcs.n	800c47c <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c46c:	2201      	movs	r2, #1
 800c46e:	409a      	lsls	r2, r3
 800c470:	ea32 020c 	bics.w	r2, r2, ip
 800c474:	d1f6      	bne.n	800c464 <CountChannels+0x8>
        {
            nbActiveBits++;
 800c476:	3001      	adds	r0, #1
 800c478:	b2c0      	uxtb	r0, r0
 800c47a:	e7f3      	b.n	800c464 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800c47c:	4770      	bx	lr
	...

0800c480 <SetMaxTimeCredits>:
{
 800c480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c484:	b089      	sub	sp, #36	; 0x24
 800c486:	4604      	mov	r4, r0
 800c488:	460e      	mov	r6, r1
 800c48a:	ad02      	add	r5, sp, #8
 800c48c:	e885 000c 	stmia.w	r5, {r2, r3}
 800c490:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800c494:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800c498:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c49c:	f004 f9ee 	bl	801087c <SysTimeToMs>
 800c4a0:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	9304      	str	r3, [sp, #16]
 800c4a6:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c4a8:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c4ac:	4631      	mov	r1, r6
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f7ff ffb7 	bl	800c422 <GetDutyCycle>
 800c4b4:	4605      	mov	r5, r0
    if( joined == false )
 800c4b6:	2e00      	cmp	r6, #0
 800c4b8:	d14c      	bne.n	800c554 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c4ba:	2864      	cmp	r0, #100	; 0x64
 800c4bc:	d025      	beq.n	800c50a <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c4be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c4c2:	d025      	beq.n	800c510 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c4c4:	4e27      	ldr	r6, [pc, #156]	; (800c564 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c4c6:	68a1      	ldr	r1, [r4, #8]
 800c4c8:	a806      	add	r0, sp, #24
 800c4ca:	f004 f9f7 	bl	80108bc <SysTimeFromMs>
 800c4ce:	9b07      	ldr	r3, [sp, #28]
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	9b06      	ldr	r3, [sp, #24]
 800c4d4:	aa02      	add	r2, sp, #8
 800c4d6:	ca06      	ldmia	r2, {r1, r2}
 800c4d8:	a804      	add	r0, sp, #16
 800c4da:	f004 f956 	bl	801078a <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c4de:	f1b8 0f00 	cmp.w	r8, #0
 800c4e2:	d102      	bne.n	800c4ea <SetMaxTimeCredits+0x6a>
 800c4e4:	f1b9 0f00 	cmp.w	r9, #0
 800c4e8:	d002      	beq.n	800c4f0 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c4ea:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c4ec:	42b3      	cmp	r3, r6
 800c4ee:	d012      	beq.n	800c516 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800c4f0:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c4f2:	9b02      	ldr	r3, [sp, #8]
 800c4f4:	4a1c      	ldr	r2, [pc, #112]	; (800c568 <SetMaxTimeCredits+0xe8>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d812      	bhi.n	800c520 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800c4fa:	6863      	ldr	r3, [r4, #4]
 800c4fc:	b903      	cbnz	r3, 800c500 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800c4fe:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800c500:	6126      	str	r6, [r4, #16]
}
 800c502:	4628      	mov	r0, r5
 800c504:	b009      	add	sp, #36	; 0x24
 800c506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800c50a:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c50c:	4e17      	ldr	r6, [pc, #92]	; (800c56c <SetMaxTimeCredits+0xec>)
 800c50e:	e7da      	b.n	800c4c6 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800c510:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800c512:	4e17      	ldr	r6, [pc, #92]	; (800c570 <SetMaxTimeCredits+0xf0>)
 800c514:	e7d7      	b.n	800c4c6 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c516:	9a04      	ldr	r2, [sp, #16]
 800c518:	4b16      	ldr	r3, [pc, #88]	; (800c574 <SetMaxTimeCredits+0xf4>)
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d9ed      	bls.n	800c4fa <SetMaxTimeCredits+0x7a>
 800c51e:	e7e7      	b.n	800c4f0 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800c520:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c524:	3b30      	subs	r3, #48	; 0x30
 800c526:	4a14      	ldr	r2, [pc, #80]	; (800c578 <SetMaxTimeCredits+0xf8>)
 800c528:	fba2 2303 	umull	r2, r3, r2, r3
 800c52c:	0c1b      	lsrs	r3, r3, #16
 800c52e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800c530:	4a12      	ldr	r2, [pc, #72]	; (800c57c <SetMaxTimeCredits+0xfc>)
 800c532:	fb02 f303 	mul.w	r3, r2, r3
 800c536:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c538:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800c53c:	3330      	adds	r3, #48	; 0x30
 800c53e:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800c546:	ab04      	add	r3, sp, #16
 800c548:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c54c:	f004 f996 	bl	801087c <SysTimeToMs>
 800c550:	60a0      	str	r0, [r4, #8]
 800c552:	e7d2      	b.n	800c4fa <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800c554:	f1b8 0f00 	cmp.w	r8, #0
 800c558:	d102      	bne.n	800c560 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800c55a:	4e04      	ldr	r6, [pc, #16]	; (800c56c <SetMaxTimeCredits+0xec>)
 800c55c:	60e6      	str	r6, [r4, #12]
 800c55e:	e7cc      	b.n	800c4fa <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c560:	4e02      	ldr	r6, [pc, #8]	; (800c56c <SetMaxTimeCredits+0xec>)
 800c562:	e7ca      	b.n	800c4fa <SetMaxTimeCredits+0x7a>
 800c564:	02932e00 	.word	0x02932e00
 800c568:	0001ec2f 	.word	0x0001ec2f
 800c56c:	001b7740 	.word	0x001b7740
 800c570:	0112a880 	.word	0x0112a880
 800c574:	0001517f 	.word	0x0001517f
 800c578:	c22e4507 	.word	0xc22e4507
 800c57c:	00015180 	.word	0x00015180

0800c580 <UpdateTimeCredits>:
{
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	4604      	mov	r4, r0
 800c586:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	9200      	str	r2, [sp, #0]
 800c58c:	ab06      	add	r3, sp, #24
 800c58e:	cb0c      	ldmia	r3, {r2, r3}
 800c590:	f7ff ff76 	bl	800c480 <SetMaxTimeCredits>
 800c594:	4605      	mov	r5, r0
    if( joined == true )
 800c596:	b94e      	cbnz	r6, 800c5ac <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800c598:	68e2      	ldr	r2, [r4, #12]
 800c59a:	6923      	ldr	r3, [r4, #16]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d900      	bls.n	800c5a2 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800c5a0:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800c5a2:	9b08      	ldr	r3, [sp, #32]
 800c5a4:	6063      	str	r3, [r4, #4]
}
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	b002      	add	sp, #8
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c5ac:	6860      	ldr	r0, [r4, #4]
 800c5ae:	f004 f9e5 	bl	801097c <UTIL_TIMER_GetElapsedTime>
 800c5b2:	68e3      	ldr	r3, [r4, #12]
 800c5b4:	4403      	add	r3, r0
 800c5b6:	60e3      	str	r3, [r4, #12]
 800c5b8:	e7ee      	b.n	800c598 <UpdateTimeCredits+0x18>

0800c5ba <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800c5ba:	4288      	cmp	r0, r1
 800c5bc:	db03      	blt.n	800c5c6 <RegionCommonValueInRange+0xc>
 800c5be:	4290      	cmp	r0, r2
 800c5c0:	dd03      	ble.n	800c5ca <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	4770      	bx	lr
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	4770      	bx	lr
        return 1;
 800c5ca:	2001      	movs	r0, #1
}
 800c5cc:	4770      	bx	lr

0800c5ce <RegionCommonChanVerifyDr>:
{
 800c5ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d2:	4682      	mov	sl, r0
 800c5d4:	460e      	mov	r6, r1
 800c5d6:	4690      	mov	r8, r2
 800c5d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800c5dc:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4640      	mov	r0, r8
 800c5e4:	f7ff ffe9 	bl	800c5ba <RegionCommonValueInRange>
 800c5e8:	b338      	cbz	r0, 800c63a <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c5ea:	2500      	movs	r5, #0
 800c5ec:	462f      	mov	r7, r5
 800c5ee:	e01e      	b.n	800c62e <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800c5f0:	3401      	adds	r4, #1
 800c5f2:	b2e4      	uxtb	r4, r4
 800c5f4:	2c0f      	cmp	r4, #15
 800c5f6:	d816      	bhi.n	800c626 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c5f8:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800c5fc:	4123      	asrs	r3, r4
 800c5fe:	f013 0f01 	tst.w	r3, #1
 800c602:	d0f5      	beq.n	800c5f0 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c604:	193b      	adds	r3, r7, r4
 800c606:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c60a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800c60e:	7a19      	ldrb	r1, [r3, #8]
 800c610:	090a      	lsrs	r2, r1, #4
 800c612:	f001 010f 	and.w	r1, r1, #15
 800c616:	4640      	mov	r0, r8
 800c618:	f7ff ffcf 	bl	800c5ba <RegionCommonValueInRange>
 800c61c:	2801      	cmp	r0, #1
 800c61e:	d1e7      	bne.n	800c5f0 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800c620:	2001      	movs	r0, #1
}
 800c622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c626:	3710      	adds	r7, #16
 800c628:	b2ff      	uxtb	r7, r7
 800c62a:	3501      	adds	r5, #1
 800c62c:	b2ed      	uxtb	r5, r5
 800c62e:	4557      	cmp	r7, sl
 800c630:	d201      	bcs.n	800c636 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800c632:	2400      	movs	r4, #0
 800c634:	e7de      	b.n	800c5f4 <RegionCommonChanVerifyDr+0x26>
    return false;
 800c636:	2000      	movs	r0, #0
 800c638:	e7f3      	b.n	800c622 <RegionCommonChanVerifyDr+0x54>
        return false;
 800c63a:	2000      	movs	r0, #0
 800c63c:	e7f1      	b.n	800c622 <RegionCommonChanVerifyDr+0x54>

0800c63e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800c63e:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c642:	0913      	lsrs	r3, r2, #4
 800c644:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800c648:	d30e      	bcc.n	800c668 <RegionCommonChanDisable+0x2a>
 800c64a:	4291      	cmp	r1, r2
 800c64c:	d20e      	bcs.n	800c66c <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800c64e:	f001 010f 	and.w	r1, r1, #15
 800c652:	2301      	movs	r3, #1
 800c654:	fa03 f101 	lsl.w	r1, r3, r1
 800c658:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800c65c:	ea22 0101 	bic.w	r1, r2, r1
 800c660:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800c664:	4618      	mov	r0, r3
 800c666:	4770      	bx	lr
        return false;
 800c668:	2000      	movs	r0, #0
 800c66a:	4770      	bx	lr
 800c66c:	2000      	movs	r0, #0
}
 800c66e:	4770      	bx	lr

0800c670 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800c672:	b188      	cbz	r0, 800c698 <RegionCommonCountChannels+0x28>
 800c674:	460c      	mov	r4, r1
 800c676:	4616      	mov	r6, r2
 800c678:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800c67a:	2500      	movs	r5, #0
 800c67c:	e008      	b.n	800c690 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c67e:	2110      	movs	r1, #16
 800c680:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800c684:	f7ff feea 	bl	800c45c <CountChannels>
 800c688:	4405      	add	r5, r0
 800c68a:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c68c:	3401      	adds	r4, #1
 800c68e:	b2e4      	uxtb	r4, r4
 800c690:	42b4      	cmp	r4, r6
 800c692:	d3f4      	bcc.n	800c67e <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800c694:	4628      	mov	r0, r5
 800c696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800c698:	2500      	movs	r5, #0
 800c69a:	e7fb      	b.n	800c694 <RegionCommonCountChannels+0x24>

0800c69c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800c69c:	4684      	mov	ip, r0
 800c69e:	b158      	cbz	r0, 800c6b8 <RegionCommonChanMaskCopy+0x1c>
 800c6a0:	b109      	cbz	r1, 800c6a6 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	e006      	b.n	800c6b4 <RegionCommonChanMaskCopy+0x18>
 800c6a6:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800c6a8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c6ac:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d3f7      	bcc.n	800c6a8 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800c6b8:	4770      	bx	lr

0800c6ba <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4604      	mov	r4, r0
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	aa04      	add	r2, sp, #16
 800c6c6:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c6ca:	ca0c      	ldmia	r2, {r2, r3}
 800c6cc:	f7ff fea9 	bl	800c422 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c6d0:	68e3      	ldr	r3, [r4, #12]
 800c6d2:	fb05 f000 	mul.w	r0, r5, r0
 800c6d6:	4283      	cmp	r3, r0
 800c6d8:	d905      	bls.n	800c6e6 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800c6da:	1a18      	subs	r0, r3, r0
 800c6dc:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800c6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6e2:	b002      	add	sp, #8
 800c6e4:	4770      	bx	lr
        band->TimeCredits = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	60e3      	str	r3, [r4, #12]
}
 800c6ea:	e7f8      	b.n	800c6de <RegionCommonSetBandTxDone+0x24>

0800c6ec <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800c6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	b089      	sub	sp, #36	; 0x24
 800c6f2:	4607      	mov	r7, r0
 800c6f4:	468b      	mov	fp, r1
 800c6f6:	4691      	mov	r9, r2
 800c6f8:	4698      	mov	r8, r3
 800c6fa:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c6fe:	f004 f933 	bl	8010968 <UTIL_TIMER_GetCurrentTime>
 800c702:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800c704:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800c706:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c708:	f04f 33ff 	mov.w	r3, #4294967295
 800c70c:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800c70e:	e005      	b.n	800c71c <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800c710:	2301      	movs	r3, #1
 800c712:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800c714:	441e      	add	r6, r3
 800c716:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800c718:	3401      	adds	r4, #1
 800c71a:	b2e4      	uxtb	r4, r4
 800c71c:	454c      	cmp	r4, r9
 800c71e:	d25d      	bcs.n	800c7dc <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800c720:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800c724:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800c728:	9b04      	ldr	r3, [sp, #16]
 800c72a:	9302      	str	r3, [sp, #8]
 800c72c:	ab13      	add	r3, sp, #76	; 0x4c
 800c72e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c732:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c736:	4653      	mov	r3, sl
 800c738:	4642      	mov	r2, r8
 800c73a:	4639      	mov	r1, r7
 800c73c:	4628      	mov	r0, r5
 800c73e:	f7ff ff1f 	bl	800c580 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800c742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c744:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c748:	68ea      	ldr	r2, [r5, #12]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d8e0      	bhi.n	800c710 <RegionCommonUpdateBandTimeOff+0x24>
 800c74e:	f1b8 0f00 	cmp.w	r8, #0
 800c752:	d101      	bne.n	800c758 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800c754:	2f00      	cmp	r7, #0
 800c756:	d1db      	bne.n	800c710 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800c758:	2100      	movs	r1, #0
 800c75a:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800c75c:	6929      	ldr	r1, [r5, #16]
 800c75e:	4299      	cmp	r1, r3
 800c760:	d907      	bls.n	800c772 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800c762:	1a9b      	subs	r3, r3, r2
 800c764:	9a05      	ldr	r2, [sp, #20]
 800c766:	429a      	cmp	r2, r3
 800c768:	bf28      	it	cs
 800c76a:	461a      	movcs	r2, r3
 800c76c:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800c76e:	3601      	adds	r6, #1
 800c770:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800c772:	2f00      	cmp	r7, #0
 800c774:	d1d0      	bne.n	800c718 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800c776:	2300      	movs	r3, #0
 800c778:	9306      	str	r3, [sp, #24]
 800c77a:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c77e:	2864      	cmp	r0, #100	; 0x64
 800c780:	d024      	beq.n	800c7cc <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c782:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c786:	d025      	beq.n	800c7d4 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c788:	4b19      	ldr	r3, [pc, #100]	; (800c7f0 <RegionCommonUpdateBandTimeOff+0x104>)
 800c78a:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c78c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c78e:	4a18      	ldr	r2, [pc, #96]	; (800c7f0 <RegionCommonUpdateBandTimeOff+0x104>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d90c      	bls.n	800c7ae <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800c794:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c798:	3b30      	subs	r3, #48	; 0x30
 800c79a:	4a16      	ldr	r2, [pc, #88]	; (800c7f4 <RegionCommonUpdateBandTimeOff+0x108>)
 800c79c:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a0:	0c1b      	lsrs	r3, r3, #16
 800c7a2:	4a15      	ldr	r2, [pc, #84]	; (800c7f8 <RegionCommonUpdateBandTimeOff+0x10c>)
 800c7a4:	fb03 2202 	mla	r2, r3, r2, r2
 800c7a8:	9b06      	ldr	r3, [sp, #24]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800c7ae:	ad06      	add	r5, sp, #24
 800c7b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7b6:	e895 0006 	ldmia.w	r5, {r1, r2}
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f003 ffe5 	bl	801078a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800c7c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c7c4:	f004 f85a 	bl	801087c <SysTimeToMs>
 800c7c8:	9005      	str	r0, [sp, #20]
 800c7ca:	e7a5      	b.n	800c718 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800c7cc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c7d0:	9306      	str	r3, [sp, #24]
 800c7d2:	e7db      	b.n	800c78c <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800c7d4:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800c7d8:	9306      	str	r3, [sp, #24]
 800c7da:	e7d7      	b.n	800c78c <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800c7dc:	b11e      	cbz	r6, 800c7e6 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800c7de:	9805      	ldr	r0, [sp, #20]
 800c7e0:	b009      	add	sp, #36	; 0x24
 800c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800c7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ea:	9305      	str	r3, [sp, #20]
 800c7ec:	e7f7      	b.n	800c7de <RegionCommonUpdateBandTimeOff+0xf2>
 800c7ee:	bf00      	nop
 800c7f0:	0001ec30 	.word	0x0001ec30
 800c7f4:	c22e4507 	.word	0xc22e4507
 800c7f8:	00015180 	.word	0x00015180

0800c7fc <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c7fc:	7803      	ldrb	r3, [r0, #0]
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	d001      	beq.n	800c806 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800c802:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800c804:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800c806:	7842      	ldrb	r2, [r0, #1]
 800c808:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c80c:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c80e:	f003 030f 	and.w	r3, r3, #15
 800c812:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c814:	0913      	lsrs	r3, r2, #4
 800c816:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800c818:	7883      	ldrb	r3, [r0, #2]
 800c81a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800c81c:	78c2      	ldrb	r2, [r0, #3]
 800c81e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c822:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800c824:	7903      	ldrb	r3, [r0, #4]
 800c826:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c828:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800c82c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800c82e:	f003 030f 	and.w	r3, r3, #15
 800c832:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800c834:	2005      	movs	r0, #5
 800c836:	4770      	bx	lr

0800c838 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	b085      	sub	sp, #20
 800c83e:	4604      	mov	r4, r0
 800c840:	4688      	mov	r8, r1
 800c842:	4617      	mov	r7, r2
 800c844:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800c846:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800c848:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800c84c:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800c850:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800c854:	7943      	ldrb	r3, [r0, #5]
 800c856:	b92b      	cbnz	r3, 800c864 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800c858:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800c85c:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800c860:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800c864:	b355      	cbz	r5, 800c8bc <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800c866:	f1ba 0f0f 	cmp.w	sl, #15
 800c86a:	d114      	bne.n	800c896 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800c86c:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800c870:	f1b9 0f0f 	cmp.w	r9, #15
 800c874:	d020      	beq.n	800c8b8 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800c876:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800c87a:	9303      	str	r3, [sp, #12]
 800c87c:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800c880:	461c      	mov	r4, r3
 800c882:	4619      	mov	r1, r3
 800c884:	4648      	mov	r0, r9
 800c886:	f7ff fe98 	bl	800c5ba <RegionCommonValueInRange>
 800c88a:	b9b8      	cbnz	r0, 800c8bc <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800c88c:	454c      	cmp	r4, r9
 800c88e:	dc21      	bgt.n	800c8d4 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800c890:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800c894:	e012      	b.n	800c8bc <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800c896:	69a3      	ldr	r3, [r4, #24]
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c8a4:	4652      	mov	r2, sl
 800c8a6:	6921      	ldr	r1, [r4, #16]
 800c8a8:	7b20      	ldrb	r0, [r4, #12]
 800c8aa:	f7ff fe90 	bl	800c5ce <RegionCommonChanVerifyDr>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d1de      	bne.n	800c870 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800c8b2:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800c8b6:	e7db      	b.n	800c870 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800c8b8:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800c8bc:	2d07      	cmp	r5, #7
 800c8be:	d00c      	beq.n	800c8da <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800c8c0:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800c8c4:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800c8c8:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	b005      	add	sp, #20
 800c8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800c8d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c8d8:	e7f0      	b.n	800c8bc <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800c8da:	f1bb 0f00 	cmp.w	fp, #0
 800c8de:	d1ef      	bne.n	800c8c0 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800c8e0:	f04f 0b01 	mov.w	fp, #1
 800c8e4:	e7ec      	b.n	800c8c0 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800c8e8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800c8e8:	4b02      	ldr	r3, [pc, #8]	; (800c8f4 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800c8ea:	fa03 f000 	lsl.w	r0, r3, r0
}
 800c8ee:	fbb0 f0f1 	udiv	r0, r0, r1
 800c8f2:	4770      	bx	lr
 800c8f4:	000f4240 	.word	0x000f4240

0800c8f8 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800c8f8:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c8fa:	f1a1 0c04 	sub.w	ip, r1, #4
 800c8fe:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800c902:	fb0e f202 	mul.w	r2, lr, r2
 800c906:	fb00 220c 	mla	r2, r0, ip, r2
 800c90a:	0052      	lsls	r2, r2, #1
 800c90c:	d021      	beq.n	800c952 <RegionCommonComputeRxWindowParameters+0x5a>
 800c90e:	4402      	add	r2, r0
 800c910:	3a01      	subs	r2, #1
 800c912:	fbb2 f2f0 	udiv	r2, r2, r0
 800c916:	4291      	cmp	r1, r2
 800c918:	bf38      	it	cc
 800c91a:	4611      	movcc	r1, r2
 800c91c:	9a01      	ldr	r2, [sp, #4]
 800c91e:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800c920:	0082      	lsls	r2, r0, #2
 800c922:	fb00 f101 	mul.w	r1, r0, r1
 800c926:	b1b9      	cbz	r1, 800c958 <RegionCommonComputeRxWindowParameters+0x60>
 800c928:	3101      	adds	r1, #1
 800c92a:	0849      	lsrs	r1, r1, #1
 800c92c:	1a51      	subs	r1, r2, r1
 800c92e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c932:	fb02 1313 	mls	r3, r2, r3, r1
 800c936:	2b00      	cmp	r3, #0
 800c938:	dd10      	ble.n	800c95c <RegionCommonComputeRxWindowParameters+0x64>
 800c93a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800c93e:	4a0b      	ldr	r2, [pc, #44]	; (800c96c <RegionCommonComputeRxWindowParameters+0x74>)
 800c940:	fb82 1203 	smull	r1, r2, r2, r3
 800c944:	17db      	asrs	r3, r3, #31
 800c946:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800c94a:	9a02      	ldr	r2, [sp, #8]
 800c94c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800c94e:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c952:	fbb2 f2f0 	udiv	r2, r2, r0
 800c956:	e7de      	b.n	800c916 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800c958:	0849      	lsrs	r1, r1, #1
 800c95a:	e7e7      	b.n	800c92c <RegionCommonComputeRxWindowParameters+0x34>
 800c95c:	4a03      	ldr	r2, [pc, #12]	; (800c96c <RegionCommonComputeRxWindowParameters+0x74>)
 800c95e:	fb82 1203 	smull	r1, r2, r2, r3
 800c962:	17db      	asrs	r3, r3, #31
 800c964:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800c968:	e7ef      	b.n	800c94a <RegionCommonComputeRxWindowParameters+0x52>
 800c96a:	bf00      	nop
 800c96c:	10624dd3 	.word	0x10624dd3

0800c970 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	460d      	mov	r5, r1
 800c974:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800c976:	0040      	lsls	r0, r0, #1
 800c978:	f7f3 ff28 	bl	80007cc <__aeabi_ui2f>
 800c97c:	4601      	mov	r1, r0
 800c97e:	4628      	mov	r0, r5
 800c980:	f7f3 fe72 	bl	8000668 <__aeabi_fsub>
 800c984:	4621      	mov	r1, r4
 800c986:	f7f3 fe6f 	bl	8000668 <__aeabi_fsub>
 800c98a:	f7f3 fd61 	bl	8000450 <__aeabi_f2d>
 800c98e:	f004 fab7 	bl	8010f00 <floor>
 800c992:	f7f3 fe3d 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800c996:	b240      	sxtb	r0, r0
 800c998:	bd38      	pop	{r3, r4, r5, pc}

0800c99a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800c99a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	4605      	mov	r5, r0
 800c9a2:	468b      	mov	fp, r1
 800c9a4:	9200      	str	r2, [sp, #0]
 800c9a6:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c9a8:	2600      	movs	r6, #0
 800c9aa:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800c9ac:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800c9ae:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c9b0:	e04a      	b.n	800ca48 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800c9b2:	7a3a      	ldrb	r2, [r7, #8]
 800c9b4:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800c9b8:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800c9bc:	b252      	sxtb	r2, r2
 800c9be:	b249      	sxtb	r1, r1
 800c9c0:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800c9c4:	f7ff fdf9 	bl	800c5ba <RegionCommonValueInRange>
 800c9c8:	b178      	cbz	r0, 800c9ea <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800c9ca:	68ea      	ldr	r2, [r5, #12]
 800c9cc:	7a7b      	ldrb	r3, [r7, #9]
 800c9ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c9d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9d6:	7d1b      	ldrb	r3, [r3, #20]
 800c9d8:	b35b      	cbz	r3, 800ca32 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800c9da:	f109 0301 	add.w	r3, r9, #1
 800c9de:	eb08 0204 	add.w	r2, r8, r4
 800c9e2:	f80b 2009 	strb.w	r2, [fp, r9]
 800c9e6:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	b2e4      	uxtb	r4, r4
 800c9ee:	2c0f      	cmp	r4, #15
 800c9f0:	d824      	bhi.n	800ca3c <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800c9f2:	686b      	ldr	r3, [r5, #4]
 800c9f4:	0072      	lsls	r2, r6, #1
 800c9f6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800c9fa:	4123      	asrs	r3, r4
 800c9fc:	f013 0f01 	tst.w	r3, #1
 800ca00:	d0f3      	beq.n	800c9ea <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800ca02:	68a8      	ldr	r0, [r5, #8]
 800ca04:	eb08 0304 	add.w	r3, r8, r4
 800ca08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ca0c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800ca10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d0e8      	beq.n	800c9ea <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ca18:	782b      	ldrb	r3, [r5, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1c9      	bne.n	800c9b2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800ca1e:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d0c6      	beq.n	800c9b2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800ca24:	5a9b      	ldrh	r3, [r3, r2]
 800ca26:	fa43 f104 	asr.w	r1, r3, r4
 800ca2a:	f011 0f01 	tst.w	r1, #1
 800ca2e:	d1c0      	bne.n	800c9b2 <RegionCommonCountNbOfEnabledChannels+0x18>
 800ca30:	e7db      	b.n	800c9ea <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800ca32:	f10a 0a01 	add.w	sl, sl, #1
 800ca36:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800ca3a:	e7d6      	b.n	800c9ea <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ca3c:	f108 0810 	add.w	r8, r8, #16
 800ca40:	fa5f f888 	uxtb.w	r8, r8
 800ca44:	3601      	adds	r6, #1
 800ca46:	b2f6      	uxtb	r6, r6
 800ca48:	fa1f f388 	uxth.w	r3, r8
 800ca4c:	8a2a      	ldrh	r2, [r5, #16]
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d201      	bcs.n	800ca56 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800ca52:	2400      	movs	r4, #0
 800ca54:	e7cb      	b.n	800c9ee <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800ca56:	9b00      	ldr	r3, [sp, #0]
 800ca58:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800ca5c:	9b01      	ldr	r3, [sp, #4]
 800ca5e:	f883 a000 	strb.w	sl, [r3]
}
 800ca62:	b003      	add	sp, #12
 800ca64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca68 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800ca68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca6c:	b085      	sub	sp, #20
 800ca6e:	4604      	mov	r4, r0
 800ca70:	460f      	mov	r7, r1
 800ca72:	4616      	mov	r6, r2
 800ca74:	461d      	mov	r5, r3
 800ca76:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ca7a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800ca7e:	6840      	ldr	r0, [r0, #4]
 800ca80:	f003 ff7c 	bl	801097c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	1a1b      	subs	r3, r3, r0
 800ca88:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ca96:	6863      	ldr	r3, [r4, #4]
 800ca98:	b113      	cbz	r3, 800caa0 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800ca9a:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ca9c:	4283      	cmp	r3, r0
 800ca9e:	d81e      	bhi.n	800cade <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800caa4:	69e3      	ldr	r3, [r4, #28]
 800caa6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800caaa:	781f      	ldrb	r7, [r3, #0]
 800caac:	69a3      	ldr	r3, [r4, #24]
 800caae:	9303      	str	r3, [sp, #12]
 800cab0:	ab01      	add	r3, sp, #4
 800cab2:	f104 020c 	add.w	r2, r4, #12
 800cab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800caba:	e883 0003 	stmia.w	r3, {r0, r1}
 800cabe:	7d23      	ldrb	r3, [r4, #20]
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	7a23      	ldrb	r3, [r4, #8]
 800cac4:	7a62      	ldrb	r2, [r4, #9]
 800cac6:	4661      	mov	r1, ip
 800cac8:	4638      	mov	r0, r7
 800caca:	f7ff fe0f 	bl	800c6ec <RegionCommonUpdateBandTimeOff>
 800cace:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800cad2:	4643      	mov	r3, r8
 800cad4:	462a      	mov	r2, r5
 800cad6:	4631      	mov	r1, r6
 800cad8:	69e0      	ldr	r0, [r4, #28]
 800cada:	f7ff ff5e 	bl	800c99a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800cade:	782b      	ldrb	r3, [r5, #0]
 800cae0:	b923      	cbnz	r3, 800caec <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800cae2:	f898 3000 	ldrb.w	r3, [r8]
 800cae6:	b13b      	cbz	r3, 800caf8 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800cae8:	200b      	movs	r0, #11
 800caea:	e002      	b.n	800caf2 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800caec:	2000      	movs	r0, #0
 800caee:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800caf2:	b005      	add	sp, #20
 800caf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800caf8:	200c      	movs	r0, #12
 800cafa:	e7fa      	b.n	800caf2 <RegionCommonIdentifyChannels+0x8a>

0800cafc <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800cb02:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800cb06:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800cb0a:	42a6      	cmp	r6, r4
 800cb0c:	d011      	beq.n	800cb32 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800cb0e:	3c01      	subs	r4, #1
 800cb10:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800cb12:	42a6      	cmp	r6, r4
 800cb14:	d00e      	beq.n	800cb34 <RegionCommonGetNextLowerTxDr+0x38>
 800cb16:	68ab      	ldr	r3, [r5, #8]
 800cb18:	9301      	str	r3, [sp, #4]
 800cb1a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	4633      	mov	r3, r6
 800cb22:	4622      	mov	r2, r4
 800cb24:	6869      	ldr	r1, [r5, #4]
 800cb26:	78e8      	ldrb	r0, [r5, #3]
 800cb28:	f7ff fd51 	bl	800c5ce <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d0ee      	beq.n	800cb0e <RegionCommonGetNextLowerTxDr+0x12>
 800cb30:	e000      	b.n	800cb34 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800cb32:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800cb34:	4620      	mov	r0, r4
 800cb36:	b002      	add	sp, #8
 800cb38:	bd70      	pop	{r4, r5, r6, pc}

0800cb3a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800cb3a:	4288      	cmp	r0, r1
 800cb3c:	bfb8      	it	lt
 800cb3e:	4608      	movlt	r0, r1
 800cb40:	4770      	bx	lr
	...

0800cb44 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800cb44:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800cb48:	4a05      	ldr	r2, [pc, #20]	; (800cb60 <RegionCommonGetBandwidth+0x1c>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d004      	beq.n	800cb58 <RegionCommonGetBandwidth+0x14>
 800cb4e:	4a05      	ldr	r2, [pc, #20]	; (800cb64 <RegionCommonGetBandwidth+0x20>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d103      	bne.n	800cb5c <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800cb54:	2002      	movs	r0, #2
 800cb56:	4770      	bx	lr
            return 1;
 800cb58:	2001      	movs	r0, #1
 800cb5a:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800cb5c:	2000      	movs	r0, #0
    }
}
 800cb5e:	4770      	bx	lr
 800cb60:	0003d090 	.word	0x0003d090
 800cb64:	0007a120 	.word	0x0007a120

0800cb68 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800cb68:	b500      	push	{lr}
 800cb6a:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800cb6c:	2805      	cmp	r0, #5
 800cb6e:	d80e      	bhi.n	800cb8e <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800cb70:	9202      	str	r2, [sp, #8]
 800cb72:	9101      	str	r1, [sp, #4]
 800cb74:	4b0a      	ldr	r3, [pc, #40]	; (800cba0 <RegionCommonRxConfigPrint+0x38>)
 800cb76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	4b09      	ldr	r3, [pc, #36]	; (800cba4 <RegionCommonRxConfigPrint+0x3c>)
 800cb7e:	2201      	movs	r2, #1
 800cb80:	2100      	movs	r1, #0
 800cb82:	2002      	movs	r0, #2
 800cb84:	f003 fbdc 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800cb88:	b005      	add	sp, #20
 800cb8a:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cb8e:	9201      	str	r2, [sp, #4]
 800cb90:	9100      	str	r1, [sp, #0]
 800cb92:	4b05      	ldr	r3, [pc, #20]	; (800cba8 <RegionCommonRxConfigPrint+0x40>)
 800cb94:	2201      	movs	r2, #1
 800cb96:	2100      	movs	r1, #0
 800cb98:	2002      	movs	r0, #2
 800cb9a:	f003 fbd1 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 800cb9e:	e7f3      	b.n	800cb88 <RegionCommonRxConfigPrint+0x20>
 800cba0:	08011710 	.word	0x08011710
 800cba4:	080116a8 	.word	0x080116a8
 800cba8:	080116c8 	.word	0x080116c8

0800cbac <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800cbac:	b500      	push	{lr}
 800cbae:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cbb0:	9101      	str	r1, [sp, #4]
 800cbb2:	9000      	str	r0, [sp, #0]
 800cbb4:	4b04      	ldr	r3, [pc, #16]	; (800cbc8 <RegionCommonTxConfigPrint+0x1c>)
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	2100      	movs	r1, #0
 800cbba:	2002      	movs	r0, #2
 800cbbc:	f003 fbc0 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 800cbc0:	b003      	add	sp, #12
 800cbc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbc6:	bf00      	nop
 800cbc8:	080116e4 	.word	0x080116e4

0800cbcc <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800cbcc:	b510      	push	{r4, lr}
 800cbce:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800cbd0:	4b10      	ldr	r3, [pc, #64]	; (800cc14 <VerifyRfFreq+0x48>)
 800cbd2:	6a1b      	ldr	r3, [r3, #32]
 800cbd4:	4798      	blx	r3
 800cbd6:	b1c8      	cbz	r0, 800cc0c <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800cbd8:	4b0f      	ldr	r3, [pc, #60]	; (800cc18 <VerifyRfFreq+0x4c>)
 800cbda:	4423      	add	r3, r4
 800cbdc:	4a0f      	ldr	r2, [pc, #60]	; (800cc1c <VerifyRfFreq+0x50>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d813      	bhi.n	800cc0a <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800cbe2:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800cbe6:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800cbea:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800cbee:	fba2 1203 	umull	r1, r2, r2, r3
 800cbf2:	0c92      	lsrs	r2, r2, #18
 800cbf4:	490a      	ldr	r1, [pc, #40]	; (800cc20 <VerifyRfFreq+0x54>)
 800cbf6:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800cbfa:	b942      	cbnz	r2, 800cc0e <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800cbfc:	4b09      	ldr	r3, [pc, #36]	; (800cc24 <VerifyRfFreq+0x58>)
 800cbfe:	4423      	add	r3, r4
 800cc00:	4a09      	ldr	r2, [pc, #36]	; (800cc28 <VerifyRfFreq+0x5c>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d902      	bls.n	800cc0c <VerifyRfFreq+0x40>
    {
        return false;
 800cc06:	2000      	movs	r0, #0
 800cc08:	e000      	b.n	800cc0c <VerifyRfFreq+0x40>
        return false;
 800cc0a:	2000      	movs	r0, #0
    }
    return true;
}
 800cc0c:	bd10      	pop	{r4, pc}
        return false;
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e7fc      	b.n	800cc0c <VerifyRfFreq+0x40>
 800cc12:	bf00      	nop
 800cc14:	08011d10 	.word	0x08011d10
 800cc18:	c8f78f60 	.word	0xc8f78f60
 800cc1c:	00401640 	.word	0x00401640
 800cc20:	000927c0 	.word	0x000927c0
 800cc24:	ca37fea0 	.word	0xca37fea0
 800cc28:	01808580 	.word	0x01808580

0800cc2c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800cc2c:	b570      	push	{r4, r5, r6, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800cc32:	4b0a      	ldr	r3, [pc, #40]	; (800cc5c <GetTimeOnAir+0x30>)
 800cc34:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800cc36:	490a      	ldr	r1, [pc, #40]	; (800cc60 <GetTimeOnAir+0x34>)
 800cc38:	f7ff ff84 	bl	800cb44 <RegionCommonGetBandwidth>
 800cc3c:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800cc3e:	4b09      	ldr	r3, [pc, #36]	; (800cc64 <GetTimeOnAir+0x38>)
 800cc40:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800cc42:	2001      	movs	r0, #1
 800cc44:	9003      	str	r0, [sp, #12]
 800cc46:	b2e4      	uxtb	r4, r4
 800cc48:	9402      	str	r4, [sp, #8]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	9201      	str	r2, [sp, #4]
 800cc4e:	2208      	movs	r2, #8
 800cc50:	9200      	str	r2, [sp, #0]
 800cc52:	4603      	mov	r3, r0
 800cc54:	4632      	mov	r2, r6
 800cc56:	47a8      	blx	r5
}
 800cc58:	b004      	add	sp, #16
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}
 800cc5c:	0801177c 	.word	0x0801177c
 800cc60:	08011728 	.word	0x08011728
 800cc64:	08011d10 	.word	0x08011d10

0800cc68 <LimitTxPower>:
{
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	4615      	mov	r5, r2
 800cc6e:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800cc70:	f7ff ff63 	bl	800cb3a <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800cc74:	2d04      	cmp	r5, #4
 800cc76:	d105      	bne.n	800cc84 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800cc78:	4634      	mov	r4, r6
 800cc7a:	2e02      	cmp	r6, #2
 800cc7c:	bfb8      	it	lt
 800cc7e:	2402      	movlt	r4, #2
}
 800cc80:	4620      	mov	r0, r4
 800cc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc84:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800cc86:	2204      	movs	r2, #4
 800cc88:	2100      	movs	r1, #0
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	f7ff fcf0 	bl	800c670 <RegionCommonCountChannels>
 800cc90:	2831      	cmp	r0, #49	; 0x31
 800cc92:	d8f5      	bhi.n	800cc80 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800cc94:	4634      	mov	r4, r6
 800cc96:	2e05      	cmp	r6, #5
 800cc98:	bfb8      	it	lt
 800cc9a:	2405      	movlt	r4, #5
 800cc9c:	e7f0      	b.n	800cc80 <LimitTxPower+0x18>
	...

0800cca0 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800cca0:	b500      	push	{lr}
 800cca2:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800cca4:	2300      	movs	r3, #0
 800cca6:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800cca8:	7803      	ldrb	r3, [r0, #0]
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	2b37      	cmp	r3, #55	; 0x37
 800ccae:	d81f      	bhi.n	800ccf0 <RegionUS915GetPhyParam+0x50>
 800ccb0:	e8df f003 	tbb	[pc, r3]
 800ccb4:	1e1e1e1c 	.word	0x1e1e1e1c
 800ccb8:	1e1e1e1e 	.word	0x1e1e1e1e
 800ccbc:	3e3b1e1e 	.word	0x3e3b1e1e
 800ccc0:	4d1e4741 	.word	0x4d1e4741
 800ccc4:	5d595551 	.word	0x5d595551
 800ccc8:	6d6a1e61 	.word	0x6d6a1e61
 800cccc:	7f7c7670 	.word	0x7f7c7670
 800ccd0:	86831e1e 	.word	0x86831e1e
 800ccd4:	1e1e1e23 	.word	0x1e1e1e23
 800ccd8:	1e1e1e1e 	.word	0x1e1e1e1e
 800ccdc:	1e1e1e1e 	.word	0x1e1e1e1e
 800cce0:	90891e1e 	.word	0x90891e1e
 800cce4:	a01e9d9a 	.word	0xa01e9d9a
 800cce8:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800ccec:	2308      	movs	r3, #8
 800ccee:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800ccf0:	9804      	ldr	r0, [sp, #16]
 800ccf2:	9005      	str	r0, [sp, #20]
}
 800ccf4:	b007      	add	sp, #28
 800ccf6:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800ccfa:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ccfe:	f88d 3004 	strb.w	r3, [sp, #4]
 800cd02:	2304      	movs	r3, #4
 800cd04:	f88d 3005 	strb.w	r3, [sp, #5]
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f88d 3006 	strb.w	r3, [sp, #6]
 800cd0e:	2348      	movs	r3, #72	; 0x48
 800cd10:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800cd14:	4b44      	ldr	r3, [pc, #272]	; (800ce28 <RegionUS915GetPhyParam+0x188>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cd1c:	9202      	str	r2, [sp, #8]
 800cd1e:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800cd20:	a801      	add	r0, sp, #4
 800cd22:	f7ff feeb 	bl	800cafc <RegionCommonGetNextLowerTxDr>
 800cd26:	9004      	str	r0, [sp, #16]
            break;
 800cd28:	e7e2      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800cd2a:	2340      	movs	r3, #64	; 0x40
 800cd2c:	9304      	str	r3, [sp, #16]
            break;
 800cd2e:	e7df      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800cd30:	2320      	movs	r3, #32
 800cd32:	9304      	str	r3, [sp, #16]
            break;
 800cd34:	e7dc      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800cd36:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cd3a:	4a3c      	ldr	r2, [pc, #240]	; (800ce2c <RegionUS915GetPhyParam+0x18c>)
 800cd3c:	5cd3      	ldrb	r3, [r2, r3]
 800cd3e:	9304      	str	r3, [sp, #16]
            break;
 800cd40:	e7d6      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800cd42:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cd46:	4a3a      	ldr	r2, [pc, #232]	; (800ce30 <RegionUS915GetPhyParam+0x190>)
 800cd48:	5cd3      	ldrb	r3, [r2, r3]
 800cd4a:	9304      	str	r3, [sp, #16]
            break;
 800cd4c:	e7d0      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800cd4e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cd52:	9304      	str	r3, [sp, #16]
            break;
 800cd54:	e7cc      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800cd56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cd5a:	9304      	str	r3, [sp, #16]
            break;
 800cd5c:	e7c8      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800cd5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cd62:	9304      	str	r3, [sp, #16]
            break;
 800cd64:	e7c4      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800cd66:	f241 3388 	movw	r3, #5000	; 0x1388
 800cd6a:	9304      	str	r3, [sp, #16]
            break;
 800cd6c:	e7c0      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800cd6e:	f241 7370 	movw	r3, #6000	; 0x1770
 800cd72:	9304      	str	r3, [sp, #16]
            break;
 800cd74:	e7bc      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800cd76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cd7a:	482e      	ldr	r0, [pc, #184]	; (800ce34 <RegionUS915GetPhyParam+0x194>)
 800cd7c:	f001 fc2a 	bl	800e5d4 <randr>
 800cd80:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800cd84:	9004      	str	r0, [sp, #16]
            break;
 800cd86:	e7b3      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800cd88:	4b2b      	ldr	r3, [pc, #172]	; (800ce38 <RegionUS915GetPhyParam+0x198>)
 800cd8a:	9304      	str	r3, [sp, #16]
            break;
 800cd8c:	e7b0      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800cd8e:	2308      	movs	r3, #8
 800cd90:	9304      	str	r3, [sp, #16]
            break;
 800cd92:	e7ad      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800cd94:	4b24      	ldr	r3, [pc, #144]	; (800ce28 <RegionUS915GetPhyParam+0x188>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800cd9c:	9304      	str	r3, [sp, #16]
            break;
 800cd9e:	e7a7      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800cda0:	4b21      	ldr	r3, [pc, #132]	; (800ce28 <RegionUS915GetPhyParam+0x188>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800cda8:	9304      	str	r3, [sp, #16]
            break;
 800cdaa:	e7a1      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800cdac:	2348      	movs	r3, #72	; 0x48
 800cdae:	9304      	str	r3, [sp, #16]
            break;
 800cdb0:	e79e      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800cdb2:	4b1d      	ldr	r3, [pc, #116]	; (800ce28 <RegionUS915GetPhyParam+0x188>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	9304      	str	r3, [sp, #16]
            break;
 800cdb8:	e79a      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800cdba:	4b20      	ldr	r3, [pc, #128]	; (800ce3c <RegionUS915GetPhyParam+0x19c>)
 800cdbc:	9304      	str	r3, [sp, #16]
            break;
 800cdbe:	e797      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	9304      	str	r3, [sp, #16]
            break;
 800cdc4:	e794      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800cdc6:	4a1e      	ldr	r2, [pc, #120]	; (800ce40 <RegionUS915GetPhyParam+0x1a0>)
 800cdc8:	491b      	ldr	r1, [pc, #108]	; (800ce38 <RegionUS915GetPhyParam+0x198>)
 800cdca:	7900      	ldrb	r0, [r0, #4]
 800cdcc:	f7ff fb26 	bl	800c41c <RegionBaseUSCalcDownlinkFrequency>
 800cdd0:	9004      	str	r0, [sp, #16]
            break;
 800cdd2:	e78d      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800cdd4:	2317      	movs	r3, #23
 800cdd6:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800cdda:	2304      	movs	r3, #4
 800cddc:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800cde0:	2303      	movs	r3, #3
 800cde2:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800cde6:	e783      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800cde8:	2308      	movs	r3, #8
 800cdea:	9304      	str	r3, [sp, #16]
            break;
 800cdec:	e780      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800cdee:	2308      	movs	r3, #8
 800cdf0:	9304      	str	r3, [sp, #16]
            break;
 800cdf2:	e77d      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800cdf4:	4a12      	ldr	r2, [pc, #72]	; (800ce40 <RegionUS915GetPhyParam+0x1a0>)
 800cdf6:	4910      	ldr	r1, [pc, #64]	; (800ce38 <RegionUS915GetPhyParam+0x198>)
 800cdf8:	7900      	ldrb	r0, [r0, #4]
 800cdfa:	f7ff fb0f 	bl	800c41c <RegionBaseUSCalcDownlinkFrequency>
 800cdfe:	9004      	str	r0, [sp, #16]
            break;
 800ce00:	e776      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800ce02:	2308      	movs	r3, #8
 800ce04:	9304      	str	r3, [sp, #16]
            break;
 800ce06:	e773      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800ce08:	2308      	movs	r3, #8
 800ce0a:	9304      	str	r3, [sp, #16]
            break;
 800ce0c:	e770      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800ce0e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ce12:	4a0c      	ldr	r2, [pc, #48]	; (800ce44 <RegionUS915GetPhyParam+0x1a4>)
 800ce14:	5cd3      	ldrb	r3, [r2, r3]
 800ce16:	9304      	str	r3, [sp, #16]
            break;
 800ce18:	e76a      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800ce1a:	490b      	ldr	r1, [pc, #44]	; (800ce48 <RegionUS915GetPhyParam+0x1a8>)
 800ce1c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ce20:	f7ff fe90 	bl	800cb44 <RegionCommonGetBandwidth>
 800ce24:	9004      	str	r0, [sp, #16]
            break;
 800ce26:	e763      	b.n	800ccf0 <RegionUS915GetPhyParam+0x50>
 800ce28:	20000e2c 	.word	0x20000e2c
 800ce2c:	0801179c 	.word	0x0801179c
 800ce30:	0801178c 	.word	0x0801178c
 800ce34:	fffffc18 	.word	0xfffffc18
 800ce38:	370870a0 	.word	0x370870a0
 800ce3c:	4200999a 	.word	0x4200999a
 800ce40:	000927c0 	.word	0x000927c0
 800ce44:	0801177c 	.word	0x0801177c
 800ce48:	08011728 	.word	0x08011728

0800ce4c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800ce4c:	b510      	push	{r4, lr}
 800ce4e:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800ce50:	4b0b      	ldr	r3, [pc, #44]	; (800ce80 <RegionUS915SetBandTxDone+0x34>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	7803      	ldrb	r3, [r0, #0]
 800ce56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ce5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce5e:	7a5b      	ldrb	r3, [r3, #9]
 800ce60:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800ce64:	4b07      	ldr	r3, [pc, #28]	; (800ce84 <RegionUS915SetBandTxDone+0x38>)
 800ce66:	681c      	ldr	r4, [r3, #0]
 800ce68:	6903      	ldr	r3, [r0, #16]
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	68c3      	ldr	r3, [r0, #12]
 800ce6e:	7842      	ldrb	r2, [r0, #1]
 800ce70:	6881      	ldr	r1, [r0, #8]
 800ce72:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800ce76:	f7ff fc20 	bl	800c6ba <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800ce7a:	b002      	add	sp, #8
 800ce7c:	bd10      	pop	{r4, pc}
 800ce7e:	bf00      	nop
 800ce80:	20000e2c 	.word	0x20000e2c
 800ce84:	20000e24 	.word	0x20000e24

0800ce88 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800ce88:	b510      	push	{r4, lr}
 800ce8a:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	f8ad 3000 	strh.w	r3, [sp]
 800ce92:	2300      	movs	r3, #0
 800ce94:	f88d 3002 	strb.w	r3, [sp, #2]
 800ce98:	9301      	str	r3, [sp, #4]
 800ce9a:	9302      	str	r3, [sp, #8]
 800ce9c:	9303      	str	r3, [sp, #12]
 800ce9e:	9304      	str	r3, [sp, #16]
 800cea0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800cea4:	7b04      	ldrb	r4, [r0, #12]
 800cea6:	b174      	cbz	r4, 800cec6 <RegionUS915InitDefaults+0x3e>
 800cea8:	3c01      	subs	r4, #1
 800ceaa:	b2e4      	uxtb	r4, r4
 800ceac:	2c01      	cmp	r4, #1
 800ceae:	d87e      	bhi.n	800cfae <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ceb0:	4b40      	ldr	r3, [pc, #256]	; (800cfb4 <RegionUS915InitDefaults+0x12c>)
 800ceb2:	6818      	ldr	r0, [r3, #0]
 800ceb4:	2206      	movs	r2, #6
 800ceb6:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800ceba:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cebe:	f7ff fbed 	bl	800c69c <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800cec2:	2300      	movs	r3, #0
 800cec4:	e071      	b.n	800cfaa <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800cec6:	6803      	ldr	r3, [r0, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d070      	beq.n	800cfae <RegionUS915InitDefaults+0x126>
 800cecc:	6842      	ldr	r2, [r0, #4]
 800cece:	2a00      	cmp	r2, #0
 800ced0:	d06d      	beq.n	800cfae <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800ced2:	4939      	ldr	r1, [pc, #228]	; (800cfb8 <RegionUS915InitDefaults+0x130>)
 800ced4:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ced6:	4937      	ldr	r1, [pc, #220]	; (800cfb4 <RegionUS915InitDefaults+0x12c>)
 800ced8:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800ceda:	6880      	ldr	r0, [r0, #8]
 800cedc:	4a37      	ldr	r2, [pc, #220]	; (800cfbc <RegionUS915InitDefaults+0x134>)
 800cede:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800cee0:	2200      	movs	r2, #0
 800cee2:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800cee4:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800cee6:	2218      	movs	r2, #24
 800cee8:	4669      	mov	r1, sp
 800ceea:	f001 fb80 	bl	800e5ee <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800ceee:	e011      	b.n	800cf14 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800cef0:	4b30      	ldr	r3, [pc, #192]	; (800cfb4 <RegionUS915InitDefaults+0x12c>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4932      	ldr	r1, [pc, #200]	; (800cfc0 <RegionUS915InitDefaults+0x138>)
 800cef6:	4a33      	ldr	r2, [pc, #204]	; (800cfc4 <RegionUS915InitDefaults+0x13c>)
 800cef8:	fb01 2204 	mla	r2, r1, r4, r2
 800cefc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800cf00:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800cf04:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800cf08:	2230      	movs	r2, #48	; 0x30
 800cf0a:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800cf10:	3401      	adds	r4, #1
 800cf12:	b2e4      	uxtb	r4, r4
 800cf14:	2c3f      	cmp	r4, #63	; 0x3f
 800cf16:	d9eb      	bls.n	800cef0 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cf18:	2340      	movs	r3, #64	; 0x40
 800cf1a:	2b47      	cmp	r3, #71	; 0x47
 800cf1c:	d814      	bhi.n	800cf48 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800cf1e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800cf22:	4a24      	ldr	r2, [pc, #144]	; (800cfb4 <RegionUS915InitDefaults+0x12c>)
 800cf24:	6812      	ldr	r2, [r2, #0]
 800cf26:	4c28      	ldr	r4, [pc, #160]	; (800cfc8 <RegionUS915InitDefaults+0x140>)
 800cf28:	4928      	ldr	r1, [pc, #160]	; (800cfcc <RegionUS915InitDefaults+0x144>)
 800cf2a:	fb04 1100 	mla	r1, r4, r0, r1
 800cf2e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800cf32:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800cf36:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800cf3a:	2144      	movs	r1, #68	; 0x44
 800cf3c:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800cf3e:	2100      	movs	r1, #0
 800cf40:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cf42:	3301      	adds	r3, #1
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	e7e8      	b.n	800cf1a <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800cf48:	4c1a      	ldr	r4, [pc, #104]	; (800cfb4 <RegionUS915InitDefaults+0x12c>)
 800cf4a:	6820      	ldr	r0, [r4, #0]
 800cf4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf50:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800cf54:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800cf58:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800cf5c:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800cf60:	23ff      	movs	r3, #255	; 0xff
 800cf62:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800cf66:	2300      	movs	r3, #0
 800cf68:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cf6c:	2206      	movs	r2, #6
 800cf6e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800cf72:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cf76:	f7ff fb91 	bl	800c69c <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800cf7a:	6821      	ldr	r1, [r4, #0]
 800cf7c:	2206      	movs	r2, #6
 800cf7e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800cf82:	4b0d      	ldr	r3, [pc, #52]	; (800cfb8 <RegionUS915InitDefaults+0x130>)
 800cf84:	6818      	ldr	r0, [r3, #0]
 800cf86:	f7ff fb89 	bl	800c69c <RegionCommonChanMaskCopy>
            break;
 800cf8a:	e010      	b.n	800cfae <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800cf8c:	4a0a      	ldr	r2, [pc, #40]	; (800cfb8 <RegionUS915InitDefaults+0x130>)
 800cf8e:	6811      	ldr	r1, [r2, #0]
 800cf90:	4a08      	ldr	r2, [pc, #32]	; (800cfb4 <RegionUS915InitDefaults+0x12c>)
 800cf92:	6812      	ldr	r2, [r2, #0]
 800cf94:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800cf98:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800cf9c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cfa0:	4002      	ands	r2, r0
 800cfa2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	2b05      	cmp	r3, #5
 800cfac:	d9ee      	bls.n	800cf8c <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800cfae:	b006      	add	sp, #24
 800cfb0:	bd10      	pop	{r4, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20000e2c 	.word	0x20000e2c
 800cfb8:	20000e28 	.word	0x20000e28
 800cfbc:	20000e24 	.word	0x20000e24
 800cfc0:	00030d40 	.word	0x00030d40
 800cfc4:	35c80160 	.word	0x35c80160
 800cfc8:	00186a00 	.word	0x00186a00
 800cfcc:	35d2afc0 	.word	0x35d2afc0

0800cfd0 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cfd0:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800cfd2:	290a      	cmp	r1, #10
 800cfd4:	d833      	bhi.n	800d03e <RegionUS915Verify+0x6e>
 800cfd6:	e8df f001 	tbb	[pc, r1]
 800cfda:	3206      	.short	0x3206
 800cfdc:	0a323232 	.word	0x0a323232
 800cfe0:	28321e14 	.word	0x28321e14
 800cfe4:	28          	.byte	0x28
 800cfe5:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800cfe6:	6800      	ldr	r0, [r0, #0]
 800cfe8:	f7ff fdf0 	bl	800cbcc <VerifyRfFreq>
 800cfec:	e028      	b.n	800d040 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800cfee:	2204      	movs	r2, #4
 800cff0:	2100      	movs	r1, #0
 800cff2:	f990 0000 	ldrsb.w	r0, [r0]
 800cff6:	f7ff fae0 	bl	800c5ba <RegionCommonValueInRange>
 800cffa:	3800      	subs	r0, #0
 800cffc:	bf18      	it	ne
 800cffe:	2001      	movne	r0, #1
 800d000:	e01e      	b.n	800d040 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d002:	2205      	movs	r2, #5
 800d004:	2100      	movs	r1, #0
 800d006:	f990 0000 	ldrsb.w	r0, [r0]
 800d00a:	f7ff fad6 	bl	800c5ba <RegionCommonValueInRange>
 800d00e:	3800      	subs	r0, #0
 800d010:	bf18      	it	ne
 800d012:	2001      	movne	r0, #1
 800d014:	e014      	b.n	800d040 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800d016:	220d      	movs	r2, #13
 800d018:	2108      	movs	r1, #8
 800d01a:	f990 0000 	ldrsb.w	r0, [r0]
 800d01e:	f7ff facc 	bl	800c5ba <RegionCommonValueInRange>
 800d022:	3800      	subs	r0, #0
 800d024:	bf18      	it	ne
 800d026:	2001      	movne	r0, #1
 800d028:	e00a      	b.n	800d040 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800d02a:	220e      	movs	r2, #14
 800d02c:	2100      	movs	r1, #0
 800d02e:	f990 0000 	ldrsb.w	r0, [r0]
 800d032:	f7ff fac2 	bl	800c5ba <RegionCommonValueInRange>
 800d036:	3800      	subs	r0, #0
 800d038:	bf18      	it	ne
 800d03a:	2001      	movne	r0, #1
 800d03c:	e000      	b.n	800d040 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800d03e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800d040:	bd08      	pop	{r3, pc}
	...

0800d044 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800d044:	7a03      	ldrb	r3, [r0, #8]
 800d046:	2b10      	cmp	r3, #16
 800d048:	d134      	bne.n	800d0b4 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800d04a:	6843      	ldr	r3, [r0, #4]
 800d04c:	7bdb      	ldrb	r3, [r3, #15]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d130      	bne.n	800d0b4 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800d052:	2200      	movs	r2, #0
 800d054:	4613      	mov	r3, r2
 800d056:	2a04      	cmp	r2, #4
 800d058:	d82b      	bhi.n	800d0b2 <RegionUS915ApplyCFList+0x6e>
{
 800d05a:	b530      	push	{r4, r5, lr}
 800d05c:	e010      	b.n	800d080 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800d05e:	4916      	ldr	r1, [pc, #88]	; (800d0b8 <RegionUS915ApplyCFList+0x74>)
 800d060:	680d      	ldr	r5, [r1, #0]
 800d062:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 800d066:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800d06a:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 800d06e:	4021      	ands	r1, r4
 800d070:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800d074:	3301      	adds	r3, #1
 800d076:	b2db      	uxtb	r3, r3
 800d078:	3202      	adds	r2, #2
 800d07a:	b2d2      	uxtb	r2, r2
 800d07c:	2b04      	cmp	r3, #4
 800d07e:	d817      	bhi.n	800d0b0 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800d080:	6841      	ldr	r1, [r0, #4]
 800d082:	4c0e      	ldr	r4, [pc, #56]	; (800d0bc <RegionUS915ApplyCFList+0x78>)
 800d084:	6824      	ldr	r4, [r4, #0]
 800d086:	469c      	mov	ip, r3
 800d088:	5c89      	ldrb	r1, [r1, r2]
 800d08a:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800d08e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800d092:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800d096:	4496      	add	lr, r2
 800d098:	f89e e001 	ldrb.w	lr, [lr, #1]
 800d09c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800d0a0:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800d0a4:	2b04      	cmp	r3, #4
 800d0a6:	d1da      	bne.n	800d05e <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800d0a8:	b2c9      	uxtb	r1, r1
 800d0aa:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800d0ae:	e7d6      	b.n	800d05e <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800d0b0:	bd30      	pop	{r4, r5, pc}
 800d0b2:	4770      	bx	lr
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	20000e28 	.word	0x20000e28
 800d0bc:	20000e2c 	.word	0x20000e2c

0800d0c0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800d0c4:	2204      	movs	r2, #4
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	6800      	ldr	r0, [r0, #0]
 800d0ca:	f7ff fad1 	bl	800c670 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800d0ce:	2801      	cmp	r0, #1
 800d0d0:	d031      	beq.n	800d136 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800d0d2:	792c      	ldrb	r4, [r5, #4]
 800d0d4:	b11c      	cbz	r4, 800d0de <RegionUS915ChanMaskSet+0x1e>
 800d0d6:	2c01      	cmp	r4, #1
 800d0d8:	d023      	beq.n	800d122 <RegionUS915ChanMaskSet+0x62>
 800d0da:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800d0dc:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d0de:	4e17      	ldr	r6, [pc, #92]	; (800d13c <RegionUS915ChanMaskSet+0x7c>)
 800d0e0:	6830      	ldr	r0, [r6, #0]
 800d0e2:	2206      	movs	r2, #6
 800d0e4:	6829      	ldr	r1, [r5, #0]
 800d0e6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d0ea:	f7ff fad7 	bl	800c69c <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800d0ee:	6830      	ldr	r0, [r6, #0]
 800d0f0:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 800d0f4:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d0fe:	e00c      	b.n	800d11a <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800d100:	4b0f      	ldr	r3, [pc, #60]	; (800d140 <RegionUS915ChanMaskSet+0x80>)
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800d108:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800d10c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 800d110:	400b      	ands	r3, r1
 800d112:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d116:	3401      	adds	r4, #1
 800d118:	b2e4      	uxtb	r4, r4
 800d11a:	2c05      	cmp	r4, #5
 800d11c:	d9f0      	bls.n	800d100 <RegionUS915ChanMaskSet+0x40>
    return true;
 800d11e:	2001      	movs	r0, #1
 800d120:	e7dc      	b.n	800d0dc <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d122:	4b06      	ldr	r3, [pc, #24]	; (800d13c <RegionUS915ChanMaskSet+0x7c>)
 800d124:	6818      	ldr	r0, [r3, #0]
 800d126:	2206      	movs	r2, #6
 800d128:	6829      	ldr	r1, [r5, #0]
 800d12a:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800d12e:	f7ff fab5 	bl	800c69c <RegionCommonChanMaskCopy>
    return true;
 800d132:	2001      	movs	r0, #1
            break;
 800d134:	e7d2      	b.n	800d0dc <RegionUS915ChanMaskSet+0x1c>
        return false;
 800d136:	2000      	movs	r0, #0
 800d138:	e7d0      	b.n	800d0dc <RegionUS915ChanMaskSet+0x1c>
 800d13a:	bf00      	nop
 800d13c:	20000e2c 	.word	0x20000e2c
 800d140:	20000e28 	.word	0x20000e28

0800d144 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d146:	b083      	sub	sp, #12
 800d148:	460e      	mov	r6, r1
 800d14a:	4617      	mov	r7, r2
 800d14c:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800d14e:	280d      	cmp	r0, #13
 800d150:	bfa8      	it	ge
 800d152:	200d      	movge	r0, #13
 800d154:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800d156:	4d0f      	ldr	r5, [pc, #60]	; (800d194 <RegionUS915ComputeRxWindowParameters+0x50>)
 800d158:	4629      	mov	r1, r5
 800d15a:	f7ff fcf3 	bl	800cb44 <RegionCommonGetBandwidth>
 800d15e:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800d160:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d164:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800d168:	4a0b      	ldr	r2, [pc, #44]	; (800d198 <RegionUS915ComputeRxWindowParameters+0x54>)
 800d16a:	5cd0      	ldrb	r0, [r2, r3]
 800d16c:	f7ff fbbc 	bl	800c8e8 <RegionCommonComputeSymbolTimeLoRa>
 800d170:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d172:	4b0a      	ldr	r3, [pc, #40]	; (800d19c <RegionUS915ComputeRxWindowParameters+0x58>)
 800d174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d176:	4798      	blx	r3
 800d178:	4603      	mov	r3, r0
 800d17a:	f104 020c 	add.w	r2, r4, #12
 800d17e:	9201      	str	r2, [sp, #4]
 800d180:	3408      	adds	r4, #8
 800d182:	9400      	str	r4, [sp, #0]
 800d184:	463a      	mov	r2, r7
 800d186:	4631      	mov	r1, r6
 800d188:	4628      	mov	r0, r5
 800d18a:	f7ff fbb5 	bl	800c8f8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800d18e:	b003      	add	sp, #12
 800d190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d192:	bf00      	nop
 800d194:	08011728 	.word	0x08011728
 800d198:	0801177c 	.word	0x0801177c
 800d19c:	08011d10 	.word	0x08011d10

0800d1a0 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d1a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1a4:	b08b      	sub	sp, #44	; 0x2c
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800d1aa:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d1ae:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d1b0:	4b22      	ldr	r3, [pc, #136]	; (800d23c <RegionUS915RxConfig+0x9c>)
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	4798      	blx	r3
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d13d      	bne.n	800d236 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d1ba:	7ce3      	ldrb	r3, [r4, #19]
 800d1bc:	b933      	cbnz	r3, 800d1cc <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800d1be:	7827      	ldrb	r7, [r4, #0]
 800d1c0:	f007 0307 	and.w	r3, r7, #7
 800d1c4:	4a1e      	ldr	r2, [pc, #120]	; (800d240 <RegionUS915RxConfig+0xa0>)
 800d1c6:	4f1f      	ldr	r7, [pc, #124]	; (800d244 <RegionUS915RxConfig+0xa4>)
 800d1c8:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800d1cc:	4b1e      	ldr	r3, [pc, #120]	; (800d248 <RegionUS915RxConfig+0xa8>)
 800d1ce:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800d1d2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800d23c <RegionUS915RxConfig+0x9c>
 800d1d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1da:	4638      	mov	r0, r7
 800d1dc:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d1de:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800d1e2:	7ca3      	ldrb	r3, [r4, #18]
 800d1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	9008      	str	r0, [sp, #32]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	9207      	str	r2, [sp, #28]
 800d1ee:	9206      	str	r2, [sp, #24]
 800d1f0:	9205      	str	r2, [sp, #20]
 800d1f2:	9204      	str	r2, [sp, #16]
 800d1f4:	9203      	str	r2, [sp, #12]
 800d1f6:	8923      	ldrh	r3, [r4, #8]
 800d1f8:	9302      	str	r3, [sp, #8]
 800d1fa:	2308      	movs	r3, #8
 800d1fc:	9301      	str	r3, [sp, #4]
 800d1fe:	9200      	str	r2, [sp, #0]
 800d200:	4603      	mov	r3, r0
 800d202:	464a      	mov	r2, r9
 800d204:	78a1      	ldrb	r1, [r4, #2]
 800d206:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800d208:	7c63      	ldrb	r3, [r4, #17]
 800d20a:	b18b      	cbz	r3, 800d230 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800d20c:	4b0f      	ldr	r3, [pc, #60]	; (800d24c <RegionUS915RxConfig+0xac>)
 800d20e:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d210:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <RegionUS915RxConfig+0x9c>)
 800d212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d214:	310d      	adds	r1, #13
 800d216:	b2c9      	uxtb	r1, r1
 800d218:	2001      	movs	r0, #1
 800d21a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d21c:	4632      	mov	r2, r6
 800d21e:	4639      	mov	r1, r7
 800d220:	7ce0      	ldrb	r0, [r4, #19]
 800d222:	f7ff fca1 	bl	800cb68 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800d226:	702e      	strb	r6, [r5, #0]
    return true;
 800d228:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800d22a:	b00b      	add	sp, #44	; 0x2c
 800d22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800d230:	4b07      	ldr	r3, [pc, #28]	; (800d250 <RegionUS915RxConfig+0xb0>)
 800d232:	5d99      	ldrb	r1, [r3, r6]
 800d234:	e7ec      	b.n	800d210 <RegionUS915RxConfig+0x70>
        return false;
 800d236:	2000      	movs	r0, #0
 800d238:	e7f7      	b.n	800d22a <RegionUS915RxConfig+0x8a>
 800d23a:	bf00      	nop
 800d23c:	08011d10 	.word	0x08011d10
 800d240:	000927c0 	.word	0x000927c0
 800d244:	370870a0 	.word	0x370870a0
 800d248:	0801177c 	.word	0x0801177c
 800d24c:	0801178c 	.word	0x0801178c
 800d250:	0801179c 	.word	0x0801179c

0800d254 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d258:	b08d      	sub	sp, #52	; 0x34
 800d25a:	4604      	mov	r4, r0
 800d25c:	468b      	mov	fp, r1
 800d25e:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800d260:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800d264:	4b32      	ldr	r3, [pc, #200]	; (800d330 <RegionUS915TxConfig+0xdc>)
 800d266:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800d26a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800d334 <RegionUS915TxConfig+0xe0>
 800d26e:	f8d9 3000 	ldr.w	r3, [r9]
 800d272:	7801      	ldrb	r1, [r0, #0]
 800d274:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d278:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d27c:	7a49      	ldrb	r1, [r1, #9]
 800d27e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d282:	482d      	ldr	r0, [pc, #180]	; (800d338 <RegionUS915TxConfig+0xe4>)
 800d284:	6800      	ldr	r0, [r0, #0]
 800d286:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d28a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800d28e:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800d292:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800d296:	f7ff fce7 	bl	800cc68 <LimitTxPower>
 800d29a:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800d29c:	4927      	ldr	r1, [pc, #156]	; (800d33c <RegionUS915TxConfig+0xe8>)
 800d29e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d2a2:	f7ff fc4f 	bl	800cb44 <RegionCommonGetBandwidth>
 800d2a6:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	4925      	ldr	r1, [pc, #148]	; (800d340 <RegionUS915TxConfig+0xec>)
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7ff fb5f 	bl	800c970 <RegionCommonComputeTxPower>
 800d2b2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d2b4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800d344 <RegionUS915TxConfig+0xf0>
 800d2b8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800d2bc:	f8d9 1000 	ldr.w	r1, [r9]
 800d2c0:	7823      	ldrb	r3, [r4, #0]
 800d2c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d2c6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d2ca:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d2cc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d2d0:	9308      	str	r3, [sp, #32]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	9207      	str	r2, [sp, #28]
 800d2d6:	9206      	str	r2, [sp, #24]
 800d2d8:	9205      	str	r2, [sp, #20]
 800d2da:	2501      	movs	r5, #1
 800d2dc:	9504      	str	r5, [sp, #16]
 800d2de:	9203      	str	r2, [sp, #12]
 800d2e0:	2308      	movs	r3, #8
 800d2e2:	9302      	str	r3, [sp, #8]
 800d2e4:	9501      	str	r5, [sp, #4]
 800d2e6:	f8cd a000 	str.w	sl, [sp]
 800d2ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800d2f4:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d2f6:	f8d9 2000 	ldr.w	r2, [r9]
 800d2fa:	7823      	ldrb	r3, [r4, #0]
 800d2fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d300:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d304:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d308:	f7ff fc50 	bl	800cbac <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800d30c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800d310:	7b21      	ldrb	r1, [r4, #12]
 800d312:	4628      	mov	r0, r5
 800d314:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d316:	89a1      	ldrh	r1, [r4, #12]
 800d318:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d31c:	f7ff fc86 	bl	800cc2c <GetTimeOnAir>
 800d320:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800d322:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800d326:	4628      	mov	r0, r5
 800d328:	b00d      	add	sp, #52	; 0x34
 800d32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32e:	bf00      	nop
 800d330:	0801177c 	.word	0x0801177c
 800d334:	20000e2c 	.word	0x20000e2c
 800d338:	20000e24 	.word	0x20000e24
 800d33c:	08011728 	.word	0x08011728
 800d340:	41f00000 	.word	0x41f00000
 800d344:	08011d10 	.word	0x08011d10

0800d348 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d34c:	b091      	sub	sp, #68	; 0x44
 800d34e:	4605      	mov	r5, r0
 800d350:	4688      	mov	r8, r1
 800d352:	4617      	mov	r7, r2
 800d354:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d356:	2400      	movs	r4, #0
 800d358:	940e      	str	r4, [sp, #56]	; 0x38
 800d35a:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800d35e:	940b      	str	r4, [sp, #44]	; 0x2c
 800d360:	940c      	str	r4, [sp, #48]	; 0x30
 800d362:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800d364:	4b97      	ldr	r3, [pc, #604]	; (800d5c4 <RegionUS915LinkAdrReq+0x27c>)
 800d366:	6819      	ldr	r1, [r3, #0]
 800d368:	2206      	movs	r2, #6
 800d36a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800d36e:	a80b      	add	r0, sp, #44	; 0x2c
 800d370:	f7ff f994 	bl	800c69c <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d374:	e00d      	b.n	800d392 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800d376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d37a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800d37e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800d382:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800d386:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d38a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800d38e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d392:	7a2b      	ldrb	r3, [r5, #8]
 800d394:	42a3      	cmp	r3, r4
 800d396:	f240 8081 	bls.w	800d49c <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d39a:	6868      	ldr	r0, [r5, #4]
 800d39c:	a90e      	add	r1, sp, #56	; 0x38
 800d39e:	4420      	add	r0, r4
 800d3a0:	f7ff fa2c 	bl	800c7fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d079      	beq.n	800d49c <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800d3a8:	4404      	add	r4, r0
 800d3aa:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800d3ac:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800d3b0:	f1bc 0f06 	cmp.w	ip, #6
 800d3b4:	d0df      	beq.n	800d376 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800d3b6:	f1bc 0f07 	cmp.w	ip, #7
 800d3ba:	d00a      	beq.n	800d3d2 <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800d3bc:	f1bc 0f05 	cmp.w	ip, #5
 800d3c0:	d068      	beq.n	800d494 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800d3c2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d3c6:	aa10      	add	r2, sp, #64	; 0x40
 800d3c8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800d3cc:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800d3d0:	e7df      	b.n	800d392 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800d3d8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800d3dc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800d3e0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d3e4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800d3e8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d3ec:	e7d1      	b.n	800d392 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800d3ee:	aa10      	add	r2, sp, #64	; 0x40
 800d3f0:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d3f4:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d3f8:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800d3fc:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d400:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d404:	4313      	orrs	r3, r2
 800d406:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800d40a:	3101      	adds	r1, #1
 800d40c:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800d40e:	f10c 0c01 	add.w	ip, ip, #1
 800d412:	fa5f fc8c 	uxtb.w	ip, ip
 800d416:	f1bc 0f07 	cmp.w	ip, #7
 800d41a:	d8ba      	bhi.n	800d392 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800d41c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800d420:	2301      	movs	r3, #1
 800d422:	fa03 f30c 	lsl.w	r3, r3, ip
 800d426:	421a      	tst	r2, r3
 800d428:	d011      	beq.n	800d44e <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800d42a:	f01c 0f01 	tst.w	ip, #1
 800d42e:	d1de      	bne.n	800d3ee <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800d430:	aa10      	add	r2, sp, #64	; 0x40
 800d432:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d436:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d43a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800d43e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d442:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d446:	4313      	orrs	r3, r2
 800d448:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d44c:	e7df      	b.n	800d40e <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800d44e:	f01c 0f01 	tst.w	ip, #1
 800d452:	d10f      	bne.n	800d474 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800d454:	aa10      	add	r2, sp, #64	; 0x40
 800d456:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d45a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d45e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d462:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d466:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d46a:	ea22 0303 	bic.w	r3, r2, r3
 800d46e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d472:	e7cc      	b.n	800d40e <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800d474:	aa10      	add	r2, sp, #64	; 0x40
 800d476:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800d47a:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800d47e:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d482:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d486:	ea22 0303 	bic.w	r3, r2, r3
 800d48a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800d48e:	3101      	adds	r1, #1
 800d490:	b2c9      	uxtb	r1, r1
 800d492:	e7bc      	b.n	800d40e <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800d494:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800d498:	4661      	mov	r1, ip
 800d49a:	e7bc      	b.n	800d416 <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d49c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d4a0:	2b03      	cmp	r3, #3
 800d4a2:	dd58      	ble.n	800d556 <RegionUS915LinkAdrReq+0x20e>
 800d4a4:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d4ae:	7a6b      	ldrb	r3, [r5, #9]
 800d4b0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800d4b4:	a809      	add	r0, sp, #36	; 0x24
 800d4b6:	f7ff fbf3 	bl	800cca0 <RegionUS915GetPhyParam>
 800d4ba:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800d4bc:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d4c0:	7aab      	ldrb	r3, [r5, #10]
 800d4c2:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d4c6:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d4ca:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d4ce:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800d4d2:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d4d6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d4da:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d4de:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800d4e2:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d4e6:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d4ea:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d4ee:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d4f2:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800d4f6:	2348      	movs	r3, #72	; 0x48
 800d4f8:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800d4fc:	ab0b      	add	r3, sp, #44	; 0x2c
 800d4fe:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d500:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800d504:	2304      	movs	r3, #4
 800d506:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d50a:	4b2e      	ldr	r3, [pc, #184]	; (800d5c4 <RegionUS915LinkAdrReq+0x27c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800d510:	230e      	movs	r3, #14
 800d512:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800d516:	2300      	movs	r3, #0
 800d518:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d51c:	682b      	ldr	r3, [r5, #0]
 800d51e:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d520:	ab0e      	add	r3, sp, #56	; 0x38
 800d522:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800d526:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800d52a:	4668      	mov	r0, sp
 800d52c:	f7ff f984 	bl	800c838 <RegionCommonLinkAdrReqVerifyParams>
 800d530:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d532:	2807      	cmp	r0, #7
 800d534:	d01c      	beq.n	800d570 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d536:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d53a:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800d53e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800d542:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800d544:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d548:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800d54a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d54c:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800d54e:	4628      	mov	r0, r5
 800d550:	b011      	add	sp, #68	; 0x44
 800d552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d556:	2204      	movs	r2, #4
 800d558:	2100      	movs	r1, #0
 800d55a:	a80b      	add	r0, sp, #44	; 0x2c
 800d55c:	f7ff f888 	bl	800c670 <RegionCommonCountChannels>
 800d560:	2801      	cmp	r0, #1
 800d562:	d902      	bls.n	800d56a <RegionUS915LinkAdrReq+0x222>
 800d564:	f04f 0907 	mov.w	r9, #7
 800d568:	e79e      	b.n	800d4a8 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800d56a:	f04f 0906 	mov.w	r9, #6
 800d56e:	e79b      	b.n	800d4a8 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800d570:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800d5c4 <RegionUS915LinkAdrReq+0x27c>
 800d574:	f8d9 0000 	ldr.w	r0, [r9]
 800d578:	2206      	movs	r2, #6
 800d57a:	a90b      	add	r1, sp, #44	; 0x2c
 800d57c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d580:	f7ff f88c 	bl	800c69c <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800d584:	4b10      	ldr	r3, [pc, #64]	; (800d5c8 <RegionUS915LinkAdrReq+0x280>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f8d9 2000 	ldr.w	r2, [r9]
 800d58c:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800d590:	8818      	ldrh	r0, [r3, #0]
 800d592:	4001      	ands	r1, r0
 800d594:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800d596:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800d59a:	8858      	ldrh	r0, [r3, #2]
 800d59c:	4001      	ands	r1, r0
 800d59e:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800d5a0:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800d5a4:	8898      	ldrh	r0, [r3, #4]
 800d5a6:	4001      	ands	r1, r0
 800d5a8:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800d5aa:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800d5ae:	88d8      	ldrh	r0, [r3, #6]
 800d5b0:	4001      	ands	r1, r0
 800d5b2:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d5b4:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800d5b8:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800d5ba:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800d5be:	815a      	strh	r2, [r3, #10]
 800d5c0:	e7b9      	b.n	800d536 <RegionUS915LinkAdrReq+0x1ee>
 800d5c2:	bf00      	nop
 800d5c4:	20000e2c 	.word	0x20000e2c
 800d5c8:	20000e28 	.word	0x20000e28

0800d5cc <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800d5d0:	6840      	ldr	r0, [r0, #4]
 800d5d2:	f7ff fafb 	bl	800cbcc <VerifyRfFreq>
 800d5d6:	b310      	cbz	r0, 800d61e <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800d5d8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800d5da:	220d      	movs	r2, #13
 800d5dc:	2108      	movs	r1, #8
 800d5de:	f994 0000 	ldrsb.w	r0, [r4]
 800d5e2:	f7fe ffea 	bl	800c5ba <RegionCommonValueInRange>
 800d5e6:	b908      	cbnz	r0, 800d5ec <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800d5e8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d5ec:	2207      	movs	r2, #7
 800d5ee:	2105      	movs	r1, #5
 800d5f0:	f994 0000 	ldrsb.w	r0, [r4]
 800d5f4:	f7fe ffe1 	bl	800c5ba <RegionCommonValueInRange>
 800d5f8:	2801      	cmp	r0, #1
 800d5fa:	d003      	beq.n	800d604 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800d5fc:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d600:	2b0d      	cmp	r3, #13
 800d602:	dd01      	ble.n	800d608 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800d604:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800d608:	2203      	movs	r2, #3
 800d60a:	2100      	movs	r1, #0
 800d60c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d610:	f7fe ffd3 	bl	800c5ba <RegionCommonValueInRange>
 800d614:	b908      	cbnz	r0, 800d61a <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d616:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800d61a:	4628      	mov	r0, r5
 800d61c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d61e:	2506      	movs	r5, #6
 800d620:	e7db      	b.n	800d5da <RegionUS915RxParamSetupReq+0xe>

0800d622 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d622:	f04f 30ff 	mov.w	r0, #4294967295
 800d626:	4770      	bx	lr

0800d628 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d628:	f04f 30ff 	mov.w	r0, #4294967295
 800d62c:	4770      	bx	lr

0800d62e <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d62e:	f04f 30ff 	mov.w	r0, #4294967295
 800d632:	4770      	bx	lr

0800d634 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800d634:	b999      	cbnz	r1, 800d65e <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800d636:	4b0e      	ldr	r3, [pc, #56]	; (800d670 <RegionUS915AlternateDr+0x3c>)
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	7b53      	ldrb	r3, [r2, #13]
 800d63c:	3301      	adds	r3, #1
 800d63e:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800d640:	4b0b      	ldr	r3, [pc, #44]	; (800d670 <RegionUS915AlternateDr+0x3c>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	7b5a      	ldrb	r2, [r3, #13]
 800d646:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <RegionUS915AlternateDr+0x40>)
 800d648:	fba3 1302 	umull	r1, r3, r3, r2
 800d64c:	085b      	lsrs	r3, r3, #1
 800d64e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d658:	d007      	beq.n	800d66a <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800d65a:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800d65c:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800d65e:	4b04      	ldr	r3, [pc, #16]	; (800d670 <RegionUS915AlternateDr+0x3c>)
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	7b53      	ldrb	r3, [r2, #13]
 800d664:	3b01      	subs	r3, #1
 800d666:	7353      	strb	r3, [r2, #13]
 800d668:	e7ea      	b.n	800d640 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 800d66a:	2004      	movs	r0, #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	20000e28 	.word	0x20000e28
 800d674:	38e38e39 	.word	0x38e38e39

0800d678 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d67c:	b0a4      	sub	sp, #144	; 0x90
 800d67e:	4604      	mov	r4, r0
 800d680:	460e      	mov	r6, r1
 800d682:	4690      	mov	r8, r2
 800d684:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800d686:	2500      	movs	r5, #0
 800d688:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800d68c:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800d690:	9511      	str	r5, [sp, #68]	; 0x44
 800d692:	2244      	movs	r2, #68	; 0x44
 800d694:	4629      	mov	r1, r5
 800d696:	a812      	add	r0, sp, #72	; 0x48
 800d698:	f003 fc2a 	bl	8010ef0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800d69c:	2204      	movs	r2, #4
 800d69e:	4629      	mov	r1, r5
 800d6a0:	4b49      	ldr	r3, [pc, #292]	; (800d7c8 <RegionUS915NextChannel+0x150>)
 800d6a2:	6818      	ldr	r0, [r3, #0]
 800d6a4:	f7fe ffe4 	bl	800c670 <RegionCommonCountChannels>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d052      	beq.n	800d752 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800d6ac:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d6b0:	2b03      	cmp	r3, #3
 800d6b2:	dd08      	ble.n	800d6c6 <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800d6b4:	4b44      	ldr	r3, [pc, #272]	; (800d7c8 <RegionUS915NextChannel+0x150>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	7a1a      	ldrb	r2, [r3, #8]
 800d6ba:	b922      	cbnz	r2, 800d6c6 <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d6bc:	4a43      	ldr	r2, [pc, #268]	; (800d7cc <RegionUS915NextChannel+0x154>)
 800d6be:	6812      	ldr	r2, [r2, #0]
 800d6c0:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800d6c4:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d6c6:	7a63      	ldrb	r3, [r4, #9]
 800d6c8:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d6cc:	7a23      	ldrb	r3, [r4, #8]
 800d6ce:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800d6d2:	4b3d      	ldr	r3, [pc, #244]	; (800d7c8 <RegionUS915NextChannel+0x150>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d6d8:	4b3c      	ldr	r3, [pc, #240]	; (800d7cc <RegionUS915NextChannel+0x154>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800d6de:	4b3c      	ldr	r3, [pc, #240]	; (800d7d0 <RegionUS915NextChannel+0x158>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800d6e4:	2348      	movs	r3, #72	; 0x48
 800d6e6:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d6f2:	6863      	ldr	r3, [r4, #4]
 800d6f4:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d6f6:	7aa3      	ldrb	r3, [r4, #10]
 800d6f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d702:	ab03      	add	r3, sp, #12
 800d704:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d706:	ab0c      	add	r3, sp, #48	; 0x30
 800d708:	f104 020c 	add.w	r2, r4, #12
 800d70c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d710:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d714:	7d23      	ldrb	r3, [r4, #20]
 800d716:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d71a:	8ae1      	ldrh	r1, [r4, #22]
 800d71c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d720:	f7ff fa84 	bl	800cc2c <GetTimeOnAir>
 800d724:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d726:	f8cd 8004 	str.w	r8, [sp, #4]
 800d72a:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800d72e:	9300      	str	r3, [sp, #0]
 800d730:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800d734:	aa11      	add	r2, sp, #68	; 0x44
 800d736:	4639      	mov	r1, r7
 800d738:	a809      	add	r0, sp, #36	; 0x24
 800d73a:	f7ff f995 	bl	800ca68 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d73e:	4605      	mov	r5, r0
 800d740:	2800      	cmp	r0, #0
 800d742:	d13c      	bne.n	800d7be <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 800d744:	7a63      	ldrb	r3, [r4, #9]
 800d746:	b98b      	cbnz	r3, 800d76c <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800d748:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d74c:	b1db      	cbz	r3, 800d786 <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800d74e:	4603      	mov	r3, r0
 800d750:	e026      	b.n	800d7a0 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800d752:	4d1d      	ldr	r5, [pc, #116]	; (800d7c8 <RegionUS915NextChannel+0x150>)
 800d754:	4b1d      	ldr	r3, [pc, #116]	; (800d7cc <RegionUS915NextChannel+0x154>)
 800d756:	6819      	ldr	r1, [r3, #0]
 800d758:	2204      	movs	r2, #4
 800d75a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800d75e:	6828      	ldr	r0, [r5, #0]
 800d760:	f7fe ff9c 	bl	800c69c <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800d764:	682b      	ldr	r3, [r5, #0]
 800d766:	2200      	movs	r2, #0
 800d768:	731a      	strb	r2, [r3, #12]
 800d76a:	e79f      	b.n	800d6ac <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d76c:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800d770:	3901      	subs	r1, #1
 800d772:	f000 ff2f 	bl	800e5d4 <randr>
 800d776:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800d77a:	eb0d 0003 	add.w	r0, sp, r3
 800d77e:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800d782:	7033      	strb	r3, [r6, #0]
 800d784:	e015      	b.n	800d7b2 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800d786:	4b10      	ldr	r3, [pc, #64]	; (800d7c8 <RegionUS915NextChannel+0x150>)
 800d788:	6818      	ldr	r0, [r3, #0]
 800d78a:	4632      	mov	r2, r6
 800d78c:	f100 010c 	add.w	r1, r0, #12
 800d790:	f7fe fdf6 	bl	800c380 <RegionBaseUSComputeNext125kHzJoinChannel>
 800d794:	2803      	cmp	r0, #3
 800d796:	d10c      	bne.n	800d7b2 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800d798:	4605      	mov	r5, r0
 800d79a:	e010      	b.n	800d7be <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800d79c:	3301      	adds	r3, #1
 800d79e:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800d7a0:	4a09      	ldr	r2, [pc, #36]	; (800d7c8 <RegionUS915NextChannel+0x150>)
 800d7a2:	6812      	ldr	r2, [r2, #0]
 800d7a4:	7a10      	ldrb	r0, [r2, #8]
 800d7a6:	4118      	asrs	r0, r3
 800d7a8:	f010 0f01 	tst.w	r0, #1
 800d7ac:	d0f6      	beq.n	800d79c <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 800d7ae:	3340      	adds	r3, #64	; 0x40
 800d7b0:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800d7b2:	2248      	movs	r2, #72	; 0x48
 800d7b4:	7831      	ldrb	r1, [r6, #0]
 800d7b6:	4b04      	ldr	r3, [pc, #16]	; (800d7c8 <RegionUS915NextChannel+0x150>)
 800d7b8:	6818      	ldr	r0, [r3, #0]
 800d7ba:	f7fe ff40 	bl	800c63e <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800d7be:	4628      	mov	r0, r5
 800d7c0:	b024      	add	sp, #144	; 0x90
 800d7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20000e28 	.word	0x20000e28
 800d7cc:	20000e2c 	.word	0x20000e2c
 800d7d0:	20000e24 	.word	0x20000e24

0800d7d4 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800d7d4:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <RegionUS915ApplyDrOffset+0x14>)
 800d7d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d7da:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	db01      	blt.n	800d7e4 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800d7e0:	b2c0      	uxtb	r0, r0
 800d7e2:	4770      	bx	lr
        datarate = DR_0;
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	e7fb      	b.n	800d7e0 <RegionUS915ApplyDrOffset+0xc>
 800d7e8:	08011768 	.word	0x08011768

0800d7ec <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d7ec:	b510      	push	{r4, lr}
 800d7ee:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800d7f0:	2210      	movs	r2, #16
 800d7f2:	2100      	movs	r1, #0
 800d7f4:	30f1      	adds	r0, #241	; 0xf1
 800d7f6:	f000 ff12 	bl	800e61e <memset1>
    ctx->M_n = 0;
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d800:	22f0      	movs	r2, #240	; 0xf0
 800d802:	4620      	mov	r0, r4
 800d804:	f000 ff0b 	bl	800e61e <memset1>
}
 800d808:	bd10      	pop	{r4, pc}

0800d80a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d80a:	b508      	push	{r3, lr}
 800d80c:	4602      	mov	r2, r0
 800d80e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d810:	2110      	movs	r1, #16
 800d812:	f000 fb3b 	bl	800de8c <lorawan_aes_set_key>
}
 800d816:	bd08      	pop	{r3, pc}

0800d818 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	4604      	mov	r4, r0
 800d820:	460d      	mov	r5, r1
 800d822:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d824:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d054      	beq.n	800d8d6 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d82c:	f1c3 0810 	rsb	r8, r3, #16
 800d830:	4647      	mov	r7, r8
 800d832:	4590      	cmp	r8, r2
 800d834:	bf28      	it	cs
 800d836:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d838:	f200 1001 	addw	r0, r0, #257	; 0x101
 800d83c:	b2ba      	uxth	r2, r7
 800d83e:	4418      	add	r0, r3
 800d840:	f000 fed5 	bl	800e5ee <memcpy1>
        ctx->M_n += mlen;
 800d844:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800d848:	443b      	add	r3, r7
 800d84a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d84e:	2b0f      	cmp	r3, #15
 800d850:	d94d      	bls.n	800d8ee <AES_CMAC_Update+0xd6>
 800d852:	45b0      	cmp	r8, r6
 800d854:	d24b      	bcs.n	800d8ee <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800d856:	2300      	movs	r3, #0
 800d858:	e008      	b.n	800d86c <AES_CMAC_Update+0x54>
 800d85a:	18e2      	adds	r2, r4, r3
 800d85c:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800d860:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800d864:	4041      	eors	r1, r0
 800d866:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800d86a:	3301      	adds	r3, #1
 800d86c:	2b0f      	cmp	r3, #15
 800d86e:	ddf4      	ble.n	800d85a <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d870:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800d874:	2210      	movs	r2, #16
 800d876:	4641      	mov	r1, r8
 800d878:	4668      	mov	r0, sp
 800d87a:	f000 feb8 	bl	800e5ee <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d87e:	4622      	mov	r2, r4
 800d880:	4669      	mov	r1, sp
 800d882:	4668      	mov	r0, sp
 800d884:	f000 fb84 	bl	800df90 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d888:	2210      	movs	r2, #16
 800d88a:	4669      	mov	r1, sp
 800d88c:	4640      	mov	r0, r8
 800d88e:	f000 feae 	bl	800e5ee <memcpy1>

        data += mlen;
 800d892:	443d      	add	r5, r7
        len -= mlen;
 800d894:	1bf6      	subs	r6, r6, r7
 800d896:	e01e      	b.n	800d8d6 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800d898:	eb04 0e03 	add.w	lr, r4, r3
 800d89c:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800d8a0:	5cea      	ldrb	r2, [r5, r3]
 800d8a2:	ea8c 0c02 	eor.w	ip, ip, r2
 800d8a6:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	2b0f      	cmp	r3, #15
 800d8ae:	ddf3      	ble.n	800d898 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d8b0:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800d8b4:	2210      	movs	r2, #16
 800d8b6:	4639      	mov	r1, r7
 800d8b8:	4668      	mov	r0, sp
 800d8ba:	f000 fe98 	bl	800e5ee <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d8be:	4622      	mov	r2, r4
 800d8c0:	4669      	mov	r1, sp
 800d8c2:	4668      	mov	r0, sp
 800d8c4:	f000 fb64 	bl	800df90 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d8c8:	2210      	movs	r2, #16
 800d8ca:	4669      	mov	r1, sp
 800d8cc:	4638      	mov	r0, r7
 800d8ce:	f000 fe8e 	bl	800e5ee <memcpy1>

        data += 16;
 800d8d2:	3510      	adds	r5, #16
        len -= 16;
 800d8d4:	3e10      	subs	r6, #16
    while( len > 16 )
 800d8d6:	2e10      	cmp	r6, #16
 800d8d8:	d901      	bls.n	800d8de <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800d8da:	2300      	movs	r3, #0
 800d8dc:	e7e6      	b.n	800d8ac <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d8de:	b2b2      	uxth	r2, r6
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	f204 1001 	addw	r0, r4, #257	; 0x101
 800d8e6:	f000 fe82 	bl	800e5ee <memcpy1>
    ctx->M_n = len;
 800d8ea:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800d8ee:	b004      	add	sp, #16
 800d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d8f4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d8f4:	b530      	push	{r4, r5, lr}
 800d8f6:	b089      	sub	sp, #36	; 0x24
 800d8f8:	4605      	mov	r5, r0
 800d8fa:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d8fc:	2210      	movs	r2, #16
 800d8fe:	2100      	movs	r1, #0
 800d900:	eb0d 0002 	add.w	r0, sp, r2
 800d904:	f000 fe8b 	bl	800e61e <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d908:	4622      	mov	r2, r4
 800d90a:	a904      	add	r1, sp, #16
 800d90c:	4608      	mov	r0, r1
 800d90e:	f000 fb3f 	bl	800df90 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d912:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d916:	2b00      	cmp	r3, #0
 800d918:	db01      	blt.n	800d91e <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800d91a:	2300      	movs	r3, #0
 800d91c:	e030      	b.n	800d980 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800d91e:	2300      	movs	r3, #0
 800d920:	2b0e      	cmp	r3, #14
 800d922:	dc11      	bgt.n	800d948 <AES_CMAC_Final+0x54>
 800d924:	f103 0220 	add.w	r2, r3, #32
 800d928:	eb0d 0102 	add.w	r1, sp, r2
 800d92c:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d930:	3301      	adds	r3, #1
 800d932:	f103 0220 	add.w	r2, r3, #32
 800d936:	446a      	add	r2, sp
 800d938:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d93c:	09d2      	lsrs	r2, r2, #7
 800d93e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d942:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d946:	e7eb      	b.n	800d920 <AES_CMAC_Final+0x2c>
 800d948:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800d954:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800d958:	f88d 301f 	strb.w	r3, [sp, #31]
 800d95c:	e017      	b.n	800d98e <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800d95e:	f103 0220 	add.w	r2, r3, #32
 800d962:	eb0d 0102 	add.w	r1, sp, r2
 800d966:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d96a:	3301      	adds	r3, #1
 800d96c:	f103 0220 	add.w	r2, r3, #32
 800d970:	446a      	add	r2, sp
 800d972:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d976:	09d2      	lsrs	r2, r2, #7
 800d978:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d97c:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d980:	2b0e      	cmp	r3, #14
 800d982:	ddec      	ble.n	800d95e <AES_CMAC_Final+0x6a>
 800d984:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800d98e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800d992:	2810      	cmp	r0, #16
 800d994:	d014      	beq.n	800d9c0 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d996:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	db30      	blt.n	800da00 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e041      	b.n	800da26 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800d9a2:	18e1      	adds	r1, r4, r3
 800d9a4:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800d9a8:	f103 0020 	add.w	r0, r3, #32
 800d9ac:	4468      	add	r0, sp
 800d9ae:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800d9b2:	4042      	eors	r2, r0
 800d9b4:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	2b0f      	cmp	r3, #15
 800d9bc:	ddf1      	ble.n	800d9a2 <AES_CMAC_Final+0xae>
 800d9be:	e059      	b.n	800da74 <AES_CMAC_Final+0x180>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	e7fa      	b.n	800d9ba <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800d9c4:	f103 0220 	add.w	r2, r3, #32
 800d9c8:	eb0d 0102 	add.w	r1, sp, r2
 800d9cc:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	f103 0220 	add.w	r2, r3, #32
 800d9d6:	446a      	add	r2, sp
 800d9d8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d9dc:	09d2      	lsrs	r2, r2, #7
 800d9de:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800d9e2:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d9e6:	2b0e      	cmp	r3, #14
 800d9e8:	ddec      	ble.n	800d9c4 <AES_CMAC_Final+0xd0>
 800d9ea:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800d9f6:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800d9fa:	f88d 301f 	strb.w	r3, [sp, #31]
 800d9fe:	e019      	b.n	800da34 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800da00:	2300      	movs	r3, #0
 800da02:	e7f0      	b.n	800d9e6 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800da04:	f103 0220 	add.w	r2, r3, #32
 800da08:	eb0d 0102 	add.w	r1, sp, r2
 800da0c:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800da10:	3301      	adds	r3, #1
 800da12:	f103 0220 	add.w	r2, r3, #32
 800da16:	446a      	add	r2, sp
 800da18:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800da1c:	09d2      	lsrs	r2, r2, #7
 800da1e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800da22:	f801 2c10 	strb.w	r2, [r1, #-16]
 800da26:	2b0e      	cmp	r3, #14
 800da28:	ddec      	ble.n	800da04 <AES_CMAC_Final+0x110>
 800da2a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800da2e:	005b      	lsls	r3, r3, #1
 800da30:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800da34:	4420      	add	r0, r4
 800da36:	2380      	movs	r3, #128	; 0x80
 800da38:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800da3c:	e003      	b.n	800da46 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800da3e:	4423      	add	r3, r4
 800da40:	2200      	movs	r2, #0
 800da42:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800da46:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800da4a:	3301      	adds	r3, #1
 800da4c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800da50:	2b0f      	cmp	r3, #15
 800da52:	d9f4      	bls.n	800da3e <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800da54:	2300      	movs	r3, #0
 800da56:	e00b      	b.n	800da70 <AES_CMAC_Final+0x17c>
 800da58:	18e1      	adds	r1, r4, r3
 800da5a:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800da5e:	f103 0020 	add.w	r0, r3, #32
 800da62:	4468      	add	r0, sp
 800da64:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800da68:	4042      	eors	r2, r0
 800da6a:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800da6e:	3301      	adds	r3, #1
 800da70:	2b0f      	cmp	r3, #15
 800da72:	ddf1      	ble.n	800da58 <AES_CMAC_Final+0x164>
 800da74:	2300      	movs	r3, #0
 800da76:	e009      	b.n	800da8c <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800da78:	18e2      	adds	r2, r4, r3
 800da7a:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800da7e:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800da82:	ea8c 0c01 	eor.w	ip, ip, r1
 800da86:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800da8a:	3301      	adds	r3, #1
 800da8c:	2b0f      	cmp	r3, #15
 800da8e:	ddf3      	ble.n	800da78 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800da90:	2210      	movs	r2, #16
 800da92:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800da96:	4668      	mov	r0, sp
 800da98:	f000 fda9 	bl	800e5ee <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800da9c:	4622      	mov	r2, r4
 800da9e:	4629      	mov	r1, r5
 800daa0:	4668      	mov	r0, sp
 800daa2:	f000 fa75 	bl	800df90 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800daa6:	2210      	movs	r2, #16
 800daa8:	2100      	movs	r1, #0
 800daaa:	eb0d 0002 	add.w	r0, sp, r2
 800daae:	f000 fdb6 	bl	800e61e <memset1>
}
 800dab2:	b009      	add	sp, #36	; 0x24
 800dab4:	bd30      	pop	{r4, r5, pc}

0800dab6 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800dab6:	780b      	ldrb	r3, [r1, #0]
 800dab8:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800daba:	784b      	ldrb	r3, [r1, #1]
 800dabc:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800dabe:	788b      	ldrb	r3, [r1, #2]
 800dac0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800dac2:	78cb      	ldrb	r3, [r1, #3]
 800dac4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800dac6:	790b      	ldrb	r3, [r1, #4]
 800dac8:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800daca:	794b      	ldrb	r3, [r1, #5]
 800dacc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800dace:	798b      	ldrb	r3, [r1, #6]
 800dad0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800dad2:	79cb      	ldrb	r3, [r1, #7]
 800dad4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800dad6:	7a0b      	ldrb	r3, [r1, #8]
 800dad8:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800dada:	7a4b      	ldrb	r3, [r1, #9]
 800dadc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800dade:	7a8b      	ldrb	r3, [r1, #10]
 800dae0:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800dae2:	7acb      	ldrb	r3, [r1, #11]
 800dae4:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800dae6:	7b0b      	ldrb	r3, [r1, #12]
 800dae8:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800daea:	7b4b      	ldrb	r3, [r1, #13]
 800daec:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800daee:	7b8b      	ldrb	r3, [r1, #14]
 800daf0:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800daf2:	7bcb      	ldrb	r3, [r1, #15]
 800daf4:	73c3      	strb	r3, [r0, #15]
#endif
}
 800daf6:	4770      	bx	lr

0800daf8 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800daf8:	e004      	b.n	800db04 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800dafa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dafe:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800db02:	461a      	mov	r2, r3
 800db04:	1e53      	subs	r3, r2, #1
 800db06:	b2db      	uxtb	r3, r3
 800db08:	2a00      	cmp	r2, #0
 800db0a:	d1f6      	bne.n	800dafa <copy_block_nn+0x2>
}
 800db0c:	4770      	bx	lr

0800db0e <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800db0e:	780b      	ldrb	r3, [r1, #0]
 800db10:	7802      	ldrb	r2, [r0, #0]
 800db12:	4053      	eors	r3, r2
 800db14:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800db16:	784b      	ldrb	r3, [r1, #1]
 800db18:	7842      	ldrb	r2, [r0, #1]
 800db1a:	4053      	eors	r3, r2
 800db1c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800db1e:	788b      	ldrb	r3, [r1, #2]
 800db20:	7882      	ldrb	r2, [r0, #2]
 800db22:	4053      	eors	r3, r2
 800db24:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800db26:	78cb      	ldrb	r3, [r1, #3]
 800db28:	78c2      	ldrb	r2, [r0, #3]
 800db2a:	4053      	eors	r3, r2
 800db2c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800db2e:	790b      	ldrb	r3, [r1, #4]
 800db30:	7902      	ldrb	r2, [r0, #4]
 800db32:	4053      	eors	r3, r2
 800db34:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800db36:	794b      	ldrb	r3, [r1, #5]
 800db38:	7942      	ldrb	r2, [r0, #5]
 800db3a:	4053      	eors	r3, r2
 800db3c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800db3e:	798b      	ldrb	r3, [r1, #6]
 800db40:	7982      	ldrb	r2, [r0, #6]
 800db42:	4053      	eors	r3, r2
 800db44:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800db46:	79cb      	ldrb	r3, [r1, #7]
 800db48:	79c2      	ldrb	r2, [r0, #7]
 800db4a:	4053      	eors	r3, r2
 800db4c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800db4e:	7a0b      	ldrb	r3, [r1, #8]
 800db50:	7a02      	ldrb	r2, [r0, #8]
 800db52:	4053      	eors	r3, r2
 800db54:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800db56:	7a4b      	ldrb	r3, [r1, #9]
 800db58:	7a42      	ldrb	r2, [r0, #9]
 800db5a:	4053      	eors	r3, r2
 800db5c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800db5e:	7a8b      	ldrb	r3, [r1, #10]
 800db60:	7a82      	ldrb	r2, [r0, #10]
 800db62:	4053      	eors	r3, r2
 800db64:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800db66:	7acb      	ldrb	r3, [r1, #11]
 800db68:	7ac2      	ldrb	r2, [r0, #11]
 800db6a:	4053      	eors	r3, r2
 800db6c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800db6e:	7b0b      	ldrb	r3, [r1, #12]
 800db70:	7b02      	ldrb	r2, [r0, #12]
 800db72:	4053      	eors	r3, r2
 800db74:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800db76:	7b4b      	ldrb	r3, [r1, #13]
 800db78:	7b42      	ldrb	r2, [r0, #13]
 800db7a:	4053      	eors	r3, r2
 800db7c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800db7e:	7b8b      	ldrb	r3, [r1, #14]
 800db80:	7b82      	ldrb	r2, [r0, #14]
 800db82:	4053      	eors	r3, r2
 800db84:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800db86:	7bcb      	ldrb	r3, [r1, #15]
 800db88:	7bc2      	ldrb	r2, [r0, #15]
 800db8a:	4053      	eors	r3, r2
 800db8c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800db8e:	4770      	bx	lr

0800db90 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800db90:	780b      	ldrb	r3, [r1, #0]
 800db92:	f892 c000 	ldrb.w	ip, [r2]
 800db96:	ea83 030c 	eor.w	r3, r3, ip
 800db9a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800db9c:	784b      	ldrb	r3, [r1, #1]
 800db9e:	f892 c001 	ldrb.w	ip, [r2, #1]
 800dba2:	ea83 030c 	eor.w	r3, r3, ip
 800dba6:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800dba8:	788b      	ldrb	r3, [r1, #2]
 800dbaa:	f892 c002 	ldrb.w	ip, [r2, #2]
 800dbae:	ea83 030c 	eor.w	r3, r3, ip
 800dbb2:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800dbb4:	78cb      	ldrb	r3, [r1, #3]
 800dbb6:	f892 c003 	ldrb.w	ip, [r2, #3]
 800dbba:	ea83 030c 	eor.w	r3, r3, ip
 800dbbe:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800dbc0:	790b      	ldrb	r3, [r1, #4]
 800dbc2:	f892 c004 	ldrb.w	ip, [r2, #4]
 800dbc6:	ea83 030c 	eor.w	r3, r3, ip
 800dbca:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800dbcc:	794b      	ldrb	r3, [r1, #5]
 800dbce:	f892 c005 	ldrb.w	ip, [r2, #5]
 800dbd2:	ea83 030c 	eor.w	r3, r3, ip
 800dbd6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800dbd8:	798b      	ldrb	r3, [r1, #6]
 800dbda:	f892 c006 	ldrb.w	ip, [r2, #6]
 800dbde:	ea83 030c 	eor.w	r3, r3, ip
 800dbe2:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800dbe4:	79cb      	ldrb	r3, [r1, #7]
 800dbe6:	f892 c007 	ldrb.w	ip, [r2, #7]
 800dbea:	ea83 030c 	eor.w	r3, r3, ip
 800dbee:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800dbf0:	7a0b      	ldrb	r3, [r1, #8]
 800dbf2:	f892 c008 	ldrb.w	ip, [r2, #8]
 800dbf6:	ea83 030c 	eor.w	r3, r3, ip
 800dbfa:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800dbfc:	7a4b      	ldrb	r3, [r1, #9]
 800dbfe:	f892 c009 	ldrb.w	ip, [r2, #9]
 800dc02:	ea83 030c 	eor.w	r3, r3, ip
 800dc06:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800dc08:	7a8b      	ldrb	r3, [r1, #10]
 800dc0a:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800dc0e:	ea83 030c 	eor.w	r3, r3, ip
 800dc12:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800dc14:	7acb      	ldrb	r3, [r1, #11]
 800dc16:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800dc1a:	ea83 030c 	eor.w	r3, r3, ip
 800dc1e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800dc20:	7b0b      	ldrb	r3, [r1, #12]
 800dc22:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800dc26:	ea83 030c 	eor.w	r3, r3, ip
 800dc2a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800dc2c:	7b4b      	ldrb	r3, [r1, #13]
 800dc2e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800dc32:	ea83 030c 	eor.w	r3, r3, ip
 800dc36:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800dc38:	7b8b      	ldrb	r3, [r1, #14]
 800dc3a:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800dc3e:	ea83 030c 	eor.w	r3, r3, ip
 800dc42:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800dc44:	7bcb      	ldrb	r3, [r1, #15]
 800dc46:	7bd2      	ldrb	r2, [r2, #15]
 800dc48:	4053      	eors	r3, r2
 800dc4a:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800dc4c:	4770      	bx	lr

0800dc4e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800dc4e:	b508      	push	{r3, lr}
    xor_block(d, k);
 800dc50:	f7ff ff5d 	bl	800db0e <xor_block>
}
 800dc54:	bd08      	pop	{r3, pc}
	...

0800dc58 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800dc58:	7802      	ldrb	r2, [r0, #0]
 800dc5a:	4b18      	ldr	r3, [pc, #96]	; (800dcbc <shift_sub_rows+0x64>)
 800dc5c:	5c9a      	ldrb	r2, [r3, r2]
 800dc5e:	7002      	strb	r2, [r0, #0]
 800dc60:	7902      	ldrb	r2, [r0, #4]
 800dc62:	5c9a      	ldrb	r2, [r3, r2]
 800dc64:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800dc66:	7a02      	ldrb	r2, [r0, #8]
 800dc68:	5c9a      	ldrb	r2, [r3, r2]
 800dc6a:	7202      	strb	r2, [r0, #8]
 800dc6c:	7b02      	ldrb	r2, [r0, #12]
 800dc6e:	5c9a      	ldrb	r2, [r3, r2]
 800dc70:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800dc72:	7842      	ldrb	r2, [r0, #1]
 800dc74:	7941      	ldrb	r1, [r0, #5]
 800dc76:	5c59      	ldrb	r1, [r3, r1]
 800dc78:	7041      	strb	r1, [r0, #1]
 800dc7a:	7a41      	ldrb	r1, [r0, #9]
 800dc7c:	5c59      	ldrb	r1, [r3, r1]
 800dc7e:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800dc80:	7b41      	ldrb	r1, [r0, #13]
 800dc82:	5c59      	ldrb	r1, [r3, r1]
 800dc84:	7241      	strb	r1, [r0, #9]
 800dc86:	5c9a      	ldrb	r2, [r3, r2]
 800dc88:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800dc8a:	7882      	ldrb	r2, [r0, #2]
 800dc8c:	7a81      	ldrb	r1, [r0, #10]
 800dc8e:	5c59      	ldrb	r1, [r3, r1]
 800dc90:	7081      	strb	r1, [r0, #2]
 800dc92:	5c9a      	ldrb	r2, [r3, r2]
 800dc94:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800dc96:	7982      	ldrb	r2, [r0, #6]
 800dc98:	7b81      	ldrb	r1, [r0, #14]
 800dc9a:	5c59      	ldrb	r1, [r3, r1]
 800dc9c:	7181      	strb	r1, [r0, #6]
 800dc9e:	5c9a      	ldrb	r2, [r3, r2]
 800dca0:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800dca2:	7bc2      	ldrb	r2, [r0, #15]
 800dca4:	7ac1      	ldrb	r1, [r0, #11]
 800dca6:	5c59      	ldrb	r1, [r3, r1]
 800dca8:	73c1      	strb	r1, [r0, #15]
 800dcaa:	79c1      	ldrb	r1, [r0, #7]
 800dcac:	5c59      	ldrb	r1, [r3, r1]
 800dcae:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800dcb0:	78c1      	ldrb	r1, [r0, #3]
 800dcb2:	5c59      	ldrb	r1, [r3, r1]
 800dcb4:	71c1      	strb	r1, [r0, #7]
 800dcb6:	5c9b      	ldrb	r3, [r3, r2]
 800dcb8:	70c3      	strb	r3, [r0, #3]
}
 800dcba:	4770      	bx	lr
 800dcbc:	080119ac 	.word	0x080119ac

0800dcc0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800dcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc4:	b084      	sub	sp, #16
 800dcc6:	4604      	mov	r4, r0
    block_copy(st, dt);
 800dcc8:	4601      	mov	r1, r0
 800dcca:	4668      	mov	r0, sp
 800dccc:	f7ff fef3 	bl	800dab6 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800dcd0:	f89d c000 	ldrb.w	ip, [sp]
 800dcd4:	4b6a      	ldr	r3, [pc, #424]	; (800de80 <mix_sub_columns+0x1c0>)
 800dcd6:	f813 000c 	ldrb.w	r0, [r3, ip]
 800dcda:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dcde:	4a69      	ldr	r2, [pc, #420]	; (800de84 <mix_sub_columns+0x1c4>)
 800dce0:	f812 9008 	ldrb.w	r9, [r2, r8]
 800dce4:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800dce8:	4967      	ldr	r1, [pc, #412]	; (800de88 <mix_sub_columns+0x1c8>)
 800dcea:	f811 500e 	ldrb.w	r5, [r1, lr]
 800dcee:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800dcf2:	5dce      	ldrb	r6, [r1, r7]
 800dcf4:	ea80 0009 	eor.w	r0, r0, r9
 800dcf8:	4068      	eors	r0, r5
 800dcfa:	4070      	eors	r0, r6
 800dcfc:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800dcfe:	f811 000c 	ldrb.w	r0, [r1, ip]
 800dd02:	f813 a008 	ldrb.w	sl, [r3, r8]
 800dd06:	f812 900e 	ldrb.w	r9, [r2, lr]
 800dd0a:	ea80 0a0a 	eor.w	sl, r0, sl
 800dd0e:	ea89 090a 	eor.w	r9, r9, sl
 800dd12:	ea86 0609 	eor.w	r6, r6, r9
 800dd16:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800dd18:	f811 8008 	ldrb.w	r8, [r1, r8]
 800dd1c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800dd20:	5dd6      	ldrb	r6, [r2, r7]
 800dd22:	ea80 0008 	eor.w	r0, r0, r8
 800dd26:	ea8e 0000 	eor.w	r0, lr, r0
 800dd2a:	4070      	eors	r0, r6
 800dd2c:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800dd2e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800dd32:	5dd8      	ldrb	r0, [r3, r7]
 800dd34:	ea86 0608 	eor.w	r6, r6, r8
 800dd38:	4075      	eors	r5, r6
 800dd3a:	4045      	eors	r5, r0
 800dd3c:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800dd3e:	f89d c004 	ldrb.w	ip, [sp, #4]
 800dd42:	f813 000c 	ldrb.w	r0, [r3, ip]
 800dd46:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800dd4a:	f812 9008 	ldrb.w	r9, [r2, r8]
 800dd4e:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800dd52:	f811 500e 	ldrb.w	r5, [r1, lr]
 800dd56:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800dd5a:	5dce      	ldrb	r6, [r1, r7]
 800dd5c:	ea80 0009 	eor.w	r0, r0, r9
 800dd60:	4068      	eors	r0, r5
 800dd62:	4070      	eors	r0, r6
 800dd64:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800dd66:	f811 000c 	ldrb.w	r0, [r1, ip]
 800dd6a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800dd6e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800dd72:	ea80 0a0a 	eor.w	sl, r0, sl
 800dd76:	ea89 090a 	eor.w	r9, r9, sl
 800dd7a:	ea86 0609 	eor.w	r6, r6, r9
 800dd7e:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800dd80:	f811 8008 	ldrb.w	r8, [r1, r8]
 800dd84:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800dd88:	5dd6      	ldrb	r6, [r2, r7]
 800dd8a:	ea80 0008 	eor.w	r0, r0, r8
 800dd8e:	ea8e 0000 	eor.w	r0, lr, r0
 800dd92:	4070      	eors	r0, r6
 800dd94:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800dd96:	f812 600c 	ldrb.w	r6, [r2, ip]
 800dd9a:	5dd8      	ldrb	r0, [r3, r7]
 800dd9c:	ea86 0608 	eor.w	r6, r6, r8
 800dda0:	4075      	eors	r5, r6
 800dda2:	4045      	eors	r5, r0
 800dda4:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800dda6:	f89d c008 	ldrb.w	ip, [sp, #8]
 800ddaa:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ddae:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800ddb2:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ddb6:	f89d e002 	ldrb.w	lr, [sp, #2]
 800ddba:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ddbe:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800ddc2:	5dce      	ldrb	r6, [r1, r7]
 800ddc4:	ea80 0009 	eor.w	r0, r0, r9
 800ddc8:	4068      	eors	r0, r5
 800ddca:	4070      	eors	r0, r6
 800ddcc:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ddce:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ddd2:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ddd6:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ddda:	ea80 0a0a 	eor.w	sl, r0, sl
 800ddde:	ea89 090a 	eor.w	r9, r9, sl
 800dde2:	ea86 0609 	eor.w	r6, r6, r9
 800dde6:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800dde8:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ddec:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ddf0:	5dd6      	ldrb	r6, [r2, r7]
 800ddf2:	ea80 0008 	eor.w	r0, r0, r8
 800ddf6:	ea8e 0000 	eor.w	r0, lr, r0
 800ddfa:	4070      	eors	r0, r6
 800ddfc:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ddfe:	f812 600c 	ldrb.w	r6, [r2, ip]
 800de02:	5dd8      	ldrb	r0, [r3, r7]
 800de04:	ea86 0608 	eor.w	r6, r6, r8
 800de08:	4075      	eors	r5, r6
 800de0a:	4045      	eors	r5, r0
 800de0c:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800de0e:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800de12:	5d98      	ldrb	r0, [r3, r6]
 800de14:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800de18:	f812 9008 	ldrb.w	r9, [r2, r8]
 800de1c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800de20:	f811 c007 	ldrb.w	ip, [r1, r7]
 800de24:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800de28:	f811 e005 	ldrb.w	lr, [r1, r5]
 800de2c:	ea80 0009 	eor.w	r0, r0, r9
 800de30:	ea8c 0000 	eor.w	r0, ip, r0
 800de34:	ea8e 0000 	eor.w	r0, lr, r0
 800de38:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800de3a:	5d88      	ldrb	r0, [r1, r6]
 800de3c:	f813 a008 	ldrb.w	sl, [r3, r8]
 800de40:	f812 9007 	ldrb.w	r9, [r2, r7]
 800de44:	ea80 0a0a 	eor.w	sl, r0, sl
 800de48:	ea89 090a 	eor.w	r9, r9, sl
 800de4c:	ea8e 0e09 	eor.w	lr, lr, r9
 800de50:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800de54:	f811 1008 	ldrb.w	r1, [r1, r8]
 800de58:	f813 e007 	ldrb.w	lr, [r3, r7]
 800de5c:	5d57      	ldrb	r7, [r2, r5]
 800de5e:	4048      	eors	r0, r1
 800de60:	ea8e 0000 	eor.w	r0, lr, r0
 800de64:	4078      	eors	r0, r7
 800de66:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800de68:	5d92      	ldrb	r2, [r2, r6]
 800de6a:	5d5b      	ldrb	r3, [r3, r5]
 800de6c:	4051      	eors	r1, r2
 800de6e:	ea8c 0c01 	eor.w	ip, ip, r1
 800de72:	ea83 0c0c 	eor.w	ip, r3, ip
 800de76:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 800de7a:	b004      	add	sp, #16
 800de7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de80:	080117ac 	.word	0x080117ac
 800de84:	080118ac 	.word	0x080118ac
 800de88:	080119ac 	.word	0x080119ac

0800de8c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800de8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de90:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800de92:	f1a1 0310 	sub.w	r3, r1, #16
 800de96:	b2da      	uxtb	r2, r3
 800de98:	2a10      	cmp	r2, #16
 800de9a:	d807      	bhi.n	800deac <lorawan_aes_set_key+0x20>
 800de9c:	460d      	mov	r5, r1
 800de9e:	2301      	movs	r3, #1
 800dea0:	4093      	lsls	r3, r2
 800dea2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800dea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800deaa:	b92b      	cbnz	r3, 800deb8 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800deac:	2300      	movs	r3, #0
 800deae:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800deb2:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800deb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800deb8:	460a      	mov	r2, r1
 800deba:	4601      	mov	r1, r0
 800debc:	4620      	mov	r0, r4
 800debe:	f7ff fe1b 	bl	800daf8 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800dec2:	f105 031c 	add.w	r3, r5, #28
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800dece:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ded2:	3b01      	subs	r3, #1
 800ded4:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ded8:	462b      	mov	r3, r5
 800deda:	f04f 0c01 	mov.w	ip, #1
 800dede:	e023      	b.n	800df28 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 800dee0:	2d18      	cmp	r5, #24
 800dee2:	d901      	bls.n	800dee8 <lorawan_aes_set_key+0x5c>
 800dee4:	2a10      	cmp	r2, #16
 800dee6:	d047      	beq.n	800df78 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800dee8:	1b5a      	subs	r2, r3, r5
 800deea:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800deec:	f814 9002 	ldrb.w	r9, [r4, r2]
 800def0:	ea89 0808 	eor.w	r8, r9, r8
 800def4:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800def8:	f102 0801 	add.w	r8, r2, #1
 800defc:	f814 8008 	ldrb.w	r8, [r4, r8]
 800df00:	f100 0901 	add.w	r9, r0, #1
 800df04:	ea88 0707 	eor.w	r7, r8, r7
 800df08:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800df0c:	1c97      	adds	r7, r2, #2
 800df0e:	5de7      	ldrb	r7, [r4, r7]
 800df10:	f100 0802 	add.w	r8, r0, #2
 800df14:	407e      	eors	r6, r7
 800df16:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800df1a:	3203      	adds	r2, #3
 800df1c:	5ca6      	ldrb	r6, [r4, r2]
 800df1e:	1cc2      	adds	r2, r0, #3
 800df20:	4071      	eors	r1, r6
 800df22:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800df24:	3304      	adds	r3, #4
 800df26:	b2db      	uxtb	r3, r3
 800df28:	4573      	cmp	r3, lr
 800df2a:	d22c      	bcs.n	800df86 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800df2c:	4618      	mov	r0, r3
 800df2e:	1f1a      	subs	r2, r3, #4
 800df30:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800df34:	1eda      	subs	r2, r3, #3
 800df36:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800df38:	1e9a      	subs	r2, r3, #2
 800df3a:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800df3c:	1e5a      	subs	r2, r3, #1
 800df3e:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800df40:	fbb3 f2f5 	udiv	r2, r3, r5
 800df44:	fb05 3212 	mls	r2, r5, r2, r3
 800df48:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800df4c:	d1c8      	bne.n	800dee0 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 800df4e:	4a0f      	ldr	r2, [pc, #60]	; (800df8c <lorawan_aes_set_key+0x100>)
 800df50:	f812 9007 	ldrb.w	r9, [r2, r7]
 800df54:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800df58:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800df5a:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800df5c:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800df60:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800df64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800df68:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800df6c:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 800df70:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 800df74:	46c8      	mov	r8, r9
 800df76:	e7b7      	b.n	800dee8 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 800df78:	4a04      	ldr	r2, [pc, #16]	; (800df8c <lorawan_aes_set_key+0x100>)
 800df7a:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800df7e:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800df80:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800df82:	5c51      	ldrb	r1, [r2, r1]
 800df84:	e7b0      	b.n	800dee8 <lorawan_aes_set_key+0x5c>
    return 0;
 800df86:	2000      	movs	r0, #0
 800df88:	e794      	b.n	800deb4 <lorawan_aes_set_key+0x28>
 800df8a:	bf00      	nop
 800df8c:	080119ac 	.word	0x080119ac

0800df90 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800df90:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800df94:	b31b      	cbz	r3, 800dfde <lorawan_aes_encrypt+0x4e>
{
 800df96:	b570      	push	{r4, r5, r6, lr}
 800df98:	b084      	sub	sp, #16
 800df9a:	460e      	mov	r6, r1
 800df9c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800df9e:	4601      	mov	r1, r0
 800dfa0:	4668      	mov	r0, sp
 800dfa2:	f7ff fdf5 	bl	800db90 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800dfa6:	2401      	movs	r4, #1
 800dfa8:	e009      	b.n	800dfbe <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800dfaa:	4668      	mov	r0, sp
 800dfac:	f7ff fe88 	bl	800dcc0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800dfb0:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800dfb4:	4668      	mov	r0, sp
 800dfb6:	f7ff fe4a 	bl	800dc4e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800dfba:	3401      	adds	r4, #1
 800dfbc:	b2e4      	uxtb	r4, r4
 800dfbe:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800dfc2:	42a3      	cmp	r3, r4
 800dfc4:	d8f1      	bhi.n	800dfaa <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800dfc6:	4668      	mov	r0, sp
 800dfc8:	f7ff fe46 	bl	800dc58 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800dfcc:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800dfd0:	4669      	mov	r1, sp
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f7ff fddc 	bl	800db90 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800dfd8:	2000      	movs	r0, #0
}
 800dfda:	b004      	add	sp, #16
 800dfdc:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800dfde:	20ff      	movs	r0, #255	; 0xff
}
 800dfe0:	4770      	bx	lr
	...

0800dfe4 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2b09      	cmp	r3, #9
 800dfe8:	d817      	bhi.n	800e01a <GetKeyByID+0x36>
{
 800dfea:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dfec:	4a0c      	ldr	r2, [pc, #48]	; (800e020 <GetKeyByID+0x3c>)
 800dfee:	6814      	ldr	r4, [r2, #0]
 800dff0:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800dff4:	4422      	add	r2, r4
 800dff6:	7c12      	ldrb	r2, [r2, #16]
 800dff8:	4282      	cmp	r2, r0
 800dffa:	d006      	beq.n	800e00a <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dffc:	3301      	adds	r3, #1
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	2b09      	cmp	r3, #9
 800e002:	d9f3      	bls.n	800dfec <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e004:	2003      	movs	r0, #3
}
 800e006:	bc10      	pop	{r4}
 800e008:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800e00a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800e00e:	f10c 0c10 	add.w	ip, ip, #16
 800e012:	4464      	add	r4, ip
 800e014:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e016:	2000      	movs	r0, #0
 800e018:	e7f5      	b.n	800e006 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e01a:	2003      	movs	r0, #3
}
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	20000e30 	.word	0x20000e30

0800e024 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800e024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e028:	b0cc      	sub	sp, #304	; 0x130
 800e02a:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e02c:	b3a9      	cbz	r1, 800e09a <ComputeCmac+0x76>
 800e02e:	4605      	mov	r5, r0
 800e030:	4617      	mov	r7, r2
 800e032:	461c      	mov	r4, r3
 800e034:	4688      	mov	r8, r1
 800e036:	b396      	cbz	r6, 800e09e <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e038:	a802      	add	r0, sp, #8
 800e03a:	f7ff fbd7 	bl	800d7ec <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e03e:	a901      	add	r1, sp, #4
 800e040:	4620      	mov	r0, r4
 800e042:	f7ff ffcf 	bl	800dfe4 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e046:	4604      	mov	r4, r0
 800e048:	b118      	cbz	r0, 800e052 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800e04a:	4620      	mov	r0, r4
 800e04c:	b04c      	add	sp, #304	; 0x130
 800e04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e052:	9901      	ldr	r1, [sp, #4]
 800e054:	3101      	adds	r1, #1
 800e056:	a802      	add	r0, sp, #8
 800e058:	f7ff fbd7 	bl	800d80a <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800e05c:	b125      	cbz	r5, 800e068 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800e05e:	2210      	movs	r2, #16
 800e060:	4629      	mov	r1, r5
 800e062:	a802      	add	r0, sp, #8
 800e064:	f7ff fbd8 	bl	800d818 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800e068:	463a      	mov	r2, r7
 800e06a:	4641      	mov	r1, r8
 800e06c:	a802      	add	r0, sp, #8
 800e06e:	f7ff fbd3 	bl	800d818 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800e072:	a902      	add	r1, sp, #8
 800e074:	a848      	add	r0, sp, #288	; 0x120
 800e076:	f7ff fc3d 	bl	800d8f4 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800e07a:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800e07e:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800e082:	041b      	lsls	r3, r3, #16
 800e084:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e088:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800e08c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800e090:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800e094:	4313      	orrs	r3, r2
 800e096:	6033      	str	r3, [r6, #0]
 800e098:	e7d7      	b.n	800e04a <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800e09a:	2402      	movs	r4, #2
 800e09c:	e7d5      	b.n	800e04a <ComputeCmac+0x26>
 800e09e:	2402      	movs	r4, #2
 800e0a0:	e7d3      	b.n	800e04a <ComputeCmac+0x26>
	...

0800e0a4 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800e0a4:	b168      	cbz	r0, 800e0c2 <SecureElementInit+0x1e>
{
 800e0a6:	b510      	push	{r4, lr}
 800e0a8:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800e0aa:	4a08      	ldr	r2, [pc, #32]	; (800e0cc <SecureElementInit+0x28>)
 800e0ac:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800e0ae:	22c0      	movs	r2, #192	; 0xc0
 800e0b0:	4907      	ldr	r1, [pc, #28]	; (800e0d0 <SecureElementInit+0x2c>)
 800e0b2:	f000 fa9c 	bl	800e5ee <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800e0b6:	b134      	cbz	r4, 800e0c6 <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800e0b8:	4b04      	ldr	r3, [pc, #16]	; (800e0cc <SecureElementInit+0x28>)
 800e0ba:	6818      	ldr	r0, [r3, #0]
 800e0bc:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800e0be:	2000      	movs	r0, #0
}
 800e0c0:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e0c2:	2002      	movs	r0, #2
}
 800e0c4:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	e7fa      	b.n	800e0c0 <SecureElementInit+0x1c>
 800e0ca:	bf00      	nop
 800e0cc:	20000e30 	.word	0x20000e30
 800e0d0:	0803e500 	.word	0x0803e500

0800e0d4 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	2b09      	cmp	r3, #9
 800e0d8:	d817      	bhi.n	800e10a <SecureElementGetKeyByID+0x36>
{
 800e0da:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800e0dc:	4a0c      	ldr	r2, [pc, #48]	; (800e110 <SecureElementGetKeyByID+0x3c>)
 800e0de:	6814      	ldr	r4, [r2, #0]
 800e0e0:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e0e4:	4422      	add	r2, r4
 800e0e6:	7c12      	ldrb	r2, [r2, #16]
 800e0e8:	4282      	cmp	r2, r0
 800e0ea:	d006      	beq.n	800e0fa <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	2b09      	cmp	r3, #9
 800e0f2:	d9f3      	bls.n	800e0dc <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e0f4:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800e0f6:	bc10      	pop	{r4}
 800e0f8:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800e0fa:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800e0fe:	f10c 0c10 	add.w	ip, ip, #16
 800e102:	4464      	add	r4, ip
 800e104:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e106:	2000      	movs	r0, #0
 800e108:	e7f5      	b.n	800e0f6 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e10a:	2003      	movs	r0, #3
}
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	20000e30 	.word	0x20000e30

0800e114 <PrintKey>:
{
 800e114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e118:	b095      	sub	sp, #84	; 0x54
 800e11a:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800e11c:	a913      	add	r1, sp, #76	; 0x4c
 800e11e:	f7ff ffd9 	bl	800e0d4 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800e122:	2800      	cmp	r0, #0
 800e124:	d154      	bne.n	800e1d0 <PrintKey+0xbc>
        if (key == APP_KEY)
 800e126:	b1b4      	cbz	r4, 800e156 <PrintKey+0x42>
        else if (key == NWK_KEY)
 800e128:	2c01      	cmp	r4, #1
 800e12a:	d054      	beq.n	800e1d6 <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 800e12c:	2c03      	cmp	r4, #3
 800e12e:	d059      	beq.n	800e1e4 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 800e130:	2c02      	cmp	r4, #2
 800e132:	d05e      	beq.n	800e1f2 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 800e134:	2c04      	cmp	r4, #4
 800e136:	d063      	beq.n	800e200 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 800e138:	2c7f      	cmp	r4, #127	; 0x7f
 800e13a:	d068      	beq.n	800e20e <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 800e13c:	2c80      	cmp	r4, #128	; 0x80
 800e13e:	d06d      	beq.n	800e21c <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 800e140:	2c81      	cmp	r4, #129	; 0x81
 800e142:	d072      	beq.n	800e22a <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 800e144:	2c82      	cmp	r4, #130	; 0x82
 800e146:	d10c      	bne.n	800e162 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800e148:	4b3b      	ldr	r3, [pc, #236]	; (800e238 <PrintKey+0x124>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	4611      	mov	r1, r2
 800e14e:	2002      	movs	r0, #2
 800e150:	f002 f8f6 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800e154:	e005      	b.n	800e162 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800e156:	4b39      	ldr	r3, [pc, #228]	; (800e23c <PrintKey+0x128>)
 800e158:	2200      	movs	r2, #0
 800e15a:	4611      	mov	r1, r2
 800e15c:	2002      	movs	r0, #2
 800e15e:	f002 f8ef 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800e162:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e164:	785a      	ldrb	r2, [r3, #1]
 800e166:	9210      	str	r2, [sp, #64]	; 0x40
 800e168:	7899      	ldrb	r1, [r3, #2]
 800e16a:	9111      	str	r1, [sp, #68]	; 0x44
 800e16c:	78da      	ldrb	r2, [r3, #3]
 800e16e:	7919      	ldrb	r1, [r3, #4]
 800e170:	7958      	ldrb	r0, [r3, #5]
 800e172:	799c      	ldrb	r4, [r3, #6]
 800e174:	79dd      	ldrb	r5, [r3, #7]
 800e176:	7a1e      	ldrb	r6, [r3, #8]
 800e178:	7a5f      	ldrb	r7, [r3, #9]
 800e17a:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800e17e:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800e182:	f893 800c 	ldrb.w	r8, [r3, #12]
 800e186:	f893 900d 	ldrb.w	r9, [r3, #13]
 800e18a:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800e18e:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800e192:	7c1b      	ldrb	r3, [r3, #16]
 800e194:	930f      	str	r3, [sp, #60]	; 0x3c
 800e196:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e19a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e19e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e1a2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800e1a6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800e1aa:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e1ae:	9708      	str	r7, [sp, #32]
 800e1b0:	9607      	str	r6, [sp, #28]
 800e1b2:	9506      	str	r5, [sp, #24]
 800e1b4:	9405      	str	r4, [sp, #20]
 800e1b6:	9004      	str	r0, [sp, #16]
 800e1b8:	9103      	str	r1, [sp, #12]
 800e1ba:	9202      	str	r2, [sp, #8]
 800e1bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e1be:	9101      	str	r1, [sp, #4]
 800e1c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e1c2:	9200      	str	r2, [sp, #0]
 800e1c4:	4b1e      	ldr	r3, [pc, #120]	; (800e240 <PrintKey+0x12c>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	2002      	movs	r0, #2
 800e1cc:	f002 f8b8 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 800e1d0:	b015      	add	sp, #84	; 0x54
 800e1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800e1d6:	4b1b      	ldr	r3, [pc, #108]	; (800e244 <PrintKey+0x130>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	4611      	mov	r1, r2
 800e1dc:	2002      	movs	r0, #2
 800e1de:	f002 f8af 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800e1e2:	e7be      	b.n	800e162 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800e1e4:	4b18      	ldr	r3, [pc, #96]	; (800e248 <PrintKey+0x134>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	2002      	movs	r0, #2
 800e1ec:	f002 f8a8 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800e1f0:	e7b7      	b.n	800e162 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800e1f2:	4b16      	ldr	r3, [pc, #88]	; (800e24c <PrintKey+0x138>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	2002      	movs	r0, #2
 800e1fa:	f002 f8a1 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800e1fe:	e7b0      	b.n	800e162 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800e200:	4b13      	ldr	r3, [pc, #76]	; (800e250 <PrintKey+0x13c>)
 800e202:	2200      	movs	r2, #0
 800e204:	4611      	mov	r1, r2
 800e206:	2002      	movs	r0, #2
 800e208:	f002 f89a 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800e20c:	e7a9      	b.n	800e162 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800e20e:	4b11      	ldr	r3, [pc, #68]	; (800e254 <PrintKey+0x140>)
 800e210:	2200      	movs	r2, #0
 800e212:	4611      	mov	r1, r2
 800e214:	2002      	movs	r0, #2
 800e216:	f002 f893 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800e21a:	e7a2      	b.n	800e162 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800e21c:	4b0e      	ldr	r3, [pc, #56]	; (800e258 <PrintKey+0x144>)
 800e21e:	2200      	movs	r2, #0
 800e220:	4611      	mov	r1, r2
 800e222:	2002      	movs	r0, #2
 800e224:	f002 f88c 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800e228:	e79b      	b.n	800e162 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800e22a:	4b0c      	ldr	r3, [pc, #48]	; (800e25c <PrintKey+0x148>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	4611      	mov	r1, r2
 800e230:	2002      	movs	r0, #2
 800e232:	f002 f885 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800e236:	e794      	b.n	800e162 <PrintKey+0x4e>
 800e238:	08011b6c 	.word	0x08011b6c
 800e23c:	08011aac 	.word	0x08011aac
 800e240:	08011b84 	.word	0x08011b84
 800e244:	08011ac4 	.word	0x08011ac4
 800e248:	08011adc 	.word	0x08011adc
 800e24c:	08011af4 	.word	0x08011af4
 800e250:	08011b0c 	.word	0x08011b0c
 800e254:	08011b24 	.word	0x08011b24
 800e258:	08011b3c 	.word	0x08011b3c
 800e25c:	08011b54 	.word	0x08011b54

0800e260 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800e260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e262:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800e264:	4b28      	ldr	r3, [pc, #160]	; (800e308 <SecureElementPrintKeys+0xa8>)
 800e266:	2200      	movs	r2, #0
 800e268:	4611      	mov	r1, r2
 800e26a:	2002      	movs	r0, #2
 800e26c:	f002 f868 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800e270:	2000      	movs	r0, #0
 800e272:	f7ff ff4f 	bl	800e114 <PrintKey>
    PrintKey(NWK_KEY);
 800e276:	2001      	movs	r0, #1
 800e278:	f7ff ff4c 	bl	800e114 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800e27c:	4b23      	ldr	r3, [pc, #140]	; (800e30c <SecureElementPrintKeys+0xac>)
 800e27e:	2200      	movs	r2, #0
 800e280:	4611      	mov	r1, r2
 800e282:	2002      	movs	r0, #2
 800e284:	f002 f85c 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800e288:	2003      	movs	r0, #3
 800e28a:	f7ff ff43 	bl	800e114 <PrintKey>
    PrintKey(NWK_S_KEY);
 800e28e:	2002      	movs	r0, #2
 800e290:	f7ff ff40 	bl	800e114 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800e294:	4b1e      	ldr	r3, [pc, #120]	; (800e310 <SecureElementPrintKeys+0xb0>)
 800e296:	2200      	movs	r2, #0
 800e298:	4611      	mov	r1, r2
 800e29a:	2002      	movs	r0, #2
 800e29c:	f002 f850 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800e2a0:	4c1c      	ldr	r4, [pc, #112]	; (800e314 <SecureElementPrintKeys+0xb4>)
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	781a      	ldrb	r2, [r3, #0]
 800e2a6:	7859      	ldrb	r1, [r3, #1]
 800e2a8:	7898      	ldrb	r0, [r3, #2]
 800e2aa:	78dd      	ldrb	r5, [r3, #3]
 800e2ac:	791e      	ldrb	r6, [r3, #4]
 800e2ae:	795f      	ldrb	r7, [r3, #5]
 800e2b0:	f893 c006 	ldrb.w	ip, [r3, #6]
 800e2b4:	79db      	ldrb	r3, [r3, #7]
 800e2b6:	9307      	str	r3, [sp, #28]
 800e2b8:	f8cd c018 	str.w	ip, [sp, #24]
 800e2bc:	9705      	str	r7, [sp, #20]
 800e2be:	9604      	str	r6, [sp, #16]
 800e2c0:	9503      	str	r5, [sp, #12]
 800e2c2:	9002      	str	r0, [sp, #8]
 800e2c4:	9101      	str	r1, [sp, #4]
 800e2c6:	9200      	str	r2, [sp, #0]
 800e2c8:	4b13      	ldr	r3, [pc, #76]	; (800e318 <SecureElementPrintKeys+0xb8>)
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4611      	mov	r1, r2
 800e2ce:	2002      	movs	r0, #2
 800e2d0:	f002 f836 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800e2d4:	6823      	ldr	r3, [r4, #0]
 800e2d6:	7a1a      	ldrb	r2, [r3, #8]
 800e2d8:	7a59      	ldrb	r1, [r3, #9]
 800e2da:	7a98      	ldrb	r0, [r3, #10]
 800e2dc:	7adc      	ldrb	r4, [r3, #11]
 800e2de:	7b1d      	ldrb	r5, [r3, #12]
 800e2e0:	7b5e      	ldrb	r6, [r3, #13]
 800e2e2:	7b9f      	ldrb	r7, [r3, #14]
 800e2e4:	7bdb      	ldrb	r3, [r3, #15]
 800e2e6:	9307      	str	r3, [sp, #28]
 800e2e8:	9706      	str	r7, [sp, #24]
 800e2ea:	9605      	str	r6, [sp, #20]
 800e2ec:	9504      	str	r5, [sp, #16]
 800e2ee:	9403      	str	r4, [sp, #12]
 800e2f0:	9002      	str	r0, [sp, #8]
 800e2f2:	9101      	str	r1, [sp, #4]
 800e2f4:	9200      	str	r2, [sp, #0]
 800e2f6:	4b09      	ldr	r3, [pc, #36]	; (800e31c <SecureElementPrintKeys+0xbc>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	2002      	movs	r0, #2
 800e2fe:	f002 f81f 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 800e302:	2000      	movs	r0, #0
 800e304:	b009      	add	sp, #36	; 0x24
 800e306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e308:	08011bd8 	.word	0x08011bd8
 800e30c:	08011bf0 	.word	0x08011bf0
 800e310:	08011c08 	.word	0x08011c08
 800e314:	20000e30 	.word	0x20000e30
 800e318:	08011c20 	.word	0x08011c20
 800e31c:	08011c60 	.word	0x08011c60

0800e320 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800e320:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800e322:	2004      	movs	r0, #4
 800e324:	f7ff fef6 	bl	800e114 <PrintKey>
    PrintKey(MC_KE_KEY);
 800e328:	207f      	movs	r0, #127	; 0x7f
 800e32a:	f7ff fef3 	bl	800e114 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800e32e:	2002      	movs	r0, #2
 800e330:	f7ff fef0 	bl	800e114 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800e334:	2003      	movs	r0, #3
 800e336:	f7ff feed 	bl	800e114 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 800e33a:	2000      	movs	r0, #0
 800e33c:	bd08      	pop	{r3, pc}

0800e33e <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800e33e:	2b7e      	cmp	r3, #126	; 0x7e
 800e340:	d80a      	bhi.n	800e358 <SecureElementComputeAesCmac+0x1a>
{
 800e342:	b500      	push	{lr}
 800e344:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e346:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e34a:	f8cd c000 	str.w	ip, [sp]
 800e34e:	f7ff fe69 	bl	800e024 <ComputeCmac>
}
 800e352:	b003      	add	sp, #12
 800e354:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e358:	2003      	movs	r0, #3
}
 800e35a:	4770      	bx	lr

0800e35c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800e35c:	b190      	cbz	r0, 800e384 <SecureElementVerifyAesCmac+0x28>
{
 800e35e:	b510      	push	{r4, lr}
 800e360:	b084      	sub	sp, #16
 800e362:	468c      	mov	ip, r1
 800e364:	4614      	mov	r4, r2
 800e366:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800e368:	2000      	movs	r0, #0
 800e36a:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e36c:	aa03      	add	r2, sp, #12
 800e36e:	9200      	str	r2, [sp, #0]
 800e370:	4662      	mov	r2, ip
 800e372:	f7ff fe57 	bl	800e024 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e376:	b918      	cbnz	r0, 800e380 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800e378:	9b03      	ldr	r3, [sp, #12]
 800e37a:	42a3      	cmp	r3, r4
 800e37c:	d000      	beq.n	800e380 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800e37e:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800e380:	b004      	add	sp, #16
 800e382:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e384:	2002      	movs	r0, #2
}
 800e386:	4770      	bx	lr

0800e388 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800e388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38c:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800e38e:	b350      	cbz	r0, 800e3e6 <SecureElementAesEncrypt+0x5e>
 800e390:	460c      	mov	r4, r1
 800e392:	4615      	mov	r5, r2
 800e394:	461e      	mov	r6, r3
 800e396:	4607      	mov	r7, r0
 800e398:	b343      	cbz	r3, 800e3ec <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800e39a:	f011 0f0f 	tst.w	r1, #15
 800e39e:	d128      	bne.n	800e3f2 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800e3a0:	22f0      	movs	r2, #240	; 0xf0
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	a801      	add	r0, sp, #4
 800e3a6:	f000 f93a 	bl	800e61e <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800e3aa:	4669      	mov	r1, sp
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f7ff fe19 	bl	800dfe4 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e3b2:	4680      	mov	r8, r0
 800e3b4:	b118      	cbz	r0, 800e3be <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800e3b6:	4640      	mov	r0, r8
 800e3b8:	b03e      	add	sp, #248	; 0xf8
 800e3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800e3be:	aa01      	add	r2, sp, #4
 800e3c0:	2110      	movs	r1, #16
 800e3c2:	9800      	ldr	r0, [sp, #0]
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	f7ff fd61 	bl	800de8c <lorawan_aes_set_key>
        uint8_t block = 0;
 800e3ca:	4645      	mov	r5, r8
        while( size != 0 )
 800e3cc:	e008      	b.n	800e3e0 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800e3ce:	aa01      	add	r2, sp, #4
 800e3d0:	1971      	adds	r1, r6, r5
 800e3d2:	1978      	adds	r0, r7, r5
 800e3d4:	f7ff fddc 	bl	800df90 <lorawan_aes_encrypt>
            block = block + 16;
 800e3d8:	3510      	adds	r5, #16
 800e3da:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800e3dc:	3c10      	subs	r4, #16
 800e3de:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800e3e0:	2c00      	cmp	r4, #0
 800e3e2:	d1f4      	bne.n	800e3ce <SecureElementAesEncrypt+0x46>
 800e3e4:	e7e7      	b.n	800e3b6 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800e3e6:	f04f 0802 	mov.w	r8, #2
 800e3ea:	e7e4      	b.n	800e3b6 <SecureElementAesEncrypt+0x2e>
 800e3ec:	f04f 0802 	mov.w	r8, #2
 800e3f0:	e7e1      	b.n	800e3b6 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e3f2:	f04f 0805 	mov.w	r8, #5
 800e3f6:	e7de      	b.n	800e3b6 <SecureElementAesEncrypt+0x2e>

0800e3f8 <SecureElementSetKey>:
{
 800e3f8:	b530      	push	{r4, r5, lr}
 800e3fa:	b085      	sub	sp, #20
    if( key == NULL )
 800e3fc:	2900      	cmp	r1, #0
 800e3fe:	d038      	beq.n	800e472 <SecureElementSetKey+0x7a>
 800e400:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e402:	2300      	movs	r3, #0
 800e404:	2b09      	cmp	r3, #9
 800e406:	d830      	bhi.n	800e46a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e408:	4a1b      	ldr	r2, [pc, #108]	; (800e478 <SecureElementSetKey+0x80>)
 800e40a:	6811      	ldr	r1, [r2, #0]
 800e40c:	461c      	mov	r4, r3
 800e40e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e412:	440a      	add	r2, r1
 800e414:	7c12      	ldrb	r2, [r2, #16]
 800e416:	4282      	cmp	r2, r0
 800e418:	d002      	beq.n	800e420 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e41a:	3301      	adds	r3, #1
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	e7f1      	b.n	800e404 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800e420:	2880      	cmp	r0, #128	; 0x80
 800e422:	d00a      	beq.n	800e43a <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e424:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800e428:	3310      	adds	r3, #16
 800e42a:	440b      	add	r3, r1
 800e42c:	2210      	movs	r2, #16
 800e42e:	4661      	mov	r1, ip
 800e430:	1c58      	adds	r0, r3, #1
 800e432:	f000 f8dc 	bl	800e5ee <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e436:	2500      	movs	r5, #0
 800e438:	e018      	b.n	800e46c <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800e43a:	2300      	movs	r3, #0
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	9301      	str	r3, [sp, #4]
 800e440:	9302      	str	r3, [sp, #8]
 800e442:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800e444:	466b      	mov	r3, sp
 800e446:	227f      	movs	r2, #127	; 0x7f
 800e448:	2110      	movs	r1, #16
 800e44a:	4660      	mov	r0, ip
 800e44c:	f7ff ff9c 	bl	800e388 <SecureElementAesEncrypt>
 800e450:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e452:	4b09      	ldr	r3, [pc, #36]	; (800e478 <SecureElementSetKey+0x80>)
 800e454:	6818      	ldr	r0, [r3, #0]
 800e456:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800e45a:	3410      	adds	r4, #16
 800e45c:	4420      	add	r0, r4
 800e45e:	2210      	movs	r2, #16
 800e460:	4669      	mov	r1, sp
 800e462:	3001      	adds	r0, #1
 800e464:	f000 f8c3 	bl	800e5ee <memcpy1>
                return retval;
 800e468:	e000      	b.n	800e46c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e46a:	2503      	movs	r5, #3
}
 800e46c:	4628      	mov	r0, r5
 800e46e:	b005      	add	sp, #20
 800e470:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e472:	2502      	movs	r5, #2
 800e474:	e7fa      	b.n	800e46c <SecureElementSetKey+0x74>
 800e476:	bf00      	nop
 800e478:	20000e30 	.word	0x20000e30

0800e47c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800e47c:	b1d0      	cbz	r0, 800e4b4 <SecureElementDeriveAndStoreKey+0x38>
{
 800e47e:	b510      	push	{r4, lr}
 800e480:	b084      	sub	sp, #16
 800e482:	4614      	mov	r4, r2
 800e484:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800e486:	2a7f      	cmp	r2, #127	; 0x7f
 800e488:	d101      	bne.n	800e48e <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e48a:	2904      	cmp	r1, #4
 800e48c:	d114      	bne.n	800e4b8 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800e48e:	2300      	movs	r3, #0
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	9301      	str	r3, [sp, #4]
 800e494:	9302      	str	r3, [sp, #8]
 800e496:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800e498:	466b      	mov	r3, sp
 800e49a:	460a      	mov	r2, r1
 800e49c:	2110      	movs	r1, #16
 800e49e:	4660      	mov	r0, ip
 800e4a0:	f7ff ff72 	bl	800e388 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e4a4:	b108      	cbz	r0, 800e4aa <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e4a6:	b004      	add	sp, #16
 800e4a8:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800e4aa:	4669      	mov	r1, sp
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f7ff ffa3 	bl	800e3f8 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e4b2:	e7f8      	b.n	800e4a6 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800e4b4:	2002      	movs	r0, #2
}
 800e4b6:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e4b8:	2003      	movs	r0, #3
 800e4ba:	e7f4      	b.n	800e4a6 <SecureElementDeriveAndStoreKey+0x2a>

0800e4bc <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800e4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800e4c4:	9d07      	ldr	r5, [sp, #28]
 800e4c6:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e4c8:	b37b      	cbz	r3, 800e52a <SecureElementProcessJoinAccept+0x6e>
 800e4ca:	4698      	mov	r8, r3
 800e4cc:	b37d      	cbz	r5, 800e52e <SecureElementProcessJoinAccept+0x72>
 800e4ce:	b386      	cbz	r6, 800e532 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e4d0:	2c21      	cmp	r4, #33	; 0x21
 800e4d2:	d830      	bhi.n	800e536 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e4d4:	b2a7      	uxth	r7, r4
 800e4d6:	463a      	mov	r2, r7
 800e4d8:	4619      	mov	r1, r3
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f000 f887 	bl	800e5ee <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e4e0:	1e79      	subs	r1, r7, #1
 800e4e2:	1c6b      	adds	r3, r5, #1
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	b289      	uxth	r1, r1
 800e4e8:	eb08 0002 	add.w	r0, r8, r2
 800e4ec:	f7ff ff4c 	bl	800e388 <SecureElementAesEncrypt>
 800e4f0:	bb20      	cbnz	r0, 800e53c <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e4f2:	7aeb      	ldrb	r3, [r5, #11]
 800e4f4:	09db      	lsrs	r3, r3, #7
 800e4f6:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800e4f8:	442c      	add	r4, r5
 800e4fa:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800e4fe:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e502:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800e506:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800e50a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800e50e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e512:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800e516:	b99b      	cbnz	r3, 800e540 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e518:	1f39      	subs	r1, r7, #4
 800e51a:	2301      	movs	r3, #1
 800e51c:	b289      	uxth	r1, r1
 800e51e:	4628      	mov	r0, r5
 800e520:	f7ff ff1c 	bl	800e35c <SecureElementVerifyAesCmac>
 800e524:	b140      	cbz	r0, 800e538 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e526:	2001      	movs	r0, #1
 800e528:	e006      	b.n	800e538 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 800e52a:	2002      	movs	r0, #2
 800e52c:	e004      	b.n	800e538 <SecureElementProcessJoinAccept+0x7c>
 800e52e:	2002      	movs	r0, #2
 800e530:	e002      	b.n	800e538 <SecureElementProcessJoinAccept+0x7c>
 800e532:	2002      	movs	r0, #2
 800e534:	e000      	b.n	800e538 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e536:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800e538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e53c:	2007      	movs	r0, #7
 800e53e:	e7fb      	b.n	800e538 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e540:	2004      	movs	r0, #4
 800e542:	e7f9      	b.n	800e538 <SecureElementProcessJoinAccept+0x7c>

0800e544 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800e544:	b140      	cbz	r0, 800e558 <SecureElementSetDevEui+0x14>
{
 800e546:	b508      	push	{r3, lr}
 800e548:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800e54a:	2208      	movs	r2, #8
 800e54c:	4b03      	ldr	r3, [pc, #12]	; (800e55c <SecureElementSetDevEui+0x18>)
 800e54e:	6818      	ldr	r0, [r3, #0]
 800e550:	f000 f84d 	bl	800e5ee <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e554:	2000      	movs	r0, #0
}
 800e556:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e558:	2002      	movs	r0, #2
}
 800e55a:	4770      	bx	lr
 800e55c:	20000e30 	.word	0x20000e30

0800e560 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800e560:	4b01      	ldr	r3, [pc, #4]	; (800e568 <SecureElementGetDevEui+0x8>)
 800e562:	6818      	ldr	r0, [r3, #0]
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	20000e30 	.word	0x20000e30

0800e56c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800e56c:	b148      	cbz	r0, 800e582 <SecureElementSetJoinEui+0x16>
{
 800e56e:	b508      	push	{r3, lr}
 800e570:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800e572:	4b05      	ldr	r3, [pc, #20]	; (800e588 <SecureElementSetJoinEui+0x1c>)
 800e574:	6818      	ldr	r0, [r3, #0]
 800e576:	2208      	movs	r2, #8
 800e578:	4410      	add	r0, r2
 800e57a:	f000 f838 	bl	800e5ee <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e57e:	2000      	movs	r0, #0
}
 800e580:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e582:	2002      	movs	r0, #2
}
 800e584:	4770      	bx	lr
 800e586:	bf00      	nop
 800e588:	20000e30 	.word	0x20000e30

0800e58c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800e58c:	4b01      	ldr	r3, [pc, #4]	; (800e594 <SecureElementGetJoinEui+0x8>)
 800e58e:	6818      	ldr	r0, [r3, #0]
}
 800e590:	3008      	adds	r0, #8
 800e592:	4770      	bx	lr
 800e594:	20000e30 	.word	0x20000e30

0800e598 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e598:	4b09      	ldr	r3, [pc, #36]	; (800e5c0 <rand1+0x28>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	4909      	ldr	r1, [pc, #36]	; (800e5c4 <rand1+0x2c>)
 800e59e:	f243 0039 	movw	r0, #12345	; 0x3039
 800e5a2:	fb01 0002 	mla	r0, r1, r2, r0
 800e5a6:	6018      	str	r0, [r3, #0]
 800e5a8:	2303      	movs	r3, #3
 800e5aa:	fba3 2300 	umull	r2, r3, r3, r0
 800e5ae:	1ac2      	subs	r2, r0, r3
 800e5b0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e5b4:	0f9b      	lsrs	r3, r3, #30
 800e5b6:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800e5ba:	1ac0      	subs	r0, r0, r3
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	20000108 	.word	0x20000108
 800e5c4:	41c64e6d 	.word	0x41c64e6d

0800e5c8 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800e5c8:	4b01      	ldr	r3, [pc, #4]	; (800e5d0 <srand1+0x8>)
 800e5ca:	6018      	str	r0, [r3, #0]
}
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop
 800e5d0:	20000108 	.word	0x20000108

0800e5d4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4605      	mov	r5, r0
 800e5d8:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800e5da:	f7ff ffdd 	bl	800e598 <rand1>
 800e5de:	1b61      	subs	r1, r4, r5
 800e5e0:	3101      	adds	r1, #1
 800e5e2:	fb90 f3f1 	sdiv	r3, r0, r1
 800e5e6:	fb01 0013 	mls	r0, r1, r3, r0
}
 800e5ea:	4428      	add	r0, r5
 800e5ec:	bd38      	pop	{r3, r4, r5, pc}

0800e5ee <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800e5ee:	e004      	b.n	800e5fa <memcpy1+0xc>
    {
        *dst++ = *src++;
 800e5f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5f4:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	1e53      	subs	r3, r2, #1
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	2a00      	cmp	r2, #0
 800e600:	d1f6      	bne.n	800e5f0 <memcpy1+0x2>
    }
}
 800e602:	4770      	bx	lr

0800e604 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800e604:	1e53      	subs	r3, r2, #1
 800e606:	4418      	add	r0, r3
    while( size-- )
 800e608:	e004      	b.n	800e614 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800e60a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e60e:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800e612:	461a      	mov	r2, r3
 800e614:	1e53      	subs	r3, r2, #1
 800e616:	b29b      	uxth	r3, r3
 800e618:	2a00      	cmp	r2, #0
 800e61a:	d1f6      	bne.n	800e60a <memcpyr+0x6>
    }
}
 800e61c:	4770      	bx	lr

0800e61e <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800e61e:	e002      	b.n	800e626 <memset1+0x8>
    {
        *dst++ = value;
 800e620:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800e624:	461a      	mov	r2, r3
 800e626:	1e53      	subs	r3, r2, #1
 800e628:	b29b      	uxth	r3, r3
 800e62a:	2a00      	cmp	r2, #0
 800e62c:	d1f8      	bne.n	800e620 <memset1+0x2>
    }
}
 800e62e:	4770      	bx	lr

0800e630 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800e630:	b1f0      	cbz	r0, 800e670 <Crc32+0x40>
{
 800e632:	b510      	push	{r4, lr}
 800e634:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800e636:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800e63a:	f04f 30ff 	mov.w	r0, #4294967295
 800e63e:	e00e      	b.n	800e65e <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800e640:	f340 0c00 	sbfx	ip, r0, #0, #1
 800e644:	4a0b      	ldr	r2, [pc, #44]	; (800e674 <Crc32+0x44>)
 800e646:	ea0c 0202 	and.w	r2, ip, r2
 800e64a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800e64e:	3301      	adds	r3, #1
 800e650:	b29b      	uxth	r3, r3
 800e652:	2b07      	cmp	r3, #7
 800e654:	d9f4      	bls.n	800e640 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800e656:	f10e 0e01 	add.w	lr, lr, #1
 800e65a:	fa1f fe8e 	uxth.w	lr, lr
 800e65e:	458e      	cmp	lr, r1
 800e660:	d204      	bcs.n	800e66c <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800e662:	f814 300e 	ldrb.w	r3, [r4, lr]
 800e666:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800e668:	2300      	movs	r3, #0
 800e66a:	e7f2      	b.n	800e652 <Crc32+0x22>
        }
    }

    return ~crc;
 800e66c:	43c0      	mvns	r0, r0
}
 800e66e:	bd10      	pop	{r4, pc}
        return 0;
 800e670:	2000      	movs	r0, #0
}
 800e672:	4770      	bx	lr
 800e674:	edb88320 	.word	0xedb88320

0800e678 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800e678:	2001      	movs	r0, #1
 800e67a:	4770      	bx	lr

0800e67c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800e67c:	280a      	cmp	r0, #10
 800e67e:	d807      	bhi.n	800e690 <RadioGetLoRaBandwidthInHz+0x14>
 800e680:	e8df f000 	tbb	[pc, r0]
 800e684:	17110b20 	.word	0x17110b20
 800e688:	061e1c1a 	.word	0x061e1c1a
 800e68c:	0e08      	.short	0x0e08
 800e68e:	14          	.byte	0x14
 800e68f:	00          	.byte	0x00
 800e690:	2000      	movs	r0, #0
 800e692:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800e694:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800e698:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800e69a:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800e69e:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800e6a0:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800e6a4:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800e6a6:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800e6aa:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800e6ac:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800e6b0:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800e6b2:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800e6b6:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800e6b8:	4804      	ldr	r0, [pc, #16]	; (800e6cc <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800e6ba:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800e6bc:	4804      	ldr	r0, [pc, #16]	; (800e6d0 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800e6be:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800e6c0:	4804      	ldr	r0, [pc, #16]	; (800e6d4 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800e6c2:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800e6c4:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop
 800e6cc:	0001e848 	.word	0x0001e848
 800e6d0:	0003d090 	.word	0x0003d090
 800e6d4:	0007a120 	.word	0x0007a120

0800e6d8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e6d8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800e6dc:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e6de:	b953      	cbnz	r3, 800e6f6 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800e6e0:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 800e6e2:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e6e4:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e6e6:	b141      	cbz	r1, 800e6fa <RadioGetGfskTimeOnAirNumerator+0x22>
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	f89d 0000 	ldrb.w	r0, [sp]
 800e6ee:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800e6f0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800e6f4:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	e7f3      	b.n	800e6e2 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	e7f5      	b.n	800e6ea <RadioGetGfskTimeOnAirNumerator+0x12>

0800e6fe <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e6fe:	b570      	push	{r4, r5, r6, lr}
 800e700:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800e704:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800e708:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800e70a:	f1a1 0c05 	sub.w	ip, r1, #5
 800e70e:	f1bc 0f01 	cmp.w	ip, #1
 800e712:	d932      	bls.n	800e77a <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e714:	b918      	cbnz	r0, 800e71e <RadioGetLoRaTimeOnAirNumerator+0x20>
 800e716:	f1a1 060b 	sub.w	r6, r1, #11
 800e71a:	2e01      	cmp	r6, #1
 800e71c:	d935      	bls.n	800e78a <RadioGetLoRaTimeOnAirNumerator+0x8c>
 800e71e:	2801      	cmp	r0, #1
 800e720:	d02f      	beq.n	800e782 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800e722:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e724:	f89d e014 	ldrb.w	lr, [sp, #20]
 800e728:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800e72c:	b38d      	cbz	r5, 800e792 <RadioGetLoRaTimeOnAirNumerator+0x94>
 800e72e:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e732:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800e734:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800e736:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800e73a:	b36c      	cbz	r4, 800e798 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 800e73c:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800e740:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800e742:	2906      	cmp	r1, #6
 800e744:	d904      	bls.n	800e750 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800e746:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800e74a:	b10e      	cbz	r6, 800e750 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800e74c:	1e88      	subs	r0, r1, #2
 800e74e:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800e750:	f1bc 0f00 	cmp.w	ip, #0
 800e754:	db23      	blt.n	800e79e <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800e756:	4484      	add	ip, r0
 800e758:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e75c:	fb9c fcf0 	sdiv	ip, ip, r0
 800e760:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800e764:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800e768:	2906      	cmp	r1, #6
 800e76a:	d801      	bhi.n	800e770 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 800e76c:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800e770:	0080      	lsls	r0, r0, #2
 800e772:	3001      	adds	r0, #1
 800e774:	3902      	subs	r1, #2
}
 800e776:	4088      	lsls	r0, r1
 800e778:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800e77a:	2b0b      	cmp	r3, #11
 800e77c:	d8ca      	bhi.n	800e714 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800e77e:	230c      	movs	r3, #12
 800e780:	e7c8      	b.n	800e714 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e782:	290c      	cmp	r1, #12
 800e784:	d003      	beq.n	800e78e <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800e786:	2600      	movs	r6, #0
 800e788:	e7cc      	b.n	800e724 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800e78a:	2601      	movs	r6, #1
 800e78c:	e7ca      	b.n	800e724 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800e78e:	2601      	movs	r6, #1
 800e790:	e7c8      	b.n	800e724 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800e792:	f04f 0c00 	mov.w	ip, #0
 800e796:	e7cc      	b.n	800e732 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800e798:	f04f 0c14 	mov.w	ip, #20
 800e79c:	e7d0      	b.n	800e740 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800e79e:	f04f 0c00 	mov.w	ip, #0
 800e7a2:	e7d8      	b.n	800e756 <RadioGetLoRaTimeOnAirNumerator+0x58>

0800e7a4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800e7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	460e      	mov	r6, r1
 800e7aa:	4615      	mov	r5, r2
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800e7b2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800e7b6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800e7ba:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800e7be:	b148      	cbz	r0, 800e7d4 <RadioTimeOnAir+0x30>
 800e7c0:	2801      	cmp	r0, #1
 800e7c2:	d012      	beq.n	800e7ea <RadioTimeOnAir+0x46>
 800e7c4:	2501      	movs	r5, #1
 800e7c6:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 800e7c8:	442c      	add	r4, r5
 800e7ca:	1e60      	subs	r0, r4, #1
}
 800e7cc:	fbb0 f0f5 	udiv	r0, r0, r5
 800e7d0:	b005      	add	sp, #20
 800e7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800e7d4:	f8cd c004 	str.w	ip, [sp, #4]
 800e7d8:	9700      	str	r7, [sp, #0]
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f7ff ff7c 	bl	800e6d8 <RadioGetGfskTimeOnAirNumerator>
 800e7e0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800e7e4:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800e7e8:	e7ee      	b.n	800e7c8 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800e7ea:	f8cd c008 	str.w	ip, [sp, #8]
 800e7ee:	9701      	str	r7, [sp, #4]
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	460a      	mov	r2, r1
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f7ff ff80 	bl	800e6fe <RadioGetLoRaTimeOnAirNumerator>
 800e7fe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800e802:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800e806:	4b03      	ldr	r3, [pc, #12]	; (800e814 <RadioTimeOnAir+0x70>)
 800e808:	5d98      	ldrb	r0, [r3, r6]
 800e80a:	f7ff ff37 	bl	800e67c <RadioGetLoRaBandwidthInHz>
 800e80e:	4605      	mov	r5, r0
        break;
 800e810:	e7da      	b.n	800e7c8 <RadioTimeOnAir+0x24>
 800e812:	bf00      	nop
 800e814:	08011d0c 	.word	0x08011d0c

0800e818 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800e818:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800e81a:	4b05      	ldr	r3, [pc, #20]	; (800e830 <RadioOnTxTimeoutProcess+0x18>)
 800e81c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e820:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e822:	4b04      	ldr	r3, [pc, #16]	; (800e834 <RadioOnTxTimeoutProcess+0x1c>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	b113      	cbz	r3, 800e82e <RadioOnTxTimeoutProcess+0x16>
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	b103      	cbz	r3, 800e82e <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800e82c:	4798      	blx	r3
    }
}
 800e82e:	bd08      	pop	{r3, pc}
 800e830:	48000400 	.word	0x48000400
 800e834:	20000f34 	.word	0x20000f34

0800e838 <RadioOnTxTimeoutIrq>:
{
 800e838:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800e83a:	f7ff ffed 	bl	800e818 <RadioOnTxTimeoutProcess>
}
 800e83e:	bd08      	pop	{r3, pc}

0800e840 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800e840:	b508      	push	{r3, lr}
 800e842:	4b05      	ldr	r3, [pc, #20]	; (800e858 <RadioOnRxTimeoutProcess+0x18>)
 800e844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e848:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e84a:	4b04      	ldr	r3, [pc, #16]	; (800e85c <RadioOnRxTimeoutProcess+0x1c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	b113      	cbz	r3, 800e856 <RadioOnRxTimeoutProcess+0x16>
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	b103      	cbz	r3, 800e856 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800e854:	4798      	blx	r3
    }
}
 800e856:	bd08      	pop	{r3, pc}
 800e858:	48000400 	.word	0x48000400
 800e85c:	20000f34 	.word	0x20000f34

0800e860 <RadioOnRxTimeoutIrq>:
{
 800e860:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800e862:	f7ff ffed 	bl	800e840 <RadioOnRxTimeoutProcess>
}
 800e866:	bd08      	pop	{r3, pc}

0800e868 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800e868:	f04f 30ff 	mov.w	r0, #4294967295
 800e86c:	4770      	bx	lr

0800e86e <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800e86e:	f04f 30ff 	mov.w	r0, #4294967295
 800e872:	4770      	bx	lr

0800e874 <RadioTxCw>:
{
 800e874:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800e876:	f001 fbab 	bl	800ffd0 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800e87a:	2101      	movs	r1, #1
 800e87c:	f001 fb94 	bl	800ffa8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800e880:	f000 feac 	bl	800f5dc <SUBGRF_SetTxContinuousWave>
}
 800e884:	bd08      	pop	{r3, pc}
	...

0800e888 <RadioSetRxDutyCycle>:
{
 800e888:	b570      	push	{r4, r5, r6, lr}
 800e88a:	4604      	mov	r4, r0
 800e88c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800e88e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800e892:	4e09      	ldr	r6, [pc, #36]	; (800e8b8 <RadioSetRxDutyCycle+0x30>)
 800e894:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e896:	2300      	movs	r3, #0
 800e898:	461a      	mov	r2, r3
 800e89a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e89e:	4608      	mov	r0, r1
 800e8a0:	f000 ff47 	bl	800f732 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800e8aa:	f001 fb7d 	bl	800ffa8 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f000 fe63 	bl	800f57c <SUBGRF_SetRxDutyCycle>
}
 800e8b6:	bd70      	pop	{r4, r5, r6, pc}
 800e8b8:	20000f50 	.word	0x20000f50

0800e8bc <RadioRxBoosted>:
{
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800e8c0:	f001 fc57 	bl	8010172 <RFW_Is_Init>
 800e8c4:	2801      	cmp	r0, #1
 800e8c6:	d019      	beq.n	800e8fc <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	f240 2162 	movw	r1, #610	; 0x262
 800e8d0:	4608      	mov	r0, r1
 800e8d2:	f000 ff2e 	bl	800f732 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800e8d6:	b9a4      	cbnz	r4, 800e902 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800e8d8:	4c11      	ldr	r4, [pc, #68]	; (800e920 <RadioRxBoosted+0x64>)
 800e8da:	2100      	movs	r1, #0
 800e8dc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800e8de:	4b11      	ldr	r3, [pc, #68]	; (800e924 <RadioRxBoosted+0x68>)
 800e8e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e8e4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800e8e6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800e8ea:	f001 fb5d 	bl	800ffa8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800e8ee:	7863      	ldrb	r3, [r4, #1]
 800e8f0:	b183      	cbz	r3, 800e914 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800e8f2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e8f6:	f000 ffef 	bl	800f8d8 <SUBGRF_SetRxBoosted>
}
 800e8fa:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800e8fc:	f001 fc41 	bl	8010182 <RFW_ReceiveInit>
 800e900:	e7e9      	b.n	800e8d6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e902:	4d09      	ldr	r5, [pc, #36]	; (800e928 <RadioRxBoosted+0x6c>)
 800e904:	4621      	mov	r1, r4
 800e906:	4628      	mov	r0, r5
 800e908:	f002 f90e 	bl	8010b28 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e90c:	4628      	mov	r0, r5
 800e90e:	f002 f8c5 	bl	8010a9c <UTIL_TIMER_Start>
 800e912:	e7e1      	b.n	800e8d8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800e914:	4b02      	ldr	r3, [pc, #8]	; (800e920 <RadioRxBoosted+0x64>)
 800e916:	6898      	ldr	r0, [r3, #8]
 800e918:	0180      	lsls	r0, r0, #6
 800e91a:	f000 ffdd 	bl	800f8d8 <SUBGRF_SetRxBoosted>
}
 800e91e:	e7ec      	b.n	800e8fa <RadioRxBoosted+0x3e>
 800e920:	20000f50 	.word	0x20000f50
 800e924:	48000400 	.word	0x48000400
 800e928:	20000f38 	.word	0x20000f38

0800e92c <RadioStandby>:
{
 800e92c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800e92e:	2000      	movs	r0, #0
 800e930:	f000 fdd6 	bl	800f4e0 <SUBGRF_SetStandby>
}
 800e934:	bd08      	pop	{r3, pc}

0800e936 <RadioWrite>:
{
 800e936:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800e938:	f000 ffbe 	bl	800f8b8 <SUBGRF_WriteRegister>
}
 800e93c:	bd08      	pop	{r3, pc}
	...

0800e940 <RadioTxPrbs>:
{
 800e940:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800e942:	2101      	movs	r1, #1
 800e944:	4b07      	ldr	r3, [pc, #28]	; (800e964 <RadioTxPrbs+0x24>)
 800e946:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800e94a:	f001 fb2d 	bl	800ffa8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800e94e:	212d      	movs	r1, #45	; 0x2d
 800e950:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e954:	f7ff ffef 	bl	800e936 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800e958:	f000 fe47 	bl	800f5ea <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800e95c:	4802      	ldr	r0, [pc, #8]	; (800e968 <RadioTxPrbs+0x28>)
 800e95e:	f000 fdd9 	bl	800f514 <SUBGRF_SetTx>
}
 800e962:	bd08      	pop	{r3, pc}
 800e964:	20000f50 	.word	0x20000f50
 800e968:	000fffff 	.word	0x000fffff

0800e96c <RadioRead>:
{
 800e96c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800e96e:	f001 f895 	bl	800fa9c <SUBGRF_ReadRegister>
}
 800e972:	bd08      	pop	{r3, pc}

0800e974 <RadioGetStatus>:
{
 800e974:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800e976:	f000 fdad 	bl	800f4d4 <SUBGRF_GetOperatingMode>
 800e97a:	2805      	cmp	r0, #5
 800e97c:	d007      	beq.n	800e98e <RadioGetStatus+0x1a>
 800e97e:	2807      	cmp	r0, #7
 800e980:	d007      	beq.n	800e992 <RadioGetStatus+0x1e>
 800e982:	2804      	cmp	r0, #4
 800e984:	d001      	beq.n	800e98a <RadioGetStatus+0x16>
            return RF_IDLE;
 800e986:	2000      	movs	r0, #0
}
 800e988:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800e98a:	2002      	movs	r0, #2
 800e98c:	e7fc      	b.n	800e988 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800e98e:	2001      	movs	r0, #1
 800e990:	e7fa      	b.n	800e988 <RadioGetStatus+0x14>
            return RF_CAD;
 800e992:	2003      	movs	r0, #3
 800e994:	e7f8      	b.n	800e988 <RadioGetStatus+0x14>
	...

0800e998 <RadioIrqProcess>:
{
 800e998:	b530      	push	{r4, r5, lr}
 800e99a:	b083      	sub	sp, #12
    uint8_t size = 0;
 800e99c:	2300      	movs	r3, #0
 800e99e:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800e9a2:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800e9a4:	4ba5      	ldr	r3, [pc, #660]	; (800ec3c <RadioIrqProcess+0x2a4>)
 800e9a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e9aa:	2b20      	cmp	r3, #32
 800e9ac:	d829      	bhi.n	800ea02 <RadioIrqProcess+0x6a>
 800e9ae:	b21a      	sxth	r2, r3
 800e9b0:	2a00      	cmp	r2, #0
 800e9b2:	f000 8140 	beq.w	800ec36 <RadioIrqProcess+0x29e>
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	2b1f      	cmp	r3, #31
 800e9ba:	f200 813c 	bhi.w	800ec36 <RadioIrqProcess+0x29e>
 800e9be:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e9c2:	0063      	.short	0x0063
 800e9c4:	013a007f 	.word	0x013a007f
 800e9c8:	013a00f7 	.word	0x013a00f7
 800e9cc:	013a013a 	.word	0x013a013a
 800e9d0:	013a0127 	.word	0x013a0127
 800e9d4:	013a013a 	.word	0x013a013a
 800e9d8:	013a013a 	.word	0x013a013a
 800e9dc:	013a013a 	.word	0x013a013a
 800e9e0:	013a0134 	.word	0x013a0134
 800e9e4:	013a013a 	.word	0x013a013a
 800e9e8:	013a013a 	.word	0x013a013a
 800e9ec:	013a013a 	.word	0x013a013a
 800e9f0:	013a013a 	.word	0x013a013a
 800e9f4:	013a013a 	.word	0x013a013a
 800e9f8:	013a013a 	.word	0x013a013a
 800e9fc:	013a013a 	.word	0x013a013a
 800ea00:	0155      	.short	0x0155
 800ea02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea06:	f000 80b3 	beq.w	800eb70 <RadioIrqProcess+0x1d8>
 800ea0a:	d928      	bls.n	800ea5e <RadioIrqProcess+0xc6>
 800ea0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea10:	f040 8111 	bne.w	800ec36 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800ea14:	4b8a      	ldr	r3, [pc, #552]	; (800ec40 <RadioIrqProcess+0x2a8>)
 800ea16:	2201      	movs	r2, #1
 800ea18:	2100      	movs	r1, #0
 800ea1a:	2002      	movs	r0, #2
 800ea1c:	f001 fc90 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800ea20:	f000 fd58 	bl	800f4d4 <SUBGRF_GetOperatingMode>
 800ea24:	2804      	cmp	r0, #4
 800ea26:	f000 80b0 	beq.w	800eb8a <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800ea2a:	f000 fd53 	bl	800f4d4 <SUBGRF_GetOperatingMode>
 800ea2e:	2805      	cmp	r0, #5
 800ea30:	f040 8101 	bne.w	800ec36 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800ea34:	4b83      	ldr	r3, [pc, #524]	; (800ec44 <RadioIrqProcess+0x2ac>)
 800ea36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ea3a:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 800ea3c:	4882      	ldr	r0, [pc, #520]	; (800ec48 <RadioIrqProcess+0x2b0>)
 800ea3e:	f001 ffd3 	bl	80109e8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ea42:	2000      	movs	r0, #0
 800ea44:	f000 fd4c 	bl	800f4e0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ea48:	4b80      	ldr	r3, [pc, #512]	; (800ec4c <RadioIrqProcess+0x2b4>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 80f2 	beq.w	800ec36 <RadioIrqProcess+0x29e>
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f000 80ee 	beq.w	800ec36 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800ea5a:	4798      	blx	r3
 800ea5c:	e0eb      	b.n	800ec36 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800ea5e:	2b40      	cmp	r3, #64	; 0x40
 800ea60:	f000 811d 	beq.w	800ec9e <RadioIrqProcess+0x306>
 800ea64:	2b80      	cmp	r3, #128	; 0x80
 800ea66:	f040 80e6 	bne.w	800ec36 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800ea6a:	2000      	movs	r0, #0
 800ea6c:	f000 fd38 	bl	800f4e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ea70:	4b76      	ldr	r3, [pc, #472]	; (800ec4c <RadioIrqProcess+0x2b4>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 80de 	beq.w	800ec36 <RadioIrqProcess+0x29e>
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f000 80da 	beq.w	800ec36 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800ea82:	2000      	movs	r0, #0
 800ea84:	4798      	blx	r3
 800ea86:	e0d6      	b.n	800ec36 <RadioIrqProcess+0x29e>
 800ea88:	4b6e      	ldr	r3, [pc, #440]	; (800ec44 <RadioIrqProcess+0x2ac>)
 800ea8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ea8e:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 800ea90:	486f      	ldr	r0, [pc, #444]	; (800ec50 <RadioIrqProcess+0x2b8>)
 800ea92:	f001 ffa9 	bl	80109e8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800ea96:	2000      	movs	r0, #0
 800ea98:	f000 fd22 	bl	800f4e0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800ea9c:	f001 fb6b 	bl	8010176 <RFW_Is_LongPacketModeEnabled>
 800eaa0:	2801      	cmp	r0, #1
 800eaa2:	d00a      	beq.n	800eaba <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800eaa4:	4b69      	ldr	r3, [pc, #420]	; (800ec4c <RadioIrqProcess+0x2b4>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f000 80c4 	beq.w	800ec36 <RadioIrqProcess+0x29e>
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f000 80c0 	beq.w	800ec36 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800eab6:	4798      	blx	r3
 800eab8:	e0bd      	b.n	800ec36 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800eaba:	f001 fb65 	bl	8010188 <RFW_DeInit_TxLongPacket>
 800eabe:	e7f1      	b.n	800eaa4 <RadioIrqProcess+0x10c>
 800eac0:	4b60      	ldr	r3, [pc, #384]	; (800ec44 <RadioIrqProcess+0x2ac>)
 800eac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eac6:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 800eac8:	485f      	ldr	r0, [pc, #380]	; (800ec48 <RadioIrqProcess+0x2b0>)
 800eaca:	f001 ff8d 	bl	80109e8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800eace:	4b5b      	ldr	r3, [pc, #364]	; (800ec3c <RadioIrqProcess+0x2a4>)
 800ead0:	785b      	ldrb	r3, [r3, #1]
 800ead2:	b303      	cbz	r3, 800eb16 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800ead4:	22ff      	movs	r2, #255	; 0xff
 800ead6:	f10d 0107 	add.w	r1, sp, #7
 800eada:	485e      	ldr	r0, [pc, #376]	; (800ec54 <RadioIrqProcess+0x2bc>)
 800eadc:	f001 fa4a 	bl	800ff74 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800eae0:	485d      	ldr	r0, [pc, #372]	; (800ec58 <RadioIrqProcess+0x2c0>)
 800eae2:	f000 fead 	bl	800f840 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800eae6:	4b59      	ldr	r3, [pc, #356]	; (800ec4c <RadioIrqProcess+0x2b4>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 80a3 	beq.w	800ec36 <RadioIrqProcess+0x29e>
 800eaf0:	689c      	ldr	r4, [r3, #8]
 800eaf2:	2c00      	cmp	r4, #0
 800eaf4:	f000 809f 	beq.w	800ec36 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800eaf8:	4b50      	ldr	r3, [pc, #320]	; (800ec3c <RadioIrqProcess+0x2a4>)
 800eafa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d11d      	bne.n	800eb3e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800eb02:	4a4e      	ldr	r2, [pc, #312]	; (800ec3c <RadioIrqProcess+0x2a4>)
 800eb04:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800eb08:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800eb0c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eb10:	4850      	ldr	r0, [pc, #320]	; (800ec54 <RadioIrqProcess+0x2bc>)
 800eb12:	47a0      	blx	r4
                break;
 800eb14:	e08f      	b.n	800ec36 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800eb16:	2000      	movs	r0, #0
 800eb18:	f000 fce2 	bl	800f4e0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	f640 1002 	movw	r0, #2306	; 0x902
 800eb22:	f000 fec9 	bl	800f8b8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800eb26:	f640 1044 	movw	r0, #2372	; 0x944
 800eb2a:	f000 ffb7 	bl	800fa9c <SUBGRF_ReadRegister>
 800eb2e:	f040 0102 	orr.w	r1, r0, #2
 800eb32:	b2c9      	uxtb	r1, r1
 800eb34:	f640 1044 	movw	r0, #2372	; 0x944
 800eb38:	f000 febe 	bl	800f8b8 <SUBGRF_WriteRegister>
 800eb3c:	e7ca      	b.n	800ead4 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800eb3e:	4c3f      	ldr	r4, [pc, #252]	; (800ec3c <RadioIrqProcess+0x2a4>)
 800eb40:	4669      	mov	r1, sp
 800eb42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800eb44:	f001 faca 	bl	80100dc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800eb48:	4b40      	ldr	r3, [pc, #256]	; (800ec4c <RadioIrqProcess+0x2b4>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	689d      	ldr	r5, [r3, #8]
 800eb4e:	9b00      	ldr	r3, [sp, #0]
 800eb50:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800eb54:	4a41      	ldr	r2, [pc, #260]	; (800ec5c <RadioIrqProcess+0x2c4>)
 800eb56:	fb82 1203 	smull	r1, r2, r2, r3
 800eb5a:	17db      	asrs	r3, r3, #31
 800eb5c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800eb60:	b25b      	sxtb	r3, r3
 800eb62:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800eb66:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eb6a:	483a      	ldr	r0, [pc, #232]	; (800ec54 <RadioIrqProcess+0x2bc>)
 800eb6c:	47a8      	blx	r5
                break;
 800eb6e:	e062      	b.n	800ec36 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800eb70:	2000      	movs	r0, #0
 800eb72:	f000 fcb5 	bl	800f4e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800eb76:	4b35      	ldr	r3, [pc, #212]	; (800ec4c <RadioIrqProcess+0x2b4>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d05b      	beq.n	800ec36 <RadioIrqProcess+0x29e>
 800eb7e:	699b      	ldr	r3, [r3, #24]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d058      	beq.n	800ec36 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800eb84:	2001      	movs	r0, #1
 800eb86:	4798      	blx	r3
 800eb88:	e055      	b.n	800ec36 <RadioIrqProcess+0x29e>
 800eb8a:	4b2e      	ldr	r3, [pc, #184]	; (800ec44 <RadioIrqProcess+0x2ac>)
 800eb8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eb90:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 800eb92:	482f      	ldr	r0, [pc, #188]	; (800ec50 <RadioIrqProcess+0x2b8>)
 800eb94:	f001 ff28 	bl	80109e8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800eb98:	2000      	movs	r0, #0
 800eb9a:	f000 fca1 	bl	800f4e0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800eb9e:	4b2b      	ldr	r3, [pc, #172]	; (800ec4c <RadioIrqProcess+0x2b4>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d047      	beq.n	800ec36 <RadioIrqProcess+0x29e>
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d044      	beq.n	800ec36 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800ebac:	4798      	blx	r3
 800ebae:	e042      	b.n	800ec36 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800ebb0:	4b2b      	ldr	r3, [pc, #172]	; (800ec60 <RadioIrqProcess+0x2c8>)
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	2002      	movs	r0, #2
 800ebb8:	f001 fbc2 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800ebbc:	4b1f      	ldr	r3, [pc, #124]	; (800ec3c <RadioIrqProcess+0x2a4>)
 800ebbe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800ebc0:	b3c9      	cbz	r1, 800ec36 <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 800ebc2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ebc6:	f640 1003 	movw	r0, #2307	; 0x903
 800ebca:	f7ff feb4 	bl	800e936 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 800ebce:	4c1b      	ldr	r4, [pc, #108]	; (800ec3c <RadioIrqProcess+0x2a4>)
 800ebd0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800ebd4:	f640 1004 	movw	r0, #2308	; 0x904
 800ebd8:	f7ff fead 	bl	800e936 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 800ebdc:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800ebe0:	f640 1005 	movw	r0, #2309	; 0x905
 800ebe4:	f7ff fea7 	bl	800e936 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 800ebe8:	f640 1002 	movw	r0, #2306	; 0x902
 800ebec:	f7ff febe 	bl	800e96c <RadioRead>
 800ebf0:	f040 0101 	orr.w	r1, r0, #1
 800ebf4:	b2c9      	uxtb	r1, r1
 800ebf6:	f640 1002 	movw	r0, #2306	; 0x902
 800ebfa:	f7ff fe9c 	bl	800e936 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 800ebfe:	2200      	movs	r2, #0
 800ec00:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ec02:	4613      	mov	r3, r2
 800ec04:	f240 2162 	movw	r1, #610	; 0x262
 800ec08:	4608      	mov	r0, r1
 800ec0a:	f000 fd92 	bl	800f732 <SUBGRF_SetDioIrqParams>
 800ec0e:	e012      	b.n	800ec36 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800ec10:	4b14      	ldr	r3, [pc, #80]	; (800ec64 <RadioIrqProcess+0x2cc>)
 800ec12:	2201      	movs	r2, #1
 800ec14:	2100      	movs	r1, #0
 800ec16:	2002      	movs	r0, #2
 800ec18:	f001 fb92 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800ec1c:	f001 faa9 	bl	8010172 <RFW_Is_Init>
 800ec20:	2801      	cmp	r0, #1
 800ec22:	d108      	bne.n	800ec36 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800ec24:	f001 fab1 	bl	801018a <RFW_ReceivePayload>
 800ec28:	e005      	b.n	800ec36 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800ec2a:	4b0f      	ldr	r3, [pc, #60]	; (800ec68 <RadioIrqProcess+0x2d0>)
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	2100      	movs	r1, #0
 800ec30:	2002      	movs	r0, #2
 800ec32:	f001 fb85 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
}
 800ec36:	b003      	add	sp, #12
 800ec38:	bd30      	pop	{r4, r5, pc}
 800ec3a:	bf00      	nop
 800ec3c:	20000f50 	.word	0x20000f50
 800ec40:	08011ca0 	.word	0x08011ca0
 800ec44:	48000400 	.word	0x48000400
 800ec48:	20000f38 	.word	0x20000f38
 800ec4c:	20000f34 	.word	0x20000f34
 800ec50:	20000fac 	.word	0x20000fac
 800ec54:	20000e34 	.word	0x20000e34
 800ec58:	20000f74 	.word	0x20000f74
 800ec5c:	10624dd3 	.word	0x10624dd3
 800ec60:	08011cb4 	.word	0x08011cb4
 800ec64:	08011cc0 	.word	0x08011cc0
 800ec68:	08011ccc 	.word	0x08011ccc
        TimerStop( &RxTimeoutTimer );
 800ec6c:	4817      	ldr	r0, [pc, #92]	; (800eccc <RadioIrqProcess+0x334>)
 800ec6e:	f001 febb 	bl	80109e8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ec72:	4b17      	ldr	r3, [pc, #92]	; (800ecd0 <RadioIrqProcess+0x338>)
 800ec74:	785b      	ldrb	r3, [r3, #1]
 800ec76:	b173      	cbz	r3, 800ec96 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ec78:	4b16      	ldr	r3, [pc, #88]	; (800ecd4 <RadioIrqProcess+0x33c>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d0da      	beq.n	800ec36 <RadioIrqProcess+0x29e>
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d0d7      	beq.n	800ec36 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800ec86:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800ec88:	4b13      	ldr	r3, [pc, #76]	; (800ecd8 <RadioIrqProcess+0x340>)
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	2002      	movs	r0, #2
 800ec90:	f001 fb56 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
 800ec94:	e7cf      	b.n	800ec36 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800ec96:	2000      	movs	r0, #0
 800ec98:	f000 fc22 	bl	800f4e0 <SUBGRF_SetStandby>
 800ec9c:	e7ec      	b.n	800ec78 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800ec9e:	4b0f      	ldr	r3, [pc, #60]	; (800ecdc <RadioIrqProcess+0x344>)
 800eca0:	2201      	movs	r2, #1
 800eca2:	2100      	movs	r1, #0
 800eca4:	2002      	movs	r0, #2
 800eca6:	f001 fb4b 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800ecaa:	4b09      	ldr	r3, [pc, #36]	; (800ecd0 <RadioIrqProcess+0x338>)
 800ecac:	785b      	ldrb	r3, [r3, #1]
 800ecae:	b143      	cbz	r3, 800ecc2 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ecb0:	4b08      	ldr	r3, [pc, #32]	; (800ecd4 <RadioIrqProcess+0x33c>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d0be      	beq.n	800ec36 <RadioIrqProcess+0x29e>
 800ecb8:	691b      	ldr	r3, [r3, #16]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d0bb      	beq.n	800ec36 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800ecbe:	4798      	blx	r3
}
 800ecc0:	e7b9      	b.n	800ec36 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800ecc2:	2000      	movs	r0, #0
 800ecc4:	f000 fc0c 	bl	800f4e0 <SUBGRF_SetStandby>
 800ecc8:	e7f2      	b.n	800ecb0 <RadioIrqProcess+0x318>
 800ecca:	bf00      	nop
 800eccc:	20000f38 	.word	0x20000f38
 800ecd0:	20000f50 	.word	0x20000f50
 800ecd4:	20000f34 	.word	0x20000f34
 800ecd8:	08011cd8 	.word	0x08011cd8
 800ecdc:	08011ce4 	.word	0x08011ce4

0800ece0 <RadioOnDioIrq>:
{
 800ece0:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800ece2:	4b03      	ldr	r3, [pc, #12]	; (800ecf0 <RadioOnDioIrq+0x10>)
 800ece4:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800ece8:	f7ff fe56 	bl	800e998 <RadioIrqProcess>
}
 800ecec:	bd08      	pop	{r3, pc}
 800ecee:	bf00      	nop
 800ecf0:	20000f50 	.word	0x20000f50

0800ecf4 <RadioGetWakeupTime>:
{
 800ecf4:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800ecf6:	f001 f982 	bl	800fffe <SUBGRF_GetRadioWakeUpTime>
}
 800ecfa:	3003      	adds	r0, #3
 800ecfc:	bd08      	pop	{r3, pc}
	...

0800ed00 <RadioSetMaxPayloadLength>:
{
 800ed00:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800ed02:	2801      	cmp	r0, #1
 800ed04:	d004      	beq.n	800ed10 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800ed06:	4b0a      	ldr	r3, [pc, #40]	; (800ed30 <RadioSetMaxPayloadLength+0x30>)
 800ed08:	7d5b      	ldrb	r3, [r3, #21]
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d008      	beq.n	800ed20 <RadioSetMaxPayloadLength+0x20>
}
 800ed0e:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800ed10:	4b08      	ldr	r3, [pc, #32]	; (800ed34 <RadioSetMaxPayloadLength+0x34>)
 800ed12:	7019      	strb	r1, [r3, #0]
 800ed14:	4806      	ldr	r0, [pc, #24]	; (800ed30 <RadioSetMaxPayloadLength+0x30>)
 800ed16:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ed18:	300e      	adds	r0, #14
 800ed1a:	f001 f843 	bl	800fda4 <SUBGRF_SetPacketParams>
 800ed1e:	e7f6      	b.n	800ed0e <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800ed20:	4b04      	ldr	r3, [pc, #16]	; (800ed34 <RadioSetMaxPayloadLength+0x34>)
 800ed22:	7019      	strb	r1, [r3, #0]
 800ed24:	4802      	ldr	r0, [pc, #8]	; (800ed30 <RadioSetMaxPayloadLength+0x30>)
 800ed26:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ed28:	300e      	adds	r0, #14
 800ed2a:	f001 f83b 	bl	800fda4 <SUBGRF_SetPacketParams>
}
 800ed2e:	e7ee      	b.n	800ed0e <RadioSetMaxPayloadLength+0xe>
 800ed30:	20000f50 	.word	0x20000f50
 800ed34:	2000010c 	.word	0x2000010c

0800ed38 <RadioReadRegisters>:
{
 800ed38:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800ed3a:	f001 f8a5 	bl	800fe88 <SUBGRF_ReadRegisters>
}
 800ed3e:	bd08      	pop	{r3, pc}

0800ed40 <RadioWriteRegisters>:
{
 800ed40:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800ed42:	f000 ffed 	bl	800fd20 <SUBGRF_WriteRegisters>
}
 800ed46:	bd08      	pop	{r3, pc}

0800ed48 <RadioRssi>:
{
 800ed48:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800ed4a:	f000 fd6b 	bl	800f824 <SUBGRF_GetRssiInst>
}
 800ed4e:	b200      	sxth	r0, r0
 800ed50:	bd08      	pop	{r3, pc}
	...

0800ed54 <RadioSetTxContinuousWave>:
{
 800ed54:	b538      	push	{r3, r4, r5, lr}
 800ed56:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800ed58:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ed5c:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 800ed60:	f000 fd20 	bl	800f7a4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800ed64:	4628      	mov	r0, r5
 800ed66:	f001 f933 	bl	800ffd0 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800ed6a:	2101      	movs	r1, #1
 800ed6c:	f001 f91c 	bl	800ffa8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ed70:	f000 fc34 	bl	800f5dc <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800ed74:	4d04      	ldr	r5, [pc, #16]	; (800ed88 <RadioSetTxContinuousWave+0x34>)
 800ed76:	4621      	mov	r1, r4
 800ed78:	4628      	mov	r0, r5
 800ed7a:	f001 fed5 	bl	8010b28 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ed7e:	4628      	mov	r0, r5
 800ed80:	f001 fe8c 	bl	8010a9c <UTIL_TIMER_Start>
}
 800ed84:	bd38      	pop	{r3, r4, r5, pc}
 800ed86:	bf00      	nop
 800ed88:	20000fac 	.word	0x20000fac

0800ed8c <RadioSetChannel>:
{
 800ed8c:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800ed8e:	f000 fd09 	bl	800f7a4 <SUBGRF_SetRfFrequency>
}
 800ed92:	bd08      	pop	{r3, pc}

0800ed94 <RadioStartCad>:
{
 800ed94:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ed96:	2100      	movs	r1, #0
 800ed98:	4b07      	ldr	r3, [pc, #28]	; (800edb8 <RadioStartCad+0x24>)
 800ed9a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800ed9e:	f001 f903 	bl	800ffa8 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800eda2:	2300      	movs	r3, #0
 800eda4:	461a      	mov	r2, r3
 800eda6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800edaa:	4608      	mov	r0, r1
 800edac:	f000 fcc1 	bl	800f732 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800edb0:	f000 fc08 	bl	800f5c4 <SUBGRF_SetCad>
}
 800edb4:	bd08      	pop	{r3, pc}
 800edb6:	bf00      	nop
 800edb8:	20000f50 	.word	0x20000f50

0800edbc <RadioRx>:
{
 800edbc:	b538      	push	{r3, r4, r5, lr}
 800edbe:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800edc0:	f001 f9d7 	bl	8010172 <RFW_Is_Init>
 800edc4:	2801      	cmp	r0, #1
 800edc6:	d019      	beq.n	800edfc <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800edc8:	2300      	movs	r3, #0
 800edca:	461a      	mov	r2, r3
 800edcc:	f240 2162 	movw	r1, #610	; 0x262
 800edd0:	4608      	mov	r0, r1
 800edd2:	f000 fcae 	bl	800f732 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800edd6:	b9a4      	cbnz	r4, 800ee02 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800edd8:	4c11      	ldr	r4, [pc, #68]	; (800ee20 <RadioRx+0x64>)
 800edda:	2100      	movs	r1, #0
 800eddc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800edde:	4b11      	ldr	r3, [pc, #68]	; (800ee24 <RadioRx+0x68>)
 800ede0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ede4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ede6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800edea:	f001 f8dd 	bl	800ffa8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800edee:	7863      	ldrb	r3, [r4, #1]
 800edf0:	b183      	cbz	r3, 800ee14 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800edf2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800edf6:	f000 fba7 	bl	800f548 <SUBGRF_SetRx>
}
 800edfa:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800edfc:	f001 f9c1 	bl	8010182 <RFW_ReceiveInit>
 800ee00:	e7e9      	b.n	800edd6 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ee02:	4d09      	ldr	r5, [pc, #36]	; (800ee28 <RadioRx+0x6c>)
 800ee04:	4621      	mov	r1, r4
 800ee06:	4628      	mov	r0, r5
 800ee08:	f001 fe8e 	bl	8010b28 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	f001 fe45 	bl	8010a9c <UTIL_TIMER_Start>
 800ee12:	e7e1      	b.n	800edd8 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800ee14:	4b02      	ldr	r3, [pc, #8]	; (800ee20 <RadioRx+0x64>)
 800ee16:	6898      	ldr	r0, [r3, #8]
 800ee18:	0180      	lsls	r0, r0, #6
 800ee1a:	f000 fb95 	bl	800f548 <SUBGRF_SetRx>
}
 800ee1e:	e7ec      	b.n	800edfa <RadioRx+0x3e>
 800ee20:	20000f50 	.word	0x20000f50
 800ee24:	48000400 	.word	0x48000400
 800ee28:	20000f38 	.word	0x20000f38

0800ee2c <RadioSleep>:
{
 800ee2c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800ee2e:	f04f 0004 	mov.w	r0, #4
 800ee32:	f000 fe8d 	bl	800fb50 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800ee36:	2002      	movs	r0, #2
 800ee38:	f7f2 fd3a 	bl	80018b0 <HAL_Delay>
}
 800ee3c:	bd08      	pop	{r3, pc}
	...

0800ee40 <RadioSend>:
{
 800ee40:	b570      	push	{r4, r5, r6, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	4605      	mov	r5, r0
 800ee46:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800ee48:	2300      	movs	r3, #0
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	f240 2101 	movw	r1, #513	; 0x201
 800ee50:	4608      	mov	r0, r1
 800ee52:	f000 fc6e 	bl	800f732 <SUBGRF_SetDioIrqParams>
 800ee56:	4b3e      	ldr	r3, [pc, #248]	; (800ef50 <RadioSend+0x110>)
 800ee58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ee5c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800ee5e:	4e3d      	ldr	r6, [pc, #244]	; (800ef54 <RadioSend+0x114>)
 800ee60:	2101      	movs	r1, #1
 800ee62:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800ee66:	f001 f89f 	bl	800ffa8 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800ee6a:	7833      	ldrb	r3, [r6, #0]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d103      	bne.n	800ee78 <RadioSend+0x38>
 800ee70:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800ee74:	2b06      	cmp	r3, #6
 800ee76:	d012      	beq.n	800ee9e <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800ee78:	f640 0089 	movw	r0, #2185	; 0x889
 800ee7c:	f000 fe0e 	bl	800fa9c <SUBGRF_ReadRegister>
 800ee80:	f040 0104 	orr.w	r1, r0, #4
 800ee84:	b2c9      	uxtb	r1, r1
 800ee86:	f640 0089 	movw	r0, #2185	; 0x889
 800ee8a:	f000 fd15 	bl	800f8b8 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 800ee8e:	4b31      	ldr	r3, [pc, #196]	; (800ef54 <RadioSend+0x114>)
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	2b03      	cmp	r3, #3
 800ee94:	d818      	bhi.n	800eec8 <RadioSend+0x88>
 800ee96:	e8df f003 	tbb	[pc, r3]
 800ee9a:	0d22      	.short	0x0d22
 800ee9c:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800ee9e:	f640 0089 	movw	r0, #2185	; 0x889
 800eea2:	f000 fdfb 	bl	800fa9c <SUBGRF_ReadRegister>
 800eea6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800eeaa:	f640 0089 	movw	r0, #2185	; 0x889
 800eeae:	f000 fd03 	bl	800f8b8 <SUBGRF_WriteRegister>
 800eeb2:	e7ec      	b.n	800ee8e <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800eeb4:	4827      	ldr	r0, [pc, #156]	; (800ef54 <RadioSend+0x114>)
 800eeb6:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eeb8:	300e      	adds	r0, #14
 800eeba:	f000 ff73 	bl	800fda4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800eebe:	2200      	movs	r2, #0
 800eec0:	4621      	mov	r1, r4
 800eec2:	4628      	mov	r0, r5
 800eec4:	f001 f83d 	bl	800ff42 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800eec8:	4c23      	ldr	r4, [pc, #140]	; (800ef58 <RadioSend+0x118>)
 800eeca:	4b22      	ldr	r3, [pc, #136]	; (800ef54 <RadioSend+0x114>)
 800eecc:	6859      	ldr	r1, [r3, #4]
 800eece:	4620      	mov	r0, r4
 800eed0:	f001 fe2a 	bl	8010b28 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800eed4:	4620      	mov	r0, r4
 800eed6:	f001 fde1 	bl	8010a9c <UTIL_TIMER_Start>
}
 800eeda:	b002      	add	sp, #8
 800eedc:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800eede:	f001 f948 	bl	8010172 <RFW_Is_Init>
 800eee2:	2801      	cmp	r0, #1
 800eee4:	d00a      	beq.n	800eefc <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800eee6:	481b      	ldr	r0, [pc, #108]	; (800ef54 <RadioSend+0x114>)
 800eee8:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eeea:	300e      	adds	r0, #14
 800eeec:	f000 ff5a 	bl	800fda4 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800eef0:	2200      	movs	r2, #0
 800eef2:	4621      	mov	r1, r4
 800eef4:	4628      	mov	r0, r5
 800eef6:	f001 f824 	bl	800ff42 <SUBGRF_SendPayload>
 800eefa:	e7e5      	b.n	800eec8 <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800eefc:	f10d 0207 	add.w	r2, sp, #7
 800ef00:	4621      	mov	r1, r4
 800ef02:	4628      	mov	r0, r5
 800ef04:	f001 f93a 	bl	801017c <RFW_TransmitInit>
 800ef08:	b968      	cbnz	r0, 800ef26 <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ef0a:	4812      	ldr	r0, [pc, #72]	; (800ef54 <RadioSend+0x114>)
 800ef0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef10:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ef12:	300e      	adds	r0, #14
 800ef14:	f000 ff46 	bl	800fda4 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ef1e:	4628      	mov	r0, r5
 800ef20:	f001 f80f 	bl	800ff42 <SUBGRF_SendPayload>
 800ef24:	e7d0      	b.n	800eec8 <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800ef26:	4b0d      	ldr	r3, [pc, #52]	; (800ef5c <RadioSend+0x11c>)
 800ef28:	2201      	movs	r2, #1
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	2002      	movs	r0, #2
 800ef2e:	f001 fa07 	bl	8010340 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800ef32:	e7d2      	b.n	800eeda <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ef34:	4807      	ldr	r0, [pc, #28]	; (800ef54 <RadioSend+0x114>)
 800ef36:	2302      	movs	r3, #2
 800ef38:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ef3a:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ef3c:	300e      	adds	r0, #14
 800ef3e:	f000 ff31 	bl	800fda4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ef42:	2200      	movs	r2, #0
 800ef44:	4621      	mov	r1, r4
 800ef46:	4628      	mov	r0, r5
 800ef48:	f000 fffb 	bl	800ff42 <SUBGRF_SendPayload>
            break;
 800ef4c:	e7bc      	b.n	800eec8 <RadioSend+0x88>
 800ef4e:	bf00      	nop
 800ef50:	48000400 	.word	0x48000400
 800ef54:	20000f50 	.word	0x20000f50
 800ef58:	20000fac 	.word	0x20000fac
 800ef5c:	08011cf4 	.word	0x08011cf4

0800ef60 <RadioRandom>:
{
 800ef60:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800ef62:	2300      	movs	r3, #0
 800ef64:	461a      	mov	r2, r3
 800ef66:	4619      	mov	r1, r3
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f000 fbe2 	bl	800f732 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800ef6e:	f000 ff9b 	bl	800fea8 <SUBGRF_GetRandom>
}
 800ef72:	bd08      	pop	{r3, pc}

0800ef74 <RadioSetModem>:
{
 800ef74:	b510      	push	{r4, lr}
 800ef76:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800ef78:	4b14      	ldr	r3, [pc, #80]	; (800efcc <RadioSetModem+0x58>)
 800ef7a:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800ef7c:	f001 f906 	bl	801018c <RFW_SetRadioModem>
    switch( modem )
 800ef80:	2c01      	cmp	r4, #1
 800ef82:	d010      	beq.n	800efa6 <RadioSetModem+0x32>
 800ef84:	2c03      	cmp	r4, #3
 800ef86:	d01a      	beq.n	800efbe <RadioSetModem+0x4a>
 800ef88:	b134      	cbz	r4, 800ef98 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800ef8a:	2003      	movs	r0, #3
 800ef8c:	f000 fce4 	bl	800f958 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ef90:	4b0e      	ldr	r3, [pc, #56]	; (800efcc <RadioSetModem+0x58>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	735a      	strb	r2, [r3, #13]
}
 800ef96:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ef98:	2000      	movs	r0, #0
 800ef9a:	f000 fcdd 	bl	800f958 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ef9e:	4b0b      	ldr	r3, [pc, #44]	; (800efcc <RadioSetModem+0x58>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	735a      	strb	r2, [r3, #13]
        break;
 800efa4:	e7f7      	b.n	800ef96 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800efa6:	2001      	movs	r0, #1
 800efa8:	f000 fcd6 	bl	800f958 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800efac:	4b07      	ldr	r3, [pc, #28]	; (800efcc <RadioSetModem+0x58>)
 800efae:	7b5a      	ldrb	r2, [r3, #13]
 800efb0:	7b18      	ldrb	r0, [r3, #12]
 800efb2:	4282      	cmp	r2, r0
 800efb4:	d0ef      	beq.n	800ef96 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800efb6:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800efb8:	f000 f80a 	bl	800efd0 <RadioSetPublicNetwork>
 800efbc:	e7eb      	b.n	800ef96 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800efbe:	2002      	movs	r0, #2
 800efc0:	f000 fcca 	bl	800f958 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800efc4:	4b01      	ldr	r3, [pc, #4]	; (800efcc <RadioSetModem+0x58>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	735a      	strb	r2, [r3, #13]
}
 800efca:	e7e4      	b.n	800ef96 <RadioSetModem+0x22>
 800efcc:	20000f50 	.word	0x20000f50

0800efd0 <RadioSetPublicNetwork>:
{
 800efd0:	b510      	push	{r4, lr}
 800efd2:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800efd4:	4b0e      	ldr	r3, [pc, #56]	; (800f010 <RadioSetPublicNetwork+0x40>)
 800efd6:	7318      	strb	r0, [r3, #12]
 800efd8:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800efda:	2001      	movs	r0, #1
 800efdc:	f7ff ffca 	bl	800ef74 <RadioSetModem>
    if( enable == true )
 800efe0:	b154      	cbz	r4, 800eff8 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800efe2:	2134      	movs	r1, #52	; 0x34
 800efe4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800efe8:	f000 fc66 	bl	800f8b8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800efec:	2144      	movs	r1, #68	; 0x44
 800efee:	f240 7041 	movw	r0, #1857	; 0x741
 800eff2:	f000 fc61 	bl	800f8b8 <SUBGRF_WriteRegister>
}
 800eff6:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800eff8:	2114      	movs	r1, #20
 800effa:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800effe:	f000 fc5b 	bl	800f8b8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f002:	2124      	movs	r1, #36	; 0x24
 800f004:	f240 7041 	movw	r0, #1857	; 0x741
 800f008:	f000 fc56 	bl	800f8b8 <SUBGRF_WriteRegister>
}
 800f00c:	e7f3      	b.n	800eff6 <RadioSetPublicNetwork+0x26>
 800f00e:	bf00      	nop
 800f010:	20000f50 	.word	0x20000f50

0800f014 <RadioSetTxConfig>:
{
 800f014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f018:	b083      	sub	sp, #12
 800f01a:	4604      	mov	r4, r0
 800f01c:	460e      	mov	r6, r1
 800f01e:	4617      	mov	r7, r2
 800f020:	461d      	mov	r5, r3
 800f022:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 800f026:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 800f02a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f02e:	f001 f89f 	bl	8010170 <RFW_DeInit>
    switch( modem )
 800f032:	b174      	cbz	r4, 800f052 <RadioSetTxConfig+0x3e>
 800f034:	2c01      	cmp	r4, #1
 800f036:	d053      	beq.n	800f0e0 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f038:	4630      	mov	r0, r6
 800f03a:	f000 ffc9 	bl	800ffd0 <SUBGRF_SetRfTxPower>
 800f03e:	4c51      	ldr	r4, [pc, #324]	; (800f184 <RadioSetTxConfig+0x170>)
 800f040:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800f044:	f001 f899 	bl	801017a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f048:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f04a:	6063      	str	r3, [r4, #4]
}
 800f04c:	b003      	add	sp, #12
 800f04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f052:	4c4c      	ldr	r4, [pc, #304]	; (800f184 <RadioSetTxConfig+0x170>)
 800f054:	f04f 0b00 	mov.w	fp, #0
 800f058:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f05c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f05e:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f060:	230b      	movs	r3, #11
 800f062:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f066:	4628      	mov	r0, r5
 800f068:	f001 f820 	bl	80100ac <SUBGRF_GetFskBandwidthRegValue>
 800f06c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800f070:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f072:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f076:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800f07a:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f07e:	2304      	movs	r3, #4
 800f080:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800f082:	2318      	movs	r3, #24
 800f084:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f086:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f08a:	f089 0901 	eor.w	r9, r9, #1
 800f08e:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 800f092:	f1ba 0f00 	cmp.w	sl, #0
 800f096:	d01f      	beq.n	800f0d8 <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f098:	22f2      	movs	r2, #242	; 0xf2
 800f09a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f09c:	4c39      	ldr	r4, [pc, #228]	; (800f184 <RadioSetTxConfig+0x170>)
 800f09e:	2301      	movs	r3, #1
 800f0a0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f0a2:	f7ff fc43 	bl	800e92c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	f7ff ff64 	bl	800ef74 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f0ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f0b0:	f000 fc6c 	bl	800f98c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f0b4:	f104 000e 	add.w	r0, r4, #14
 800f0b8:	f000 fe74 	bl	800fda4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f0bc:	4a32      	ldr	r2, [pc, #200]	; (800f188 <RadioSetTxConfig+0x174>)
 800f0be:	466b      	mov	r3, sp
 800f0c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0c4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 fe39 	bl	800fd40 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f0ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f0d2:	f000 fd5d 	bl	800fb90 <SUBGRF_SetWhiteningSeed>
            break;
 800f0d6:	e7af      	b.n	800f038 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f0d8:	4b2a      	ldr	r3, [pc, #168]	; (800f184 <RadioSetTxConfig+0x170>)
 800f0da:	2201      	movs	r2, #1
 800f0dc:	75da      	strb	r2, [r3, #23]
 800f0de:	e7dd      	b.n	800f09c <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f0e0:	4a28      	ldr	r2, [pc, #160]	; (800f184 <RadioSetTxConfig+0x170>)
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800f0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800f0f0:	4926      	ldr	r1, [pc, #152]	; (800f18c <RadioSetTxConfig+0x178>)
 800f0f2:	5d49      	ldrb	r1, [r1, r5]
 800f0f4:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800f0f8:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 800f0fc:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f100:	b91d      	cbnz	r5, 800f10a <RadioSetTxConfig+0xf6>
 800f102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f104:	3a0b      	subs	r2, #11
 800f106:	2a01      	cmp	r2, #1
 800f108:	d92c      	bls.n	800f164 <RadioSetTxConfig+0x150>
 800f10a:	2d01      	cmp	r5, #1
 800f10c:	d027      	beq.n	800f15e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f10e:	4a1d      	ldr	r2, [pc, #116]	; (800f184 <RadioSetTxConfig+0x170>)
 800f110:	2100      	movs	r1, #0
 800f112:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f116:	4a1b      	ldr	r2, [pc, #108]	; (800f184 <RadioSetTxConfig+0x170>)
 800f118:	2101      	movs	r1, #1
 800f11a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f11c:	3b05      	subs	r3, #5
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	428b      	cmp	r3, r1
 800f122:	d924      	bls.n	800f16e <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f124:	4b17      	ldr	r3, [pc, #92]	; (800f184 <RadioSetTxConfig+0x170>)
 800f126:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f12a:	4c16      	ldr	r4, [pc, #88]	; (800f184 <RadioSetTxConfig+0x170>)
 800f12c:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f130:	4b17      	ldr	r3, [pc, #92]	; (800f190 <RadioSetTxConfig+0x17c>)
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f136:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f13a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800f13e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f142:	f7ff fbf3 	bl	800e92c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800f146:	2001      	movs	r0, #1
 800f148:	f7ff ff14 	bl	800ef74 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f14c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f150:	f000 fc1c 	bl	800f98c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f154:	f104 000e 	add.w	r0, r4, #14
 800f158:	f000 fe24 	bl	800fda4 <SUBGRF_SetPacketParams>
            break;
 800f15c:	e76c      	b.n	800f038 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f15e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f160:	2a0c      	cmp	r2, #12
 800f162:	d1d4      	bne.n	800f10e <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f164:	4a07      	ldr	r2, [pc, #28]	; (800f184 <RadioSetTxConfig+0x170>)
 800f166:	2101      	movs	r1, #1
 800f168:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f16c:	e7d3      	b.n	800f116 <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 800f16e:	f1b8 0f0b 	cmp.w	r8, #11
 800f172:	d803      	bhi.n	800f17c <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f174:	4613      	mov	r3, r2
 800f176:	220c      	movs	r2, #12
 800f178:	839a      	strh	r2, [r3, #28]
 800f17a:	e7d6      	b.n	800f12a <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f17c:	4b01      	ldr	r3, [pc, #4]	; (800f184 <RadioSetTxConfig+0x170>)
 800f17e:	f8a3 801c 	strh.w	r8, [r3, #28]
 800f182:	e7d2      	b.n	800f12a <RadioSetTxConfig+0x116>
 800f184:	20000f50 	.word	0x20000f50
 800f188:	08011060 	.word	0x08011060
 800f18c:	08011d0c 	.word	0x08011d0c
 800f190:	2000010c 	.word	0x2000010c

0800f194 <RadioSetRxConfig>:
{
 800f194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f198:	b085      	sub	sp, #20
 800f19a:	4604      	mov	r4, r0
 800f19c:	460d      	mov	r5, r1
 800f19e:	4616      	mov	r6, r2
 800f1a0:	9301      	str	r3, [sp, #4]
 800f1a2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 800f1a6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 800f1aa:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 800f1ae:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800f1b2:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 800f1b6:	4b6e      	ldr	r3, [pc, #440]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f1b8:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f1bc:	f000 ffd8 	bl	8010170 <RFW_DeInit>
    if( rxContinuous == true )
 800f1c0:	f1b8 0f00 	cmp.w	r8, #0
 800f1c4:	d001      	beq.n	800f1ca <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800f1c6:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800f1ca:	b14f      	cbz	r7, 800f1e0 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 800f1cc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800f1d0:	4b68      	ldr	r3, [pc, #416]	; (800f374 <RadioSetRxConfig+0x1e0>)
 800f1d2:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800f1d4:	b144      	cbz	r4, 800f1e8 <RadioSetRxConfig+0x54>
 800f1d6:	2c01      	cmp	r4, #1
 800f1d8:	d057      	beq.n	800f28a <RadioSetRxConfig+0xf6>
}
 800f1da:	b005      	add	sp, #20
 800f1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800f1e0:	4b64      	ldr	r3, [pc, #400]	; (800f374 <RadioSetRxConfig+0x1e0>)
 800f1e2:	22ff      	movs	r2, #255	; 0xff
 800f1e4:	701a      	strb	r2, [r3, #0]
 800f1e6:	e7f5      	b.n	800f1d4 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	f000 fa05 	bl	800f5f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f1ee:	4c60      	ldr	r4, [pc, #384]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f1f0:	f04f 0800 	mov.w	r8, #0
 800f1f4:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f1f8:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f1fa:	230b      	movs	r3, #11
 800f1fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f200:	4628      	mov	r0, r5
 800f202:	f000 ff53 	bl	80100ac <SUBGRF_GetFskBandwidthRegValue>
 800f206:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f20a:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f20e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f212:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f216:	2304      	movs	r3, #4
 800f218:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800f21a:	2318      	movs	r3, #24
 800f21c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f21e:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f222:	f087 0701 	eor.w	r7, r7, #1
 800f226:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f228:	4b52      	ldr	r3, [pc, #328]	; (800f374 <RadioSetRxConfig+0x1e0>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800f22e:	f1bb 0f00 	cmp.w	fp, #0
 800f232:	d026      	beq.n	800f282 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f234:	22f2      	movs	r2, #242	; 0xf2
 800f236:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f238:	4c4d      	ldr	r4, [pc, #308]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f23a:	2301      	movs	r3, #1
 800f23c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f23e:	f7ff fb75 	bl	800e92c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800f242:	2000      	movs	r0, #0
 800f244:	f7ff fe96 	bl	800ef74 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f248:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f24c:	f000 fb9e 	bl	800f98c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f250:	f104 000e 	add.w	r0, r4, #14
 800f254:	f000 fda6 	bl	800fda4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f258:	4a47      	ldr	r2, [pc, #284]	; (800f378 <RadioSetRxConfig+0x1e4>)
 800f25a:	ab02      	add	r3, sp, #8
 800f25c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f260:	e883 0003 	stmia.w	r3, {r0, r1}
 800f264:	4618      	mov	r0, r3
 800f266:	f000 fd6b 	bl	800fd40 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f26a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f26e:	f000 fc8f 	bl	800fb90 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f272:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800f276:	fb02 fa0a 	mul.w	sl, r2, sl
 800f27a:	fbba f6f6 	udiv	r6, sl, r6
 800f27e:	60a6      	str	r6, [r4, #8]
            break;
 800f280:	e7ab      	b.n	800f1da <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f282:	4b3b      	ldr	r3, [pc, #236]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f284:	2201      	movs	r2, #1
 800f286:	75da      	strb	r2, [r3, #23]
 800f288:	e7d6      	b.n	800f238 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f28a:	2000      	movs	r0, #0
 800f28c:	f000 f9b4 	bl	800f5f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f290:	4a37      	ldr	r2, [pc, #220]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f292:	2301      	movs	r3, #1
 800f294:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800f298:	b2f3      	uxtb	r3, r6
 800f29a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800f29e:	4937      	ldr	r1, [pc, #220]	; (800f37c <RadioSetRxConfig+0x1e8>)
 800f2a0:	5d49      	ldrb	r1, [r1, r5]
 800f2a2:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800f2a6:	9901      	ldr	r1, [sp, #4]
 800f2a8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f2ac:	b91d      	cbnz	r5, 800f2b6 <RadioSetRxConfig+0x122>
 800f2ae:	f1a6 020b 	sub.w	r2, r6, #11
 800f2b2:	2a01      	cmp	r2, #1
 800f2b4:	d941      	bls.n	800f33a <RadioSetRxConfig+0x1a6>
 800f2b6:	2d01      	cmp	r5, #1
 800f2b8:	d03d      	beq.n	800f336 <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f2ba:	4a2d      	ldr	r2, [pc, #180]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f2bc:	2100      	movs	r1, #0
 800f2be:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f2c2:	4a2b      	ldr	r2, [pc, #172]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f2c4:	2101      	movs	r1, #1
 800f2c6:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f2c8:	3b05      	subs	r3, #5
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	428b      	cmp	r3, r1
 800f2ce:	d939      	bls.n	800f344 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f2d0:	4b27      	ldr	r3, [pc, #156]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f2d2:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f2d6:	4c26      	ldr	r4, [pc, #152]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f2d8:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f2da:	4b26      	ldr	r3, [pc, #152]	; (800f374 <RadioSetRxConfig+0x1e0>)
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f2e0:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f2e4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f2e8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f2ec:	f7ff fb1e 	bl	800e92c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800f2f0:	2001      	movs	r0, #1
 800f2f2:	f7ff fe3f 	bl	800ef74 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f2f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f2fa:	f000 fb47 	bl	800f98c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f2fe:	f104 000e 	add.w	r0, r4, #14
 800f302:	f000 fd4f 	bl	800fda4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f306:	fa5f f08a 	uxtb.w	r0, sl
 800f30a:	f000 fb03 	bl	800f914 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f30e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800f312:	2b01      	cmp	r3, #1
 800f314:	d021      	beq.n	800f35a <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800f316:	f240 7036 	movw	r0, #1846	; 0x736
 800f31a:	f000 fbbf 	bl	800fa9c <SUBGRF_ReadRegister>
 800f31e:	f040 0104 	orr.w	r1, r0, #4
 800f322:	b2c9      	uxtb	r1, r1
 800f324:	f240 7036 	movw	r0, #1846	; 0x736
 800f328:	f000 fac6 	bl	800f8b8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800f32c:	4b10      	ldr	r3, [pc, #64]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f32e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f332:	609a      	str	r2, [r3, #8]
}
 800f334:	e751      	b.n	800f1da <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f336:	2e0c      	cmp	r6, #12
 800f338:	d1bf      	bne.n	800f2ba <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f33a:	4a0d      	ldr	r2, [pc, #52]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f33c:	2101      	movs	r1, #1
 800f33e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f342:	e7be      	b.n	800f2c2 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 800f344:	f1b9 0f0b 	cmp.w	r9, #11
 800f348:	d803      	bhi.n	800f352 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f34a:	4613      	mov	r3, r2
 800f34c:	220c      	movs	r2, #12
 800f34e:	839a      	strh	r2, [r3, #28]
 800f350:	e7c1      	b.n	800f2d6 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f352:	4b07      	ldr	r3, [pc, #28]	; (800f370 <RadioSetRxConfig+0x1dc>)
 800f354:	f8a3 901c 	strh.w	r9, [r3, #28]
 800f358:	e7bd      	b.n	800f2d6 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800f35a:	f240 7036 	movw	r0, #1846	; 0x736
 800f35e:	f000 fb9d 	bl	800fa9c <SUBGRF_ReadRegister>
 800f362:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800f366:	f240 7036 	movw	r0, #1846	; 0x736
 800f36a:	f000 faa5 	bl	800f8b8 <SUBGRF_WriteRegister>
 800f36e:	e7dd      	b.n	800f32c <RadioSetRxConfig+0x198>
 800f370:	20000f50 	.word	0x20000f50
 800f374:	2000010c 	.word	0x2000010c
 800f378:	08011060 	.word	0x08011060
 800f37c:	08011d0c 	.word	0x08011d0c

0800f380 <RadioIsChannelFree>:
{
 800f380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f382:	b08b      	sub	sp, #44	; 0x2c
 800f384:	4604      	mov	r4, r0
 800f386:	460f      	mov	r7, r1
 800f388:	4616      	mov	r6, r2
 800f38a:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800f38c:	f7ff face 	bl	800e92c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800f390:	2000      	movs	r0, #0
 800f392:	f7ff fdef 	bl	800ef74 <RadioSetModem>
    RadioSetChannel( freq );
 800f396:	4620      	mov	r0, r4
 800f398:	f7ff fcf8 	bl	800ed8c <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800f39c:	2301      	movs	r3, #1
 800f39e:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a0:	2400      	movs	r4, #0
 800f3a2:	9408      	str	r4, [sp, #32]
 800f3a4:	9407      	str	r4, [sp, #28]
 800f3a6:	9406      	str	r4, [sp, #24]
 800f3a8:	9405      	str	r4, [sp, #20]
 800f3aa:	9404      	str	r4, [sp, #16]
 800f3ac:	9403      	str	r4, [sp, #12]
 800f3ae:	9402      	str	r4, [sp, #8]
 800f3b0:	2303      	movs	r3, #3
 800f3b2:	9301      	str	r3, [sp, #4]
 800f3b4:	9700      	str	r7, [sp, #0]
 800f3b6:	4623      	mov	r3, r4
 800f3b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800f3bc:	4639      	mov	r1, r7
 800f3be:	4620      	mov	r0, r4
 800f3c0:	f7ff fee8 	bl	800f194 <RadioSetRxConfig>
    RadioRx( 0 );
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f7ff fcf9 	bl	800edbc <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800f3ca:	f7ff fc93 	bl	800ecf4 <RadioGetWakeupTime>
 800f3ce:	f7f2 fa6f 	bl	80018b0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800f3d2:	f001 fac9 	bl	8010968 <UTIL_TIMER_GetCurrentTime>
 800f3d6:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f001 facf 	bl	801097c <UTIL_TIMER_GetElapsedTime>
 800f3de:	42a8      	cmp	r0, r5
 800f3e0:	d206      	bcs.n	800f3f0 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	f7ff fcb0 	bl	800ed48 <RadioRssi>
        if( rssi > rssiThresh )
 800f3e8:	42b0      	cmp	r0, r6
 800f3ea:	ddf5      	ble.n	800f3d8 <RadioIsChannelFree+0x58>
            status = false;
 800f3ec:	2400      	movs	r4, #0
 800f3ee:	e000      	b.n	800f3f2 <RadioIsChannelFree+0x72>
    bool status = true;
 800f3f0:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800f3f2:	f7ff fa9b 	bl	800e92c <RadioStandby>
}
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	b00b      	add	sp, #44	; 0x2c
 800f3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f3fc <RadioInit>:
{
 800f3fc:	b570      	push	{r4, r5, r6, lr}
 800f3fe:	b082      	sub	sp, #8
    RadioEvents = events;
 800f400:	4b1d      	ldr	r3, [pc, #116]	; (800f478 <RadioInit+0x7c>)
 800f402:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800f404:	4d1d      	ldr	r5, [pc, #116]	; (800f47c <RadioInit+0x80>)
 800f406:	2400      	movs	r4, #0
 800f408:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 800f40a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 800f40c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f40e:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800f410:	481b      	ldr	r0, [pc, #108]	; (800f480 <RadioInit+0x84>)
 800f412:	f000 fb67 	bl	800fae4 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 800f416:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 800f418:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 800f41a:	f000 f8fa 	bl	800f612 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800f41e:	4621      	mov	r1, r4
 800f420:	4620      	mov	r0, r4
 800f422:	f000 f9f1 	bl	800f808 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800f426:	2204      	movs	r2, #4
 800f428:	4621      	mov	r1, r4
 800f42a:	2001      	movs	r0, #1
 800f42c:	f000 fbc9 	bl	800fbc2 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f430:	4623      	mov	r3, r4
 800f432:	4622      	mov	r2, r4
 800f434:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f438:	4608      	mov	r0, r1
 800f43a:	f000 f97a 	bl	800f732 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800f43e:	f7ff fcf5 	bl	800ee2c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800f442:	4e10      	ldr	r6, [pc, #64]	; (800f484 <RadioInit+0x88>)
 800f444:	9400      	str	r4, [sp, #0]
 800f446:	4b10      	ldr	r3, [pc, #64]	; (800f488 <RadioInit+0x8c>)
 800f448:	4622      	mov	r2, r4
 800f44a:	f04f 31ff 	mov.w	r1, #4294967295
 800f44e:	4630      	mov	r0, r6
 800f450:	f001 fa6c 	bl	801092c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800f454:	4d0d      	ldr	r5, [pc, #52]	; (800f48c <RadioInit+0x90>)
 800f456:	9400      	str	r4, [sp, #0]
 800f458:	4b0d      	ldr	r3, [pc, #52]	; (800f490 <RadioInit+0x94>)
 800f45a:	4622      	mov	r2, r4
 800f45c:	f04f 31ff 	mov.w	r1, #4294967295
 800f460:	4628      	mov	r0, r5
 800f462:	f001 fa63 	bl	801092c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800f466:	4630      	mov	r0, r6
 800f468:	f001 fabe 	bl	80109e8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800f46c:	4628      	mov	r0, r5
 800f46e:	f001 fabb 	bl	80109e8 <UTIL_TIMER_Stop>
}
 800f472:	b002      	add	sp, #8
 800f474:	bd70      	pop	{r4, r5, r6, pc}
 800f476:	bf00      	nop
 800f478:	20000f34 	.word	0x20000f34
 800f47c:	20000f50 	.word	0x20000f50
 800f480:	0800ece1 	.word	0x0800ece1
 800f484:	20000fac 	.word	0x20000fac
 800f488:	0800e839 	.word	0x0800e839
 800f48c:	20000f38 	.word	0x20000f38
 800f490:	0800e861 	.word	0x0800e861

0800f494 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f494:	b510      	push	{r4, lr}
 800f496:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f498:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f49c:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f49e:	460a      	mov	r2, r1
 800f4a0:	4601      	mov	r1, r0
 800f4a2:	4803      	ldr	r0, [pc, #12]	; (800f4b0 <SUBGRF_WriteCommand+0x1c>)
 800f4a4:	f7f6 f92e 	bl	8005704 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4a8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f4ac:	bd10      	pop	{r4, pc}
 800f4ae:	bf00      	nop
 800f4b0:	200001d0 	.word	0x200001d0

0800f4b4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f4b4:	b510      	push	{r4, lr}
 800f4b6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f4bc:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f4be:	460a      	mov	r2, r1
 800f4c0:	4601      	mov	r1, r0
 800f4c2:	4803      	ldr	r0, [pc, #12]	; (800f4d0 <SUBGRF_ReadCommand+0x1c>)
 800f4c4:	f7f6 f974 	bl	80057b0 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4c8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f4cc:	bd10      	pop	{r4, pc}
 800f4ce:	bf00      	nop
 800f4d0:	200001d0 	.word	0x200001d0

0800f4d4 <SUBGRF_GetOperatingMode>:
}
 800f4d4:	4b01      	ldr	r3, [pc, #4]	; (800f4dc <SUBGRF_GetOperatingMode+0x8>)
 800f4d6:	7818      	ldrb	r0, [r3, #0]
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	20000fca 	.word	0x20000fca

0800f4e0 <SUBGRF_SetStandby>:
{
 800f4e0:	b500      	push	{lr}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	f10d 0107 	add.w	r1, sp, #7
 800f4ee:	2080      	movs	r0, #128	; 0x80
 800f4f0:	f7ff ffd0 	bl	800f494 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800f4f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f4f8:	b92b      	cbnz	r3, 800f506 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800f4fa:	4b05      	ldr	r3, [pc, #20]	; (800f510 <SUBGRF_SetStandby+0x30>)
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	701a      	strb	r2, [r3, #0]
}
 800f500:	b003      	add	sp, #12
 800f502:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800f506:	4b02      	ldr	r3, [pc, #8]	; (800f510 <SUBGRF_SetStandby+0x30>)
 800f508:	2202      	movs	r2, #2
 800f50a:	701a      	strb	r2, [r3, #0]
}
 800f50c:	e7f8      	b.n	800f500 <SUBGRF_SetStandby+0x20>
 800f50e:	bf00      	nop
 800f510:	20000fca 	.word	0x20000fca

0800f514 <SUBGRF_SetTx>:
{
 800f514:	b500      	push	{lr}
 800f516:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800f518:	4b0a      	ldr	r3, [pc, #40]	; (800f544 <SUBGRF_SetTx+0x30>)
 800f51a:	2204      	movs	r2, #4
 800f51c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f51e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f522:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f526:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f52a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f52e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800f532:	2203      	movs	r2, #3
 800f534:	a901      	add	r1, sp, #4
 800f536:	2083      	movs	r0, #131	; 0x83
 800f538:	f7ff ffac 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f53c:	b003      	add	sp, #12
 800f53e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f542:	bf00      	nop
 800f544:	20000fca 	.word	0x20000fca

0800f548 <SUBGRF_SetRx>:
{
 800f548:	b500      	push	{lr}
 800f54a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800f54c:	4b0a      	ldr	r3, [pc, #40]	; (800f578 <SUBGRF_SetRx+0x30>)
 800f54e:	2205      	movs	r2, #5
 800f550:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f552:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f556:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f55a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f55e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f562:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800f566:	2203      	movs	r2, #3
 800f568:	a901      	add	r1, sp, #4
 800f56a:	2082      	movs	r0, #130	; 0x82
 800f56c:	f7ff ff92 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f570:	b003      	add	sp, #12
 800f572:	f85d fb04 	ldr.w	pc, [sp], #4
 800f576:	bf00      	nop
 800f578:	20000fca 	.word	0x20000fca

0800f57c <SUBGRF_SetRxDutyCycle>:
{
 800f57c:	b500      	push	{lr}
 800f57e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800f580:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f584:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800f588:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f58c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800f590:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800f594:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f598:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800f59c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800f5a0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800f5a4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800f5a8:	2206      	movs	r2, #6
 800f5aa:	4669      	mov	r1, sp
 800f5ac:	2094      	movs	r0, #148	; 0x94
 800f5ae:	f7ff ff71 	bl	800f494 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800f5b2:	4b03      	ldr	r3, [pc, #12]	; (800f5c0 <SUBGRF_SetRxDutyCycle+0x44>)
 800f5b4:	2206      	movs	r2, #6
 800f5b6:	701a      	strb	r2, [r3, #0]
}
 800f5b8:	b003      	add	sp, #12
 800f5ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5be:	bf00      	nop
 800f5c0:	20000fca 	.word	0x20000fca

0800f5c4 <SUBGRF_SetCad>:
{
 800f5c4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	20c5      	movs	r0, #197	; 0xc5
 800f5cc:	f7ff ff62 	bl	800f494 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800f5d0:	4b01      	ldr	r3, [pc, #4]	; (800f5d8 <SUBGRF_SetCad+0x14>)
 800f5d2:	2207      	movs	r2, #7
 800f5d4:	701a      	strb	r2, [r3, #0]
}
 800f5d6:	bd08      	pop	{r3, pc}
 800f5d8:	20000fca 	.word	0x20000fca

0800f5dc <SUBGRF_SetTxContinuousWave>:
{
 800f5dc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800f5de:	2200      	movs	r2, #0
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	20d1      	movs	r0, #209	; 0xd1
 800f5e4:	f7ff ff56 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f5e8:	bd08      	pop	{r3, pc}

0800f5ea <SUBGRF_SetTxInfinitePreamble>:
{
 800f5ea:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	4611      	mov	r1, r2
 800f5f0:	20d2      	movs	r0, #210	; 0xd2
 800f5f2:	f7ff ff4f 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f5f6:	bd08      	pop	{r3, pc}

0800f5f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800f5f8:	b500      	push	{lr}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800f600:	2201      	movs	r2, #1
 800f602:	f10d 0107 	add.w	r1, sp, #7
 800f606:	209f      	movs	r0, #159	; 0x9f
 800f608:	f7ff ff44 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f60c:	b003      	add	sp, #12
 800f60e:	f85d fb04 	ldr.w	pc, [sp], #4

0800f612 <SUBGRF_SetRegulatorMode>:
{
 800f612:	b500      	push	{lr}
 800f614:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800f616:	f7f3 f8ed 	bl	80027f4 <RBI_IsDCDC>
 800f61a:	2801      	cmp	r0, #1
 800f61c:	d00b      	beq.n	800f636 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800f61e:	2300      	movs	r3, #0
 800f620:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800f624:	2201      	movs	r2, #1
 800f626:	f10d 0107 	add.w	r1, sp, #7
 800f62a:	2096      	movs	r0, #150	; 0x96
 800f62c:	f7ff ff32 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f630:	b003      	add	sp, #12
 800f632:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800f636:	2301      	movs	r3, #1
 800f638:	f88d 3007 	strb.w	r3, [sp, #7]
 800f63c:	e7f2      	b.n	800f624 <SUBGRF_SetRegulatorMode+0x12>

0800f63e <SUBGRF_Calibrate>:
{
 800f63e:	b500      	push	{lr}
 800f640:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f642:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f646:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f64a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f64c:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f650:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f652:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f656:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f658:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f65c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f65e:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f662:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800f664:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f668:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f66a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800f66e:	2201      	movs	r2, #1
 800f670:	f10d 0107 	add.w	r1, sp, #7
 800f674:	2089      	movs	r0, #137	; 0x89
 800f676:	f7ff ff0d 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f67a:	b003      	add	sp, #12
 800f67c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f680 <SUBGRF_CalibrateImage>:
{
 800f680:	b500      	push	{lr}
 800f682:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800f684:	4b1c      	ldr	r3, [pc, #112]	; (800f6f8 <SUBGRF_CalibrateImage+0x78>)
 800f686:	4298      	cmp	r0, r3
 800f688:	d90d      	bls.n	800f6a6 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800f68a:	23e1      	movs	r3, #225	; 0xe1
 800f68c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800f690:	23e9      	movs	r3, #233	; 0xe9
 800f692:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800f696:	2202      	movs	r2, #2
 800f698:	a901      	add	r1, sp, #4
 800f69a:	2098      	movs	r0, #152	; 0x98
 800f69c:	f7ff fefa 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f6a0:	b003      	add	sp, #12
 800f6a2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800f6a6:	4b15      	ldr	r3, [pc, #84]	; (800f6fc <SUBGRF_CalibrateImage+0x7c>)
 800f6a8:	4298      	cmp	r0, r3
 800f6aa:	d906      	bls.n	800f6ba <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800f6ac:	23d7      	movs	r3, #215	; 0xd7
 800f6ae:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800f6b2:	23db      	movs	r3, #219	; 0xdb
 800f6b4:	f88d 3005 	strb.w	r3, [sp, #5]
 800f6b8:	e7ed      	b.n	800f696 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800f6ba:	4b11      	ldr	r3, [pc, #68]	; (800f700 <SUBGRF_CalibrateImage+0x80>)
 800f6bc:	4298      	cmp	r0, r3
 800f6be:	d906      	bls.n	800f6ce <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800f6c0:	23c1      	movs	r3, #193	; 0xc1
 800f6c2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800f6c6:	23c5      	movs	r3, #197	; 0xc5
 800f6c8:	f88d 3005 	strb.w	r3, [sp, #5]
 800f6cc:	e7e3      	b.n	800f696 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800f6ce:	4b0d      	ldr	r3, [pc, #52]	; (800f704 <SUBGRF_CalibrateImage+0x84>)
 800f6d0:	4298      	cmp	r0, r3
 800f6d2:	d906      	bls.n	800f6e2 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800f6d4:	2375      	movs	r3, #117	; 0x75
 800f6d6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800f6da:	2381      	movs	r3, #129	; 0x81
 800f6dc:	f88d 3005 	strb.w	r3, [sp, #5]
 800f6e0:	e7d9      	b.n	800f696 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800f6e2:	4b09      	ldr	r3, [pc, #36]	; (800f708 <SUBGRF_CalibrateImage+0x88>)
 800f6e4:	4298      	cmp	r0, r3
 800f6e6:	d9d6      	bls.n	800f696 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 800f6e8:	236b      	movs	r3, #107	; 0x6b
 800f6ea:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800f6ee:	236f      	movs	r3, #111	; 0x6f
 800f6f0:	f88d 3005 	strb.w	r3, [sp, #5]
 800f6f4:	e7cf      	b.n	800f696 <SUBGRF_CalibrateImage+0x16>
 800f6f6:	bf00      	nop
 800f6f8:	35a4e900 	.word	0x35a4e900
 800f6fc:	32a9f880 	.word	0x32a9f880
 800f700:	2de54480 	.word	0x2de54480
 800f704:	1b6b0b00 	.word	0x1b6b0b00
 800f708:	1954fc40 	.word	0x1954fc40

0800f70c <SUBGRF_SetPaConfig>:
{
 800f70c:	b500      	push	{lr}
 800f70e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800f710:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800f714:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800f718:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800f71c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800f720:	2204      	movs	r2, #4
 800f722:	eb0d 0102 	add.w	r1, sp, r2
 800f726:	2095      	movs	r0, #149	; 0x95
 800f728:	f7ff feb4 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f72c:	b003      	add	sp, #12
 800f72e:	f85d fb04 	ldr.w	pc, [sp], #4

0800f732 <SUBGRF_SetDioIrqParams>:
{
 800f732:	b500      	push	{lr}
 800f734:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800f736:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800f73a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800f73e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800f742:	0a08      	lsrs	r0, r1, #8
 800f744:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800f748:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800f74c:	0a11      	lsrs	r1, r2, #8
 800f74e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800f752:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800f756:	0a1a      	lsrs	r2, r3, #8
 800f758:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800f75c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800f760:	2208      	movs	r2, #8
 800f762:	4669      	mov	r1, sp
 800f764:	4610      	mov	r0, r2
 800f766:	f7ff fe95 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f76a:	b003      	add	sp, #12
 800f76c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f770 <SUBGRF_SetTcxoMode>:
{
 800f770:	b500      	push	{lr}
 800f772:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800f774:	f000 0007 	and.w	r0, r0, #7
 800f778:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f77c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f780:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f784:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800f788:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800f78c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800f790:	2204      	movs	r2, #4
 800f792:	eb0d 0102 	add.w	r1, sp, r2
 800f796:	2097      	movs	r0, #151	; 0x97
 800f798:	f7ff fe7c 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f79c:	b003      	add	sp, #12
 800f79e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f7a4 <SUBGRF_SetRfFrequency>:
{
 800f7a4:	b510      	push	{r4, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800f7aa:	4b12      	ldr	r3, [pc, #72]	; (800f7f4 <SUBGRF_SetRfFrequency+0x50>)
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	b1d3      	cbz	r3, 800f7e6 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800f7b0:	4a11      	ldr	r2, [pc, #68]	; (800f7f8 <SUBGRF_SetRfFrequency+0x54>)
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	0660      	lsls	r0, r4, #25
 800f7b6:	09e1      	lsrs	r1, r4, #7
 800f7b8:	f7f1 f9f6 	bl	8000ba8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800f7bc:	0e03      	lsrs	r3, r0, #24
 800f7be:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800f7c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f7c6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800f7ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f7ce:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800f7d2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800f7d6:	2204      	movs	r2, #4
 800f7d8:	eb0d 0102 	add.w	r1, sp, r2
 800f7dc:	2086      	movs	r0, #134	; 0x86
 800f7de:	f7ff fe59 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f7e2:	b002      	add	sp, #8
 800f7e4:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800f7e6:	f7ff ff4b 	bl	800f680 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800f7ea:	4b02      	ldr	r3, [pc, #8]	; (800f7f4 <SUBGRF_SetRfFrequency+0x50>)
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	701a      	strb	r2, [r3, #0]
 800f7f0:	e7de      	b.n	800f7b0 <SUBGRF_SetRfFrequency+0xc>
 800f7f2:	bf00      	nop
 800f7f4:	20000fc8 	.word	0x20000fc8
 800f7f8:	01e84800 	.word	0x01e84800

0800f7fc <SUBGRF_GetPacketType>:
}
 800f7fc:	4b01      	ldr	r3, [pc, #4]	; (800f804 <SUBGRF_GetPacketType+0x8>)
 800f7fe:	7818      	ldrb	r0, [r3, #0]
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	20000fcb 	.word	0x20000fcb

0800f808 <SUBGRF_SetBufferBaseAddress>:
{
 800f808:	b500      	push	{lr}
 800f80a:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800f80c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800f810:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800f814:	2202      	movs	r2, #2
 800f816:	a901      	add	r1, sp, #4
 800f818:	208f      	movs	r0, #143	; 0x8f
 800f81a:	f7ff fe3b 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f81e:	b003      	add	sp, #12
 800f820:	f85d fb04 	ldr.w	pc, [sp], #4

0800f824 <SUBGRF_GetRssiInst>:
{
 800f824:	b500      	push	{lr}
 800f826:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800f828:	2201      	movs	r2, #1
 800f82a:	a901      	add	r1, sp, #4
 800f82c:	2015      	movs	r0, #21
 800f82e:	f7ff fe41 	bl	800f4b4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800f832:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800f836:	4240      	negs	r0, r0
}
 800f838:	1040      	asrs	r0, r0, #1
 800f83a:	b003      	add	sp, #12
 800f83c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f840 <SUBGRF_GetPacketStatus>:
{
 800f840:	b510      	push	{r4, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800f846:	2203      	movs	r2, #3
 800f848:	a901      	add	r1, sp, #4
 800f84a:	2014      	movs	r0, #20
 800f84c:	f7ff fe32 	bl	800f4b4 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800f850:	f7ff ffd4 	bl	800f7fc <SUBGRF_GetPacketType>
 800f854:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800f856:	b148      	cbz	r0, 800f86c <SUBGRF_GetPacketStatus+0x2c>
 800f858:	2801      	cmp	r0, #1
 800f85a:	d018      	beq.n	800f88e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800f85c:	2214      	movs	r2, #20
 800f85e:	2100      	movs	r1, #0
 800f860:	4620      	mov	r0, r4
 800f862:	f000 fe8e 	bl	8010582 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800f866:	230f      	movs	r3, #15
 800f868:	7023      	strb	r3, [r4, #0]
}
 800f86a:	e00e      	b.n	800f88a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800f86c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f870:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800f872:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f876:	425b      	negs	r3, r3
 800f878:	105b      	asrs	r3, r3, #1
 800f87a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800f87c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f880:	425b      	negs	r3, r3
 800f882:	105b      	asrs	r3, r3, #1
 800f884:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800f886:	2300      	movs	r3, #0
 800f888:	60a3      	str	r3, [r4, #8]
}
 800f88a:	b002      	add	sp, #8
 800f88c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800f88e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f892:	425b      	negs	r3, r3
 800f894:	105b      	asrs	r3, r3, #1
 800f896:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800f898:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800f89c:	3302      	adds	r3, #2
 800f89e:	109b      	asrs	r3, r3, #2
 800f8a0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800f8a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8a6:	425b      	negs	r3, r3
 800f8a8:	105b      	asrs	r3, r3, #1
 800f8aa:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800f8ac:	4b01      	ldr	r3, [pc, #4]	; (800f8b4 <SUBGRF_GetPacketStatus+0x74>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	6123      	str	r3, [r4, #16]
            break;
 800f8b2:	e7ea      	b.n	800f88a <SUBGRF_GetPacketStatus+0x4a>
 800f8b4:	20000fc4 	.word	0x20000fc4

0800f8b8 <SUBGRF_WriteRegister>:
{
 800f8b8:	b500      	push	{lr}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	f10d 0207 	add.w	r2, sp, #7
 800f8c6:	4601      	mov	r1, r0
 800f8c8:	4802      	ldr	r0, [pc, #8]	; (800f8d4 <SUBGRF_WriteRegister+0x1c>)
 800f8ca:	f7f5 fe77 	bl	80055bc <HAL_SUBGHZ_WriteRegisters>
}
 800f8ce:	b003      	add	sp, #12
 800f8d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8d4:	200001d0 	.word	0x200001d0

0800f8d8 <SUBGRF_SetRxBoosted>:
{
 800f8d8:	b510      	push	{r4, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800f8de:	4b0c      	ldr	r3, [pc, #48]	; (800f910 <SUBGRF_SetRxBoosted+0x38>)
 800f8e0:	2205      	movs	r2, #5
 800f8e2:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800f8e4:	2197      	movs	r1, #151	; 0x97
 800f8e6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800f8ea:	f7ff ffe5 	bl	800f8b8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f8ee:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f8f2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f8f6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800f8fa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f8fe:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800f902:	2203      	movs	r2, #3
 800f904:	a901      	add	r1, sp, #4
 800f906:	2082      	movs	r0, #130	; 0x82
 800f908:	f7ff fdc4 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f90c:	b002      	add	sp, #8
 800f90e:	bd10      	pop	{r4, pc}
 800f910:	20000fca 	.word	0x20000fca

0800f914 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800f914:	b500      	push	{lr}
 800f916:	b083      	sub	sp, #12
 800f918:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800f91c:	2201      	movs	r2, #1
 800f91e:	f10d 0107 	add.w	r1, sp, #7
 800f922:	20a0      	movs	r0, #160	; 0xa0
 800f924:	f7ff fdb6 	bl	800f494 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800f928:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f92c:	2b3f      	cmp	r3, #63	; 0x3f
 800f92e:	d90f      	bls.n	800f950 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800f930:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800f932:	2200      	movs	r2, #0
        while( mant > 31 )
 800f934:	e002      	b.n	800f93c <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 800f936:	089b      	lsrs	r3, r3, #2
            exp++;
 800f938:	1c51      	adds	r1, r2, #1
 800f93a:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 800f93c:	2b1f      	cmp	r3, #31
 800f93e:	d8fa      	bhi.n	800f936 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800f940:	00d9      	lsls	r1, r3, #3
 800f942:	b2c9      	uxtb	r1, r1
 800f944:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800f946:	b2c9      	uxtb	r1, r1
 800f948:	f240 7006 	movw	r0, #1798	; 0x706
 800f94c:	f7ff ffb4 	bl	800f8b8 <SUBGRF_WriteRegister>
}
 800f950:	b003      	add	sp, #12
 800f952:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f958 <SUBGRF_SetPacketType>:
{
 800f958:	b500      	push	{lr}
 800f95a:	b083      	sub	sp, #12
 800f95c:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800f960:	b2c3      	uxtb	r3, r0
 800f962:	4a09      	ldr	r2, [pc, #36]	; (800f988 <SUBGRF_SetPacketType+0x30>)
 800f964:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800f966:	b143      	cbz	r3, 800f97a <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800f968:	2201      	movs	r2, #1
 800f96a:	f10d 0107 	add.w	r1, sp, #7
 800f96e:	208a      	movs	r0, #138	; 0x8a
 800f970:	f7ff fd90 	bl	800f494 <SUBGRF_WriteCommand>
}
 800f974:	b003      	add	sp, #12
 800f976:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800f97a:	2100      	movs	r1, #0
 800f97c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800f980:	f7ff ff9a 	bl	800f8b8 <SUBGRF_WriteRegister>
 800f984:	e7f0      	b.n	800f968 <SUBGRF_SetPacketType+0x10>
 800f986:	bf00      	nop
 800f988:	20000fcb 	.word	0x20000fcb

0800f98c <SUBGRF_SetModulationParams>:
{
 800f98c:	b510      	push	{r4, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800f992:	4b3e      	ldr	r3, [pc, #248]	; (800fa8c <SUBGRF_SetModulationParams+0x100>)
 800f994:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f998:	ab02      	add	r3, sp, #8
 800f99a:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800f99e:	7820      	ldrb	r0, [r4, #0]
 800f9a0:	4b3b      	ldr	r3, [pc, #236]	; (800fa90 <SUBGRF_SetModulationParams+0x104>)
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	4298      	cmp	r0, r3
 800f9a6:	d106      	bne.n	800f9b6 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800f9a8:	7823      	ldrb	r3, [r4, #0]
 800f9aa:	2b03      	cmp	r3, #3
 800f9ac:	d82c      	bhi.n	800fa08 <SUBGRF_SetModulationParams+0x7c>
 800f9ae:	e8df f003 	tbb	[pc, r3]
 800f9b2:	4205      	.short	0x4205
 800f9b4:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800f9b6:	f7ff ffcf 	bl	800f958 <SUBGRF_SetPacketType>
 800f9ba:	e7f5      	b.n	800f9a8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800f9bc:	6862      	ldr	r2, [r4, #4]
 800f9be:	4b35      	ldr	r3, [pc, #212]	; (800fa94 <SUBGRF_SetModulationParams+0x108>)
 800f9c0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f9c4:	0c1a      	lsrs	r2, r3, #16
 800f9c6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f9ca:	0a1a      	lsrs	r2, r3, #8
 800f9cc:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800f9d0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800f9d4:	7b23      	ldrb	r3, [r4, #12]
 800f9d6:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800f9da:	7b63      	ldrb	r3, [r4, #13]
 800f9dc:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800f9e0:	68a1      	ldr	r1, [r4, #8]
 800f9e2:	4a2d      	ldr	r2, [pc, #180]	; (800fa98 <SUBGRF_SetModulationParams+0x10c>)
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	0648      	lsls	r0, r1, #25
 800f9e8:	09c9      	lsrs	r1, r1, #7
 800f9ea:	f7f1 f8dd 	bl	8000ba8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800f9ee:	0c03      	lsrs	r3, r0, #16
 800f9f0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800f9f4:	0a03      	lsrs	r3, r0, #8
 800f9f6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800f9fa:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f9fe:	2208      	movs	r2, #8
 800fa00:	4669      	mov	r1, sp
 800fa02:	208b      	movs	r0, #139	; 0x8b
 800fa04:	f7ff fd46 	bl	800f494 <SUBGRF_WriteCommand>
}
 800fa08:	b002      	add	sp, #8
 800fa0a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800fa0c:	6922      	ldr	r2, [r4, #16]
 800fa0e:	4b21      	ldr	r3, [pc, #132]	; (800fa94 <SUBGRF_SetModulationParams+0x108>)
 800fa10:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fa14:	0c1a      	lsrs	r2, r3, #16
 800fa16:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fa1a:	0a1a      	lsrs	r2, r3, #8
 800fa1c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fa20:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800fa24:	7d23      	ldrb	r3, [r4, #20]
 800fa26:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fa2a:	2204      	movs	r2, #4
 800fa2c:	4669      	mov	r1, sp
 800fa2e:	208b      	movs	r0, #139	; 0x8b
 800fa30:	f7ff fd30 	bl	800f494 <SUBGRF_WriteCommand>
        break;
 800fa34:	e7e8      	b.n	800fa08 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800fa36:	7e23      	ldrb	r3, [r4, #24]
 800fa38:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800fa3c:	7e63      	ldrb	r3, [r4, #25]
 800fa3e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800fa42:	7ea3      	ldrb	r3, [r4, #26]
 800fa44:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800fa48:	7ee3      	ldrb	r3, [r4, #27]
 800fa4a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fa4e:	2204      	movs	r2, #4
 800fa50:	4669      	mov	r1, sp
 800fa52:	208b      	movs	r0, #139	; 0x8b
 800fa54:	f7ff fd1e 	bl	800f494 <SUBGRF_WriteCommand>
        break;
 800fa58:	e7d6      	b.n	800fa08 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800fa5a:	6862      	ldr	r2, [r4, #4]
 800fa5c:	4b0d      	ldr	r3, [pc, #52]	; (800fa94 <SUBGRF_SetModulationParams+0x108>)
 800fa5e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fa62:	0c1a      	lsrs	r2, r3, #16
 800fa64:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fa68:	0a1a      	lsrs	r2, r3, #8
 800fa6a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fa6e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fa72:	7b23      	ldrb	r3, [r4, #12]
 800fa74:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fa78:	7b63      	ldrb	r3, [r4, #13]
 800fa7a:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fa7e:	2205      	movs	r2, #5
 800fa80:	4669      	mov	r1, sp
 800fa82:	208b      	movs	r0, #139	; 0x8b
 800fa84:	f7ff fd06 	bl	800f494 <SUBGRF_WriteCommand>
}
 800fa88:	e7be      	b.n	800fa08 <SUBGRF_SetModulationParams+0x7c>
 800fa8a:	bf00      	nop
 800fa8c:	08011068 	.word	0x08011068
 800fa90:	20000fcb 	.word	0x20000fcb
 800fa94:	3d090000 	.word	0x3d090000
 800fa98:	01e84800 	.word	0x01e84800

0800fa9c <SUBGRF_ReadRegister>:
{
 800fa9c:	b500      	push	{lr}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800faa2:	2301      	movs	r3, #1
 800faa4:	f10d 0207 	add.w	r2, sp, #7
 800faa8:	4803      	ldr	r0, [pc, #12]	; (800fab8 <SUBGRF_ReadRegister+0x1c>)
 800faaa:	f7f5 fdd7 	bl	800565c <HAL_SUBGHZ_ReadRegisters>
}
 800faae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fab2:	b003      	add	sp, #12
 800fab4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fab8:	200001d0 	.word	0x200001d0

0800fabc <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800fabc:	b510      	push	{r4, lr}
 800fabe:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800fac0:	f7f2 fe98 	bl	80027f4 <RBI_IsDCDC>
 800fac4:	2801      	cmp	r0, #1
 800fac6:	d000      	beq.n	800faca <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800fac8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800faca:	f640 1023 	movw	r0, #2339	; 0x923
 800face:	f7ff ffe5 	bl	800fa9c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800fad2:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800fad6:	4321      	orrs	r1, r4
 800fad8:	f640 1023 	movw	r0, #2339	; 0x923
 800fadc:	f7ff feec 	bl	800f8b8 <SUBGRF_WriteRegister>
}
 800fae0:	e7f2      	b.n	800fac8 <Radio_SMPS_Set+0xc>
	...

0800fae4 <SUBGRF_Init>:
{
 800fae4:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800fae6:	b108      	cbz	r0, 800faec <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800fae8:	4a16      	ldr	r2, [pc, #88]	; (800fb44 <SUBGRF_Init+0x60>)
 800faea:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800faec:	f7f1 fdd8 	bl	80016a0 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800faf0:	2002      	movs	r0, #2
 800faf2:	f7ff ffe3 	bl	800fabc <Radio_SMPS_Set>
    ImageCalibrated = false;
 800faf6:	2000      	movs	r0, #0
 800faf8:	4b13      	ldr	r3, [pc, #76]	; (800fb48 <SUBGRF_Init+0x64>)
 800fafa:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800fafc:	f7ff fcf0 	bl	800f4e0 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800fb00:	f7f2 fe74 	bl	80027ec <RBI_IsTCXO>
 800fb04:	2801      	cmp	r0, #1
 800fb06:	d00f      	beq.n	800fb28 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fb08:	2120      	movs	r1, #32
 800fb0a:	f640 1011 	movw	r0, #2321	; 0x911
 800fb0e:	f7ff fed3 	bl	800f8b8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fb12:	2120      	movs	r1, #32
 800fb14:	f640 1012 	movw	r0, #2322	; 0x912
 800fb18:	f7ff fece 	bl	800f8b8 <SUBGRF_WriteRegister>
    RBI_Init();
 800fb1c:	f7f2 fe5a 	bl	80027d4 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800fb20:	4b0a      	ldr	r3, [pc, #40]	; (800fb4c <SUBGRF_Init+0x68>)
 800fb22:	2201      	movs	r2, #1
 800fb24:	701a      	strb	r2, [r3, #0]
}
 800fb26:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800fb28:	2140      	movs	r1, #64	; 0x40
 800fb2a:	f7ff fe21 	bl	800f770 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800fb2e:	2100      	movs	r1, #0
 800fb30:	f640 1011 	movw	r0, #2321	; 0x911
 800fb34:	f7ff fec0 	bl	800f8b8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 800fb38:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800fb3c:	f7ff fd7f 	bl	800f63e <SUBGRF_Calibrate>
 800fb40:	e7ec      	b.n	800fb1c <SUBGRF_Init+0x38>
 800fb42:	bf00      	nop
 800fb44:	20000fcc 	.word	0x20000fcc
 800fb48:	20000fc8 	.word	0x20000fc8
 800fb4c:	20000fca 	.word	0x20000fca

0800fb50 <SUBGRF_SetSleep>:
{
 800fb50:	b510      	push	{r4, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800fb56:	2000      	movs	r0, #0
 800fb58:	f7f2 fe40 	bl	80027dc <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fb5c:	2002      	movs	r0, #2
 800fb5e:	f7ff ffad 	bl	800fabc <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fb62:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fb66:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fb6a:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800fb6c:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fb70:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fb72:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800fb76:	2201      	movs	r2, #1
 800fb78:	f10d 0107 	add.w	r1, sp, #7
 800fb7c:	2084      	movs	r0, #132	; 0x84
 800fb7e:	f7ff fc89 	bl	800f494 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800fb82:	4b02      	ldr	r3, [pc, #8]	; (800fb8c <SUBGRF_SetSleep+0x3c>)
 800fb84:	2200      	movs	r2, #0
 800fb86:	701a      	strb	r2, [r3, #0]
}
 800fb88:	b002      	add	sp, #8
 800fb8a:	bd10      	pop	{r4, pc}
 800fb8c:	20000fca 	.word	0x20000fca

0800fb90 <SUBGRF_SetWhiteningSeed>:
{
 800fb90:	b510      	push	{r4, lr}
 800fb92:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800fb94:	f7ff fe32 	bl	800f7fc <SUBGRF_GetPacketType>
 800fb98:	b100      	cbz	r0, 800fb9c <SUBGRF_SetWhiteningSeed+0xc>
}
 800fb9a:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800fb9c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fba0:	f7ff ff7c 	bl	800fa9c <SUBGRF_ReadRegister>
 800fba4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800fba8:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800fbac:	4301      	orrs	r1, r0
 800fbae:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fbb2:	f7ff fe81 	bl	800f8b8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800fbb6:	b2e1      	uxtb	r1, r4
 800fbb8:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800fbbc:	f7ff fe7c 	bl	800f8b8 <SUBGRF_WriteRegister>
}
 800fbc0:	e7eb      	b.n	800fb9a <SUBGRF_SetWhiteningSeed+0xa>

0800fbc2 <SUBGRF_SetTxParams>:
{
 800fbc2:	b570      	push	{r4, r5, r6, lr}
 800fbc4:	b082      	sub	sp, #8
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 800fbca:	2801      	cmp	r0, #1
 800fbcc:	d035      	beq.n	800fc3a <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800fbce:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800fbd2:	f7ff ff63 	bl	800fa9c <SUBGRF_ReadRegister>
 800fbd6:	f040 011e 	orr.w	r1, r0, #30
 800fbda:	b2c9      	uxtb	r1, r1
 800fbdc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800fbe0:	f7ff fe6a 	bl	800f8b8 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	f7f2 fe09 	bl	80027fc <RBI_GetRFOMaxPowerConfig>
 800fbea:	4605      	mov	r5, r0
        if (power > max_power)
 800fbec:	4284      	cmp	r4, r0
 800fbee:	dd00      	ble.n	800fbf2 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 800fbf0:	b244      	sxtb	r4, r0
        if (max_power == 20)
 800fbf2:	2d14      	cmp	r5, #20
 800fbf4:	d054      	beq.n	800fca0 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 800fbf6:	2d11      	cmp	r5, #17
 800fbf8:	d05c      	beq.n	800fcb4 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 800fbfa:	2d0e      	cmp	r5, #14
 800fbfc:	d064      	beq.n	800fcc8 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800fbfe:	2301      	movs	r3, #1
 800fc00:	2200      	movs	r2, #0
 800fc02:	2107      	movs	r1, #7
 800fc04:	2004      	movs	r0, #4
 800fc06:	f7ff fd81 	bl	800f70c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800fc0a:	1b64      	subs	r4, r4, r5
 800fc0c:	3416      	adds	r4, #22
 800fc0e:	b264      	sxtb	r4, r4
        if (power < -9)
 800fc10:	f114 0f09 	cmn.w	r4, #9
 800fc14:	da01      	bge.n	800fc1a <SUBGRF_SetTxParams+0x58>
            power = -9;
 800fc16:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800fc1a:	2138      	movs	r1, #56	; 0x38
 800fc1c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800fc20:	f7ff fe4a 	bl	800f8b8 <SUBGRF_WriteRegister>
    buf[0] = power;
 800fc24:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800fc28:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800fc2c:	2202      	movs	r2, #2
 800fc2e:	a901      	add	r1, sp, #4
 800fc30:	208e      	movs	r0, #142	; 0x8e
 800fc32:	f7ff fc2f 	bl	800f494 <SUBGRF_WriteCommand>
}
 800fc36:	b002      	add	sp, #8
 800fc38:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	f7f2 fdde 	bl	80027fc <RBI_GetRFOMaxPowerConfig>
 800fc40:	4605      	mov	r5, r0
        if (power >  max_power)
 800fc42:	4284      	cmp	r4, r0
 800fc44:	dd00      	ble.n	800fc48 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 800fc46:	b244      	sxtb	r4, r0
        if (max_power == 14)
 800fc48:	2d0e      	cmp	r5, #14
 800fc4a:	d015      	beq.n	800fc78 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 800fc4c:	2d0a      	cmp	r5, #10
 800fc4e:	d01d      	beq.n	800fc8c <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 800fc50:	2301      	movs	r3, #1
 800fc52:	461a      	mov	r2, r3
 800fc54:	2100      	movs	r1, #0
 800fc56:	2006      	movs	r0, #6
 800fc58:	f7ff fd58 	bl	800f70c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800fc5c:	1b64      	subs	r4, r4, r5
 800fc5e:	340e      	adds	r4, #14
 800fc60:	b264      	sxtb	r4, r4
        if (power < -17)
 800fc62:	f114 0f11 	cmn.w	r4, #17
 800fc66:	da01      	bge.n	800fc6c <SUBGRF_SetTxParams+0xaa>
            power = -17;
 800fc68:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800fc6c:	2118      	movs	r1, #24
 800fc6e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800fc72:	f7ff fe21 	bl	800f8b8 <SUBGRF_WriteRegister>
 800fc76:	e7d5      	b.n	800fc24 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800fc78:	2301      	movs	r3, #1
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	2004      	movs	r0, #4
 800fc80:	f7ff fd44 	bl	800f70c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800fc84:	1b64      	subs	r4, r4, r5
 800fc86:	340e      	adds	r4, #14
 800fc88:	b264      	sxtb	r4, r4
 800fc8a:	e7ea      	b.n	800fc62 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	461a      	mov	r2, r3
 800fc90:	2100      	movs	r1, #0
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7ff fd3a 	bl	800f70c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800fc98:	1b64      	subs	r4, r4, r5
 800fc9a:	340d      	adds	r4, #13
 800fc9c:	b264      	sxtb	r4, r4
 800fc9e:	e7e0      	b.n	800fc62 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800fca0:	2301      	movs	r3, #1
 800fca2:	2200      	movs	r2, #0
 800fca4:	2105      	movs	r1, #5
 800fca6:	2003      	movs	r0, #3
 800fca8:	f7ff fd30 	bl	800f70c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800fcac:	1b64      	subs	r4, r4, r5
 800fcae:	3416      	adds	r4, #22
 800fcb0:	b264      	sxtb	r4, r4
 800fcb2:	e7ad      	b.n	800fc10 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	2103      	movs	r1, #3
 800fcba:	2002      	movs	r0, #2
 800fcbc:	f7ff fd26 	bl	800f70c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800fcc0:	1b64      	subs	r4, r4, r5
 800fcc2:	3416      	adds	r4, #22
 800fcc4:	b264      	sxtb	r4, r4
 800fcc6:	e7a3      	b.n	800fc10 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800fcc8:	2301      	movs	r3, #1
 800fcca:	2200      	movs	r2, #0
 800fccc:	2102      	movs	r1, #2
 800fcce:	4608      	mov	r0, r1
 800fcd0:	f7ff fd1c 	bl	800f70c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800fcd4:	1b64      	subs	r4, r4, r5
 800fcd6:	340e      	adds	r4, #14
 800fcd8:	b264      	sxtb	r4, r4
 800fcda:	e799      	b.n	800fc10 <SUBGRF_SetTxParams+0x4e>

0800fcdc <SUBGRF_GetRxBufferStatus>:
{
 800fcdc:	b530      	push	{r4, r5, lr}
 800fcde:	b083      	sub	sp, #12
 800fce0:	4605      	mov	r5, r0
 800fce2:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800fce4:	2202      	movs	r2, #2
 800fce6:	a901      	add	r1, sp, #4
 800fce8:	2013      	movs	r0, #19
 800fcea:	f7ff fbe3 	bl	800f4b4 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800fcee:	f7ff fd85 	bl	800f7fc <SUBGRF_GetPacketType>
 800fcf2:	2801      	cmp	r0, #1
 800fcf4:	d007      	beq.n	800fd06 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800fcf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fcfa:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800fcfc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fd00:	7023      	strb	r3, [r4, #0]
}
 800fd02:	b003      	add	sp, #12
 800fd04:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800fd06:	4b05      	ldr	r3, [pc, #20]	; (800fd1c <SUBGRF_GetRxBufferStatus+0x40>)
 800fd08:	781b      	ldrb	r3, [r3, #0]
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d1f2      	bne.n	800fcf6 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800fd10:	f240 7002 	movw	r0, #1794	; 0x702
 800fd14:	f7ff fec2 	bl	800fa9c <SUBGRF_ReadRegister>
 800fd18:	7028      	strb	r0, [r5, #0]
 800fd1a:	e7ef      	b.n	800fcfc <SUBGRF_GetRxBufferStatus+0x20>
 800fd1c:	20000fc9 	.word	0x20000fc9

0800fd20 <SUBGRF_WriteRegisters>:
{
 800fd20:	b510      	push	{r4, lr}
 800fd22:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd24:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fd28:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800fd2a:	460a      	mov	r2, r1
 800fd2c:	4601      	mov	r1, r0
 800fd2e:	4803      	ldr	r0, [pc, #12]	; (800fd3c <SUBGRF_WriteRegisters+0x1c>)
 800fd30:	f7f5 fc44 	bl	80055bc <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd34:	f384 8810 	msr	PRIMASK, r4
}
 800fd38:	bd10      	pop	{r4, pc}
 800fd3a:	bf00      	nop
 800fd3c:	200001d0 	.word	0x200001d0

0800fd40 <SUBGRF_SetSyncWord>:
{
 800fd40:	b508      	push	{r3, lr}
 800fd42:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800fd44:	2208      	movs	r2, #8
 800fd46:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800fd4a:	f7ff ffe9 	bl	800fd20 <SUBGRF_WriteRegisters>
}
 800fd4e:	2000      	movs	r0, #0
 800fd50:	bd08      	pop	{r3, pc}

0800fd52 <SUBGRF_SetCrcSeed>:
{
 800fd52:	b500      	push	{lr}
 800fd54:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800fd56:	0a03      	lsrs	r3, r0, #8
 800fd58:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800fd5c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800fd60:	f7ff fd4c 	bl	800f7fc <SUBGRF_GetPacketType>
 800fd64:	b110      	cbz	r0, 800fd6c <SUBGRF_SetCrcSeed+0x1a>
}
 800fd66:	b003      	add	sp, #12
 800fd68:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800fd6c:	2202      	movs	r2, #2
 800fd6e:	a901      	add	r1, sp, #4
 800fd70:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800fd74:	f7ff ffd4 	bl	800fd20 <SUBGRF_WriteRegisters>
}
 800fd78:	e7f5      	b.n	800fd66 <SUBGRF_SetCrcSeed+0x14>

0800fd7a <SUBGRF_SetCrcPolynomial>:
{
 800fd7a:	b500      	push	{lr}
 800fd7c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800fd7e:	0a03      	lsrs	r3, r0, #8
 800fd80:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800fd84:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800fd88:	f7ff fd38 	bl	800f7fc <SUBGRF_GetPacketType>
 800fd8c:	b110      	cbz	r0, 800fd94 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800fd8e:	b003      	add	sp, #12
 800fd90:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800fd94:	2202      	movs	r2, #2
 800fd96:	a901      	add	r1, sp, #4
 800fd98:	f240 60be 	movw	r0, #1726	; 0x6be
 800fd9c:	f7ff ffc0 	bl	800fd20 <SUBGRF_WriteRegisters>
}
 800fda0:	e7f5      	b.n	800fd8e <SUBGRF_SetCrcPolynomial+0x14>
	...

0800fda4 <SUBGRF_SetPacketParams>:
{
 800fda4:	b510      	push	{r4, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800fdaa:	ab01      	add	r3, sp, #4
 800fdac:	4a33      	ldr	r2, [pc, #204]	; (800fe7c <SUBGRF_SetPacketParams+0xd8>)
 800fdae:	ca07      	ldmia	r2, {r0, r1, r2}
 800fdb0:	c303      	stmia	r3!, {r0, r1}
 800fdb2:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800fdb4:	7820      	ldrb	r0, [r4, #0]
 800fdb6:	4b32      	ldr	r3, [pc, #200]	; (800fe80 <SUBGRF_SetPacketParams+0xdc>)
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	4298      	cmp	r0, r3
 800fdbc:	d106      	bne.n	800fdcc <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 800fdbe:	7823      	ldrb	r3, [r4, #0]
 800fdc0:	2b03      	cmp	r3, #3
 800fdc2:	d82a      	bhi.n	800fe1a <SUBGRF_SetPacketParams+0x76>
 800fdc4:	e8df f003 	tbb	[pc, r3]
 800fdc8:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 800fdcc:	f7ff fdc4 	bl	800f958 <SUBGRF_SetPacketType>
 800fdd0:	e7f5      	b.n	800fdbe <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800fdd2:	7a63      	ldrb	r3, [r4, #9]
 800fdd4:	2bf1      	cmp	r3, #241	; 0xf1
 800fdd6:	d022      	beq.n	800fe1e <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800fdd8:	2bf2      	cmp	r3, #242	; 0xf2
 800fdda:	d02a      	beq.n	800fe32 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800fddc:	8862      	ldrh	r2, [r4, #2]
 800fdde:	0a11      	lsrs	r1, r2, #8
 800fde0:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800fde4:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800fde8:	7922      	ldrb	r2, [r4, #4]
 800fdea:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800fdee:	7962      	ldrb	r2, [r4, #5]
 800fdf0:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800fdf4:	79a2      	ldrb	r2, [r4, #6]
 800fdf6:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800fdfa:	79e2      	ldrb	r2, [r4, #7]
 800fdfc:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800fe00:	7a22      	ldrb	r2, [r4, #8]
 800fe02:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800fe06:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800fe0a:	7aa3      	ldrb	r3, [r4, #10]
 800fe0c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800fe10:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800fe12:	a901      	add	r1, sp, #4
 800fe14:	208c      	movs	r0, #140	; 0x8c
 800fe16:	f7ff fb3d 	bl	800f494 <SUBGRF_WriteCommand>
}
 800fe1a:	b004      	add	sp, #16
 800fe1c:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800fe1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800fe22:	f7ff ff96 	bl	800fd52 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800fe26:	f248 0005 	movw	r0, #32773	; 0x8005
 800fe2a:	f7ff ffa6 	bl	800fd7a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800fe2e:	2302      	movs	r3, #2
 800fe30:	e7d4      	b.n	800fddc <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800fe32:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800fe36:	f7ff ff8c 	bl	800fd52 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800fe3a:	f241 0021 	movw	r0, #4129	; 0x1021
 800fe3e:	f7ff ff9c 	bl	800fd7a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800fe42:	2306      	movs	r3, #6
 800fe44:	e7ca      	b.n	800fddc <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800fe46:	7b23      	ldrb	r3, [r4, #12]
 800fe48:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 800fe4c:	2201      	movs	r2, #1
        break;
 800fe4e:	e7e0      	b.n	800fe12 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800fe50:	89e3      	ldrh	r3, [r4, #14]
 800fe52:	0a1a      	lsrs	r2, r3, #8
 800fe54:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800fe58:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800fe5c:	7c23      	ldrb	r3, [r4, #16]
 800fe5e:	4a09      	ldr	r2, [pc, #36]	; (800fe84 <SUBGRF_SetPacketParams+0xe0>)
 800fe60:	7013      	strb	r3, [r2, #0]
 800fe62:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800fe66:	7c63      	ldrb	r3, [r4, #17]
 800fe68:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800fe6c:	7ca3      	ldrb	r3, [r4, #18]
 800fe6e:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800fe72:	7ce3      	ldrb	r3, [r4, #19]
 800fe74:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 800fe78:	2206      	movs	r2, #6
        break;
 800fe7a:	e7ca      	b.n	800fe12 <SUBGRF_SetPacketParams+0x6e>
 800fe7c:	08011070 	.word	0x08011070
 800fe80:	20000fcb 	.word	0x20000fcb
 800fe84:	20000fc9 	.word	0x20000fc9

0800fe88 <SUBGRF_ReadRegisters>:
{
 800fe88:	b510      	push	{r4, lr}
 800fe8a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe8c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fe90:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800fe92:	460a      	mov	r2, r1
 800fe94:	4601      	mov	r1, r0
 800fe96:	4803      	ldr	r0, [pc, #12]	; (800fea4 <SUBGRF_ReadRegisters+0x1c>)
 800fe98:	f7f5 fbe0 	bl	800565c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe9c:	f384 8810 	msr	PRIMASK, r4
}
 800fea0:	bd10      	pop	{r4, pc}
 800fea2:	bf00      	nop
 800fea4:	200001d0 	.word	0x200001d0

0800fea8 <SUBGRF_GetRandom>:
{
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	b082      	sub	sp, #8
    uint32_t number = 0;
 800feac:	2600      	movs	r6, #0
 800feae:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800feb0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800feb4:	f7ff fdf2 	bl	800fa9c <SUBGRF_ReadRegister>
 800feb8:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800feba:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 800febe:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800fec2:	f7ff fcf9 	bl	800f8b8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800fec6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800feca:	f7ff fde7 	bl	800fa9c <SUBGRF_ReadRegister>
 800fece:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800fed0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800fed4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fed8:	f7ff fcee 	bl	800f8b8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800fedc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fee0:	f7ff fb32 	bl	800f548 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800fee4:	2204      	movs	r2, #4
 800fee6:	eb0d 0102 	add.w	r1, sp, r2
 800feea:	f640 0019 	movw	r0, #2073	; 0x819
 800feee:	f7ff ffcb 	bl	800fe88 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 800fef2:	4630      	mov	r0, r6
 800fef4:	f7ff faf4 	bl	800f4e0 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800fef8:	4629      	mov	r1, r5
 800fefa:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800fefe:	f7ff fcdb 	bl	800f8b8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800ff02:	4621      	mov	r1, r4
 800ff04:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800ff08:	f7ff fcd6 	bl	800f8b8 <SUBGRF_WriteRegister>
}
 800ff0c:	9801      	ldr	r0, [sp, #4]
 800ff0e:	b002      	add	sp, #8
 800ff10:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff14 <SUBGRF_WriteBuffer>:
{
 800ff14:	b510      	push	{r4, lr}
 800ff16:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff18:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ff1c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ff1e:	460a      	mov	r2, r1
 800ff20:	4601      	mov	r1, r0
 800ff22:	4803      	ldr	r0, [pc, #12]	; (800ff30 <SUBGRF_WriteBuffer+0x1c>)
 800ff24:	f7f5 fcf0 	bl	8005908 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff28:	f384 8810 	msr	PRIMASK, r4
}
 800ff2c:	bd10      	pop	{r4, pc}
 800ff2e:	bf00      	nop
 800ff30:	200001d0 	.word	0x200001d0

0800ff34 <SUBGRF_SetPayload>:
{
 800ff34:	b508      	push	{r3, lr}
 800ff36:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800ff38:	4601      	mov	r1, r0
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	f7ff ffea 	bl	800ff14 <SUBGRF_WriteBuffer>
}
 800ff40:	bd08      	pop	{r3, pc}

0800ff42 <SUBGRF_SendPayload>:
{
 800ff42:	b510      	push	{r4, lr}
 800ff44:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800ff46:	f7ff fff5 	bl	800ff34 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f7ff fae2 	bl	800f514 <SUBGRF_SetTx>
}
 800ff50:	bd10      	pop	{r4, pc}
	...

0800ff54 <SUBGRF_ReadBuffer>:
{
 800ff54:	b510      	push	{r4, lr}
 800ff56:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff58:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ff5c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ff5e:	460a      	mov	r2, r1
 800ff60:	4601      	mov	r1, r0
 800ff62:	4803      	ldr	r0, [pc, #12]	; (800ff70 <SUBGRF_ReadBuffer+0x1c>)
 800ff64:	f7f5 fd1a 	bl	800599c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff68:	f384 8810 	msr	PRIMASK, r4
}
 800ff6c:	bd10      	pop	{r4, pc}
 800ff6e:	bf00      	nop
 800ff70:	200001d0 	.word	0x200001d0

0800ff74 <SUBGRF_GetPayload>:
{
 800ff74:	b570      	push	{r4, r5, r6, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	4606      	mov	r6, r0
 800ff7a:	460c      	mov	r4, r1
 800ff7c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 800ff84:	f10d 0107 	add.w	r1, sp, #7
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f7ff fea7 	bl	800fcdc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800ff8e:	7822      	ldrb	r2, [r4, #0]
 800ff90:	42aa      	cmp	r2, r5
 800ff92:	d902      	bls.n	800ff9a <SUBGRF_GetPayload+0x26>
        return 1;
 800ff94:	2001      	movs	r0, #1
}
 800ff96:	b002      	add	sp, #8
 800ff98:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800ff9a:	4631      	mov	r1, r6
 800ff9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ffa0:	f7ff ffd8 	bl	800ff54 <SUBGRF_ReadBuffer>
    return 0;
 800ffa4:	2000      	movs	r0, #0
 800ffa6:	e7f6      	b.n	800ff96 <SUBGRF_GetPayload+0x22>

0800ffa8 <SUBGRF_SetSwitch>:
{
 800ffa8:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 800ffaa:	2901      	cmp	r1, #1
 800ffac:	d003      	beq.n	800ffb6 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ffae:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 800ffb0:	f7f2 fc14 	bl	80027dc <RBI_ConfigRFSwitch>
}
 800ffb4:	bd10      	pop	{r4, pc}
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 800ffba:	2c01      	cmp	r4, #1
 800ffbc:	d003      	beq.n	800ffc6 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 800ffbe:	2c02      	cmp	r4, #2
 800ffc0:	d1f6      	bne.n	800ffb0 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 800ffc2:	2003      	movs	r0, #3
 800ffc4:	e7f4      	b.n	800ffb0 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800ffc6:	2004      	movs	r0, #4
 800ffc8:	f7ff fd78 	bl	800fabc <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 800ffcc:	2002      	movs	r0, #2
 800ffce:	e7f6      	b.n	800ffbe <SUBGRF_SetSwitch+0x16>

0800ffd0 <SUBGRF_SetRfTxPower>:
{
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 800ffd4:	f7f2 fc06 	bl	80027e4 <RBI_GetTxConfig>
    switch (TxConfig)
 800ffd8:	b148      	cbz	r0, 800ffee <SUBGRF_SetRfTxPower+0x1e>
 800ffda:	2802      	cmp	r0, #2
 800ffdc:	d10d      	bne.n	800fffa <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 800ffde:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800ffe0:	2202      	movs	r2, #2
 800ffe2:	4621      	mov	r1, r4
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	f7ff fdec 	bl	800fbc2 <SUBGRF_SetTxParams>
}
 800ffea:	4628      	mov	r0, r5
 800ffec:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 800ffee:	2c0f      	cmp	r4, #15
 800fff0:	dc01      	bgt.n	800fff6 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 800fff2:	2501      	movs	r5, #1
 800fff4:	e7f4      	b.n	800ffe0 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 800fff6:	2502      	movs	r5, #2
 800fff8:	e7f2      	b.n	800ffe0 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 800fffa:	2501      	movs	r5, #1
 800fffc:	e7f0      	b.n	800ffe0 <SUBGRF_SetRfTxPower+0x10>

0800fffe <SUBGRF_GetRadioWakeUpTime>:
}
 800fffe:	2001      	movs	r0, #1
 8010000:	4770      	bx	lr
	...

08010004 <HAL_SUBGHZ_TxCpltCallback>:
{
 8010004:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8010006:	4b02      	ldr	r3, [pc, #8]	; (8010010 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	2001      	movs	r0, #1
 801000c:	4798      	blx	r3
}
 801000e:	bd08      	pop	{r3, pc}
 8010010:	20000fcc 	.word	0x20000fcc

08010014 <HAL_SUBGHZ_RxCpltCallback>:
{
 8010014:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8010016:	4b02      	ldr	r3, [pc, #8]	; (8010020 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2002      	movs	r0, #2
 801001c:	4798      	blx	r3
}
 801001e:	bd08      	pop	{r3, pc}
 8010020:	20000fcc 	.word	0x20000fcc

08010024 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8010024:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8010026:	4b02      	ldr	r3, [pc, #8]	; (8010030 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2040      	movs	r0, #64	; 0x40
 801002c:	4798      	blx	r3
}
 801002e:	bd08      	pop	{r3, pc}
 8010030:	20000fcc 	.word	0x20000fcc

08010034 <HAL_SUBGHZ_CADStatusCallback>:
{
 8010034:	b508      	push	{r3, lr}
    switch (cadstatus)
 8010036:	b111      	cbz	r1, 801003e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8010038:	2901      	cmp	r1, #1
 801003a:	d005      	beq.n	8010048 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 801003c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801003e:	4b05      	ldr	r3, [pc, #20]	; (8010054 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	2080      	movs	r0, #128	; 0x80
 8010044:	4798      	blx	r3
            break;
 8010046:	e7f9      	b.n	801003c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8010048:	4b02      	ldr	r3, [pc, #8]	; (8010054 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010050:	4798      	blx	r3
}
 8010052:	e7f3      	b.n	801003c <HAL_SUBGHZ_CADStatusCallback+0x8>
 8010054:	20000fcc 	.word	0x20000fcc

08010058 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8010058:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801005a:	4b03      	ldr	r3, [pc, #12]	; (8010068 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010062:	4798      	blx	r3
}
 8010064:	bd08      	pop	{r3, pc}
 8010066:	bf00      	nop
 8010068:	20000fcc 	.word	0x20000fcc

0801006c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 801006c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801006e:	4b02      	ldr	r3, [pc, #8]	; (8010078 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	2020      	movs	r0, #32
 8010074:	4798      	blx	r3
}
 8010076:	bd08      	pop	{r3, pc}
 8010078:	20000fcc 	.word	0x20000fcc

0801007c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 801007c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801007e:	4b02      	ldr	r3, [pc, #8]	; (8010088 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2004      	movs	r0, #4
 8010084:	4798      	blx	r3
}
 8010086:	bd08      	pop	{r3, pc}
 8010088:	20000fcc 	.word	0x20000fcc

0801008c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 801008c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801008e:	4b02      	ldr	r3, [pc, #8]	; (8010098 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	2008      	movs	r0, #8
 8010094:	4798      	blx	r3
}
 8010096:	bd08      	pop	{r3, pc}
 8010098:	20000fcc 	.word	0x20000fcc

0801009c <HAL_SUBGHZ_HeaderValidCallback>:
{
 801009c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801009e:	4b02      	ldr	r3, [pc, #8]	; (80100a8 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	2010      	movs	r0, #16
 80100a4:	4798      	blx	r3
}
 80100a6:	bd08      	pop	{r3, pc}
 80100a8:	20000fcc 	.word	0x20000fcc

080100ac <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80100ac:	4601      	mov	r1, r0
 80100ae:	b188      	cbz	r0, 80100d4 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80100b0:	2300      	movs	r3, #0
 80100b2:	2b15      	cmp	r3, #21
 80100b4:	d80d      	bhi.n	80100d2 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80100b6:	4618      	mov	r0, r3
 80100b8:	4a07      	ldr	r2, [pc, #28]	; (80100d8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80100ba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80100be:	428a      	cmp	r2, r1
 80100c0:	d802      	bhi.n	80100c8 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80100c2:	3301      	adds	r3, #1
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	e7f4      	b.n	80100b2 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 80100c8:	4b03      	ldr	r3, [pc, #12]	; (80100d8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80100ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80100ce:	7900      	ldrb	r0, [r0, #4]
 80100d0:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80100d2:	e7fe      	b.n	80100d2 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 80100d4:	201f      	movs	r0, #31
}
 80100d6:	4770      	bx	lr
 80100d8:	08011d94 	.word	0x08011d94

080100dc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80100dc:	b570      	push	{r4, r5, r6, lr}
 80100de:	b082      	sub	sp, #8
 80100e0:	4606      	mov	r6, r0
 80100e2:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80100e4:	4b1d      	ldr	r3, [pc, #116]	; (801015c <SUBGRF_GetCFO+0x80>)
 80100e6:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80100e8:	f640 0007 	movw	r0, #2055	; 0x807
 80100ec:	f7ff fcd6 	bl	800fa9c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80100f0:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80100f4:	3308      	adds	r3, #8
 80100f6:	446b      	add	r3, sp
 80100f8:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80100fc:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8010100:	3b01      	subs	r3, #1
 8010102:	fa05 f303 	lsl.w	r3, r5, r3
 8010106:	4d16      	ldr	r5, [pc, #88]	; (8010160 <SUBGRF_GetCFO+0x84>)
 8010108:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 801010c:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8010110:	2a07      	cmp	r2, #7
 8010112:	d921      	bls.n	8010158 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8010114:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8010116:	fb00 f202 	mul.w	r2, r0, r2
 801011a:	2a03      	cmp	r2, #3
 801011c:	d800      	bhi.n	8010120 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 801011e:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8010120:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8010124:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8010128:	f7ff fcb8 	bl	800fa9c <SUBGRF_ReadRegister>
 801012c:	0200      	lsls	r0, r0, #8
 801012e:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8010132:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8010136:	f7ff fcb1 	bl	800fa9c <SUBGRF_ReadRegister>
 801013a:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801013c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8010140:	d003      	beq.n	801014a <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8010142:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8010146:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801014a:	096d      	lsrs	r5, r5, #5
 801014c:	fb05 f000 	mul.w	r0, r5, r0
 8010150:	11c0      	asrs	r0, r0, #7
 8010152:	6020      	str	r0, [r4, #0]
}
 8010154:	b002      	add	sp, #8
 8010156:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8010158:	2002      	movs	r0, #2
 801015a:	e7dc      	b.n	8010116 <SUBGRF_GetCFO+0x3a>
 801015c:	0c0a0804 	.word	0x0c0a0804
 8010160:	01e84800 	.word	0x01e84800

08010164 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8010164:	f04f 30ff 	mov.w	r0, #4294967295
 8010168:	4770      	bx	lr

0801016a <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 801016a:	f04f 30ff 	mov.w	r0, #4294967295
 801016e:	4770      	bx	lr

08010170 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8010170:	4770      	bx	lr

08010172 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8010172:	2000      	movs	r0, #0
 8010174:	4770      	bx	lr

08010176 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8010176:	2000      	movs	r0, #0
 8010178:	4770      	bx	lr

0801017a <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801017a:	4770      	bx	lr

0801017c <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 801017c:	f04f 30ff 	mov.w	r0, #4294967295
 8010180:	4770      	bx	lr

08010182 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8010182:	f04f 30ff 	mov.w	r0, #4294967295
 8010186:	4770      	bx	lr

08010188 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8010188:	4770      	bx	lr

0801018a <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801018a:	4770      	bx	lr

0801018c <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801018c:	4770      	bx	lr
	...

08010190 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8010190:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010192:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010196:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8010198:	4b1e      	ldr	r3, [pc, #120]	; (8010214 <TRACE_AllocateBufer+0x84>)
 801019a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801019e:	8a1a      	ldrh	r2, [r3, #16]
 80101a0:	4594      	cmp	ip, r2
 80101a2:	d011      	beq.n	80101c8 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80101a4:	4594      	cmp	ip, r2
 80101a6:	d921      	bls.n	80101ec <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80101a8:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80101ac:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80101ae:	4283      	cmp	r3, r0
 80101b0:	d81f      	bhi.n	80101f2 <TRACE_AllocateBufer+0x62>
 80101b2:	4282      	cmp	r2, r0
 80101b4:	d91d      	bls.n	80101f2 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80101b6:	4b17      	ldr	r3, [pc, #92]	; (8010214 <TRACE_AllocateBufer+0x84>)
 80101b8:	2401      	movs	r4, #1
 80101ba:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80101bc:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80101c0:	2400      	movs	r4, #0
 80101c2:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80101c4:	4613      	mov	r3, r2
 80101c6:	e014      	b.n	80101f2 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80101c8:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80101cc:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80101ce:	4298      	cmp	r0, r3
 80101d0:	d30f      	bcc.n	80101f2 <TRACE_AllocateBufer+0x62>
 80101d2:	4282      	cmp	r2, r0
 80101d4:	d90d      	bls.n	80101f2 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80101d6:	4b0f      	ldr	r3, [pc, #60]	; (8010214 <TRACE_AllocateBufer+0x84>)
 80101d8:	2401      	movs	r4, #1
 80101da:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80101dc:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80101e0:	f04f 0c00 	mov.w	ip, #0
 80101e4:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80101e8:	4613      	mov	r3, r2
 80101ea:	e002      	b.n	80101f2 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80101ec:	eba2 030c 	sub.w	r3, r2, ip
 80101f0:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80101f2:	4283      	cmp	r3, r0
 80101f4:	d90a      	bls.n	801020c <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80101f6:	4a07      	ldr	r2, [pc, #28]	; (8010214 <TRACE_AllocateBufer+0x84>)
 80101f8:	8a53      	ldrh	r3, [r2, #18]
 80101fa:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80101fc:	4403      	add	r3, r0
 80101fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010202:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8010204:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010206:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 801020a:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 801020c:	f04f 30ff 	mov.w	r0, #4294967295
 8010210:	e7f9      	b.n	8010206 <TRACE_AllocateBufer+0x76>
 8010212:	bf00      	nop
 8010214:	200013d0 	.word	0x200013d0

08010218 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010218:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801021c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 801021e:	4a03      	ldr	r2, [pc, #12]	; (801022c <TRACE_Lock+0x14>)
 8010220:	8ad3      	ldrh	r3, [r2, #22]
 8010222:	3301      	adds	r3, #1
 8010224:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010226:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801022a:	4770      	bx	lr
 801022c:	200013d0 	.word	0x200013d0

08010230 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010230:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010234:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8010236:	4a03      	ldr	r2, [pc, #12]	; (8010244 <TRACE_UnLock+0x14>)
 8010238:	8ad3      	ldrh	r3, [r2, #22]
 801023a:	3b01      	subs	r3, #1
 801023c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801023e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010242:	4770      	bx	lr
 8010244:	200013d0 	.word	0x200013d0

08010248 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8010248:	4b02      	ldr	r3, [pc, #8]	; (8010254 <TRACE_IsLocked+0xc>)
 801024a:	8ad8      	ldrh	r0, [r3, #22]
}
 801024c:	3800      	subs	r0, #0
 801024e:	bf18      	it	ne
 8010250:	2001      	movne	r0, #1
 8010252:	4770      	bx	lr
 8010254:	200013d0 	.word	0x200013d0

08010258 <UTIL_ADV_TRACE_Init>:
{
 8010258:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801025a:	2218      	movs	r2, #24
 801025c:	2100      	movs	r1, #0
 801025e:	4807      	ldr	r0, [pc, #28]	; (801027c <UTIL_ADV_TRACE_Init+0x24>)
 8010260:	f000 f98f 	bl	8010582 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8010264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010268:	2100      	movs	r1, #0
 801026a:	4805      	ldr	r0, [pc, #20]	; (8010280 <UTIL_ADV_TRACE_Init+0x28>)
 801026c:	f000 f989 	bl	8010582 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8010270:	4b04      	ldr	r3, [pc, #16]	; (8010284 <UTIL_ADV_TRACE_Init+0x2c>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	4804      	ldr	r0, [pc, #16]	; (8010288 <UTIL_ADV_TRACE_Init+0x30>)
 8010276:	4798      	blx	r3
}
 8010278:	bd08      	pop	{r3, pc}
 801027a:	bf00      	nop
 801027c:	200013d0 	.word	0x200013d0
 8010280:	20000fd0 	.word	0x20000fd0
 8010284:	080110e0 	.word	0x080110e0
 8010288:	0801040d 	.word	0x0801040d

0801028c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801028c:	4b01      	ldr	r3, [pc, #4]	; (8010294 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801028e:	6058      	str	r0, [r3, #4]
}
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	200013d0 	.word	0x200013d0

08010298 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8010298:	4b01      	ldr	r3, [pc, #4]	; (80102a0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801029a:	7218      	strb	r0, [r3, #8]
}
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	200013d0 	.word	0x200013d0

080102a4 <TRACE_Send>:
{
 80102a4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80102aa:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80102ac:	f7ff ffcc 	bl	8010248 <TRACE_IsLocked>
 80102b0:	b118      	cbz	r0, 80102ba <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102b2:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80102b6:	2000      	movs	r0, #0
}
 80102b8:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 80102ba:	f7ff ffad 	bl	8010218 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80102be:	4b1d      	ldr	r3, [pc, #116]	; (8010334 <TRACE_Send+0x90>)
 80102c0:	8a1a      	ldrh	r2, [r3, #16]
 80102c2:	8a5b      	ldrh	r3, [r3, #18]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d02e      	beq.n	8010326 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80102c8:	491a      	ldr	r1, [pc, #104]	; (8010334 <TRACE_Send+0x90>)
 80102ca:	7889      	ldrb	r1, [r1, #2]
 80102cc:	2901      	cmp	r1, #1
 80102ce:	d017      	beq.n	8010300 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80102d0:	4a18      	ldr	r2, [pc, #96]	; (8010334 <TRACE_Send+0x90>)
 80102d2:	7892      	ldrb	r2, [r2, #2]
 80102d4:	b932      	cbnz	r2, 80102e4 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80102d6:	4a17      	ldr	r2, [pc, #92]	; (8010334 <TRACE_Send+0x90>)
 80102d8:	8a12      	ldrh	r2, [r2, #16]
 80102da:	4293      	cmp	r3, r2
 80102dc:	d91e      	bls.n	801031c <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80102de:	1a9b      	subs	r3, r3, r2
 80102e0:	4a14      	ldr	r2, [pc, #80]	; (8010334 <TRACE_Send+0x90>)
 80102e2:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80102e4:	4e13      	ldr	r6, [pc, #76]	; (8010334 <TRACE_Send+0x90>)
 80102e6:	8a33      	ldrh	r3, [r6, #16]
 80102e8:	4d13      	ldr	r5, [pc, #76]	; (8010338 <TRACE_Send+0x94>)
 80102ea:	441d      	add	r5, r3
 80102ec:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80102f0:	f7f1 fac4 	bl	800187c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80102f4:	4b11      	ldr	r3, [pc, #68]	; (801033c <TRACE_Send+0x98>)
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	8ab1      	ldrh	r1, [r6, #20]
 80102fa:	4628      	mov	r0, r5
 80102fc:	4798      	blx	r3
 80102fe:	e7db      	b.n	80102b8 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8010300:	480c      	ldr	r0, [pc, #48]	; (8010334 <TRACE_Send+0x90>)
 8010302:	8801      	ldrh	r1, [r0, #0]
 8010304:	1a8a      	subs	r2, r1, r2
 8010306:	b292      	uxth	r2, r2
 8010308:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801030a:	2102      	movs	r1, #2
 801030c:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801030e:	2100      	movs	r1, #0
 8010310:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010312:	2a00      	cmp	r2, #0
 8010314:	d1dc      	bne.n	80102d0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010316:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010318:	8201      	strh	r1, [r0, #16]
 801031a:	e7d9      	b.n	80102d0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801031c:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8010320:	4a04      	ldr	r2, [pc, #16]	; (8010334 <TRACE_Send+0x90>)
 8010322:	8293      	strh	r3, [r2, #20]
 8010324:	e7de      	b.n	80102e4 <TRACE_Send+0x40>
      TRACE_UnLock();
 8010326:	f7ff ff83 	bl	8010230 <TRACE_UnLock>
 801032a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801032e:	2000      	movs	r0, #0
}
 8010330:	e7c2      	b.n	80102b8 <TRACE_Send+0x14>
 8010332:	bf00      	nop
 8010334:	200013d0 	.word	0x200013d0
 8010338:	20000fd0 	.word	0x20000fd0
 801033c:	080110e0 	.word	0x080110e0

08010340 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010340:	b408      	push	{r3}
 8010342:	b530      	push	{r4, r5, lr}
 8010344:	b086      	sub	sp, #24
 8010346:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8010348:	2300      	movs	r3, #0
 801034a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801034e:	4b2c      	ldr	r3, [pc, #176]	; (8010400 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8010350:	7a1b      	ldrb	r3, [r3, #8]
 8010352:	4283      	cmp	r3, r0
 8010354:	d34d      	bcc.n	80103f2 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8010356:	4b2a      	ldr	r3, [pc, #168]	; (8010400 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	ea31 0303 	bics.w	r3, r1, r3
 801035e:	d14b      	bne.n	80103f8 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8010360:	4b27      	ldr	r3, [pc, #156]	; (8010400 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	b123      	cbz	r3, 8010370 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8010366:	b11a      	cbz	r2, 8010370 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8010368:	f10d 0102 	add.w	r1, sp, #2
 801036c:	a801      	add	r0, sp, #4
 801036e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8010370:	ab0a      	add	r3, sp, #40	; 0x28
 8010372:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010374:	4622      	mov	r2, r4
 8010376:	f44f 7100 	mov.w	r1, #512	; 0x200
 801037a:	4822      	ldr	r0, [pc, #136]	; (8010404 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 801037c:	f000 fcd0 	bl	8010d20 <tiny_vsnprintf_like>
 8010380:	b285      	uxth	r5, r0
  TRACE_Lock();
 8010382:	f7ff ff49 	bl	8010218 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8010386:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801038a:	4428      	add	r0, r5
 801038c:	4669      	mov	r1, sp
 801038e:	b280      	uxth	r0, r0
 8010390:	f7ff fefe 	bl	8010190 <TRACE_AllocateBufer>
 8010394:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010398:	d026      	beq.n	80103e8 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 801039a:	2300      	movs	r3, #0
 801039c:	e00d      	b.n	80103ba <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801039e:	f8bd 2000 	ldrh.w	r2, [sp]
 80103a2:	f103 0118 	add.w	r1, r3, #24
 80103a6:	4469      	add	r1, sp
 80103a8:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80103ac:	4916      	ldr	r1, [pc, #88]	; (8010408 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80103ae:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80103b0:	3201      	adds	r2, #1
 80103b2:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80103b6:	3301      	adds	r3, #1
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d8ed      	bhi.n	801039e <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80103c2:	f8bd 0000 	ldrh.w	r0, [sp]
 80103c6:	9b05      	ldr	r3, [sp, #20]
 80103c8:	4622      	mov	r2, r4
 80103ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80103ce:	4c0e      	ldr	r4, [pc, #56]	; (8010408 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80103d0:	4420      	add	r0, r4
 80103d2:	f000 fca5 	bl	8010d20 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80103d6:	f7ff ff2b 	bl	8010230 <TRACE_UnLock>
    return TRACE_Send();
 80103da:	f7ff ff63 	bl	80102a4 <TRACE_Send>
}
 80103de:	b006      	add	sp, #24
 80103e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103e4:	b001      	add	sp, #4
 80103e6:	4770      	bx	lr
  TRACE_UnLock();
 80103e8:	f7ff ff22 	bl	8010230 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80103ec:	f06f 0002 	mvn.w	r0, #2
 80103f0:	e7f5      	b.n	80103de <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 80103f2:	f06f 0004 	mvn.w	r0, #4
 80103f6:	e7f2      	b.n	80103de <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80103f8:	f06f 0005 	mvn.w	r0, #5
 80103fc:	e7ef      	b.n	80103de <UTIL_ADV_TRACE_COND_FSend+0x9e>
 80103fe:	bf00      	nop
 8010400:	200013d0 	.word	0x200013d0
 8010404:	200013e8 	.word	0x200013e8
 8010408:	20000fd0 	.word	0x20000fd0

0801040c <TRACE_TxCpltCallback>:
{
 801040c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801040e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010412:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8010414:	4b25      	ldr	r3, [pc, #148]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 8010416:	789b      	ldrb	r3, [r3, #2]
 8010418:	2b02      	cmp	r3, #2
 801041a:	d016      	beq.n	801044a <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801041c:	4a23      	ldr	r2, [pc, #140]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 801041e:	8a13      	ldrh	r3, [r2, #16]
 8010420:	8a90      	ldrh	r0, [r2, #20]
 8010422:	4403      	add	r3, r0
 8010424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010428:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801042a:	4b20      	ldr	r3, [pc, #128]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 801042c:	8a1a      	ldrh	r2, [r3, #16]
 801042e:	8a5b      	ldrh	r3, [r3, #18]
 8010430:	429a      	cmp	r2, r3
 8010432:	d003      	beq.n	801043c <TRACE_TxCpltCallback+0x30>
 8010434:	481d      	ldr	r0, [pc, #116]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 8010436:	8ac0      	ldrh	r0, [r0, #22]
 8010438:	2801      	cmp	r0, #1
 801043a:	d00b      	beq.n	8010454 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801043c:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8010440:	f7f1 fa22 	bl	8001888 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8010444:	f7ff fef4 	bl	8010230 <TRACE_UnLock>
}
 8010448:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801044a:	4b18      	ldr	r3, [pc, #96]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 801044c:	2200      	movs	r2, #0
 801044e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010450:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8010452:	e7ea      	b.n	801042a <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010454:	4815      	ldr	r0, [pc, #84]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 8010456:	7880      	ldrb	r0, [r0, #2]
 8010458:	2801      	cmp	r0, #1
 801045a:	d014      	beq.n	8010486 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801045c:	4a13      	ldr	r2, [pc, #76]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 801045e:	7892      	ldrb	r2, [r2, #2]
 8010460:	b932      	cbnz	r2, 8010470 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010462:	4a12      	ldr	r2, [pc, #72]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 8010464:	8a12      	ldrh	r2, [r2, #16]
 8010466:	4293      	cmp	r3, r2
 8010468:	d91b      	bls.n	80104a2 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801046a:	1a9b      	subs	r3, r3, r2
 801046c:	4a0f      	ldr	r2, [pc, #60]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 801046e:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010470:	4b0e      	ldr	r3, [pc, #56]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 8010472:	8a1a      	ldrh	r2, [r3, #16]
 8010474:	480e      	ldr	r0, [pc, #56]	; (80104b0 <TRACE_TxCpltCallback+0xa4>)
 8010476:	4410      	add	r0, r2
 8010478:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801047c:	4a0d      	ldr	r2, [pc, #52]	; (80104b4 <TRACE_TxCpltCallback+0xa8>)
 801047e:	68d2      	ldr	r2, [r2, #12]
 8010480:	8a99      	ldrh	r1, [r3, #20]
 8010482:	4790      	blx	r2
 8010484:	e7e0      	b.n	8010448 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8010486:	4c09      	ldr	r4, [pc, #36]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 8010488:	8820      	ldrh	r0, [r4, #0]
 801048a:	1a82      	subs	r2, r0, r2
 801048c:	b292      	uxth	r2, r2
 801048e:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010490:	2002      	movs	r0, #2
 8010492:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010494:	2000      	movs	r0, #0
 8010496:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010498:	2a00      	cmp	r2, #0
 801049a:	d1df      	bne.n	801045c <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801049c:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801049e:	8220      	strh	r0, [r4, #16]
 80104a0:	e7dc      	b.n	801045c <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80104a2:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80104a6:	4a01      	ldr	r2, [pc, #4]	; (80104ac <TRACE_TxCpltCallback+0xa0>)
 80104a8:	8293      	strh	r3, [r2, #20]
 80104aa:	e7e1      	b.n	8010470 <TRACE_TxCpltCallback+0x64>
 80104ac:	200013d0 	.word	0x200013d0
 80104b0:	20000fd0 	.word	0x20000fd0
 80104b4:	080110e0 	.word	0x080110e0

080104b8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80104b8:	2300      	movs	r3, #0
 80104ba:	4a02      	ldr	r2, [pc, #8]	; (80104c4 <UTIL_LPM_Init+0xc>)
 80104bc:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80104be:	4a02      	ldr	r2, [pc, #8]	; (80104c8 <UTIL_LPM_Init+0x10>)
 80104c0:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80104c2:	4770      	bx	lr
 80104c4:	200015ec 	.word	0x200015ec
 80104c8:	200015e8 	.word	0x200015e8

080104cc <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104cc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104d0:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80104d2:	b141      	cbz	r1, 80104e6 <UTIL_LPM_SetStopMode+0x1a>
 80104d4:	2901      	cmp	r1, #1
 80104d6:	d103      	bne.n	80104e0 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80104d8:	4906      	ldr	r1, [pc, #24]	; (80104f4 <UTIL_LPM_SetStopMode+0x28>)
 80104da:	680a      	ldr	r2, [r1, #0]
 80104dc:	4310      	orrs	r0, r2
 80104de:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104e0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80104e4:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80104e6:	4903      	ldr	r1, [pc, #12]	; (80104f4 <UTIL_LPM_SetStopMode+0x28>)
 80104e8:	680a      	ldr	r2, [r1, #0]
 80104ea:	ea22 0000 	bic.w	r0, r2, r0
 80104ee:	6008      	str	r0, [r1, #0]
      break;
 80104f0:	e7f6      	b.n	80104e0 <UTIL_LPM_SetStopMode+0x14>
 80104f2:	bf00      	nop
 80104f4:	200015ec 	.word	0x200015ec

080104f8 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104f8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104fc:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80104fe:	b141      	cbz	r1, 8010512 <UTIL_LPM_SetOffMode+0x1a>
 8010500:	2901      	cmp	r1, #1
 8010502:	d103      	bne.n	801050c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010504:	4906      	ldr	r1, [pc, #24]	; (8010520 <UTIL_LPM_SetOffMode+0x28>)
 8010506:	680a      	ldr	r2, [r1, #0]
 8010508:	4310      	orrs	r0, r2
 801050a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801050c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010510:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8010512:	4903      	ldr	r1, [pc, #12]	; (8010520 <UTIL_LPM_SetOffMode+0x28>)
 8010514:	680a      	ldr	r2, [r1, #0]
 8010516:	ea22 0000 	bic.w	r0, r2, r0
 801051a:	6008      	str	r0, [r1, #0]
      break;
 801051c:	e7f6      	b.n	801050c <UTIL_LPM_SetOffMode+0x14>
 801051e:	bf00      	nop
 8010520:	200015e8 	.word	0x200015e8

08010524 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8010524:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010526:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801052a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801052c:	4b0c      	ldr	r3, [pc, #48]	; (8010560 <UTIL_LPM_EnterLowPower+0x3c>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	b13b      	cbz	r3, 8010542 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8010532:	4d0c      	ldr	r5, [pc, #48]	; (8010564 <UTIL_LPM_EnterLowPower+0x40>)
 8010534:	682b      	ldr	r3, [r5, #0]
 8010536:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8010538:	686b      	ldr	r3, [r5, #4]
 801053a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801053c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8010540:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8010542:	4b09      	ldr	r3, [pc, #36]	; (8010568 <UTIL_LPM_EnterLowPower+0x44>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	b12b      	cbz	r3, 8010554 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8010548:	4d06      	ldr	r5, [pc, #24]	; (8010564 <UTIL_LPM_EnterLowPower+0x40>)
 801054a:	68ab      	ldr	r3, [r5, #8]
 801054c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801054e:	68eb      	ldr	r3, [r5, #12]
 8010550:	4798      	blx	r3
 8010552:	e7f3      	b.n	801053c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8010554:	4d03      	ldr	r5, [pc, #12]	; (8010564 <UTIL_LPM_EnterLowPower+0x40>)
 8010556:	692b      	ldr	r3, [r5, #16]
 8010558:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801055a:	696b      	ldr	r3, [r5, #20]
 801055c:	4798      	blx	r3
 801055e:	e7ed      	b.n	801053c <UTIL_LPM_EnterLowPower+0x18>
 8010560:	200015ec 	.word	0x200015ec
 8010564:	0801107c 	.word	0x0801107c
 8010568:	200015e8 	.word	0x200015e8

0801056c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 801056c:	e004      	b.n	8010578 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 801056e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010572:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8010576:	461a      	mov	r2, r3
 8010578:	1e53      	subs	r3, r2, #1
 801057a:	b29b      	uxth	r3, r3
 801057c:	2a00      	cmp	r2, #0
 801057e:	d1f6      	bne.n	801056e <UTIL_MEM_cpy_8+0x2>
    }
}
 8010580:	4770      	bx	lr

08010582 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8010582:	e002      	b.n	801058a <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8010584:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8010588:	461a      	mov	r2, r3
 801058a:	1e53      	subs	r3, r2, #1
 801058c:	b29b      	uxth	r3, r3
 801058e:	2a00      	cmp	r2, #0
 8010590:	d1f8      	bne.n	8010584 <UTIL_MEM_set_8+0x2>
  }
}
 8010592:	4770      	bx	lr

08010594 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010594:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010598:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 801059a:	4a06      	ldr	r2, [pc, #24]	; (80105b4 <UTIL_SEQ_SetTask+0x20>)
 801059c:	6813      	ldr	r3, [r2, #0]
 801059e:	4303      	orrs	r3, r0
 80105a0:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80105a2:	4a05      	ldr	r2, [pc, #20]	; (80105b8 <UTIL_SEQ_SetTask+0x24>)
 80105a4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80105a8:	4318      	orrs	r0, r3
 80105aa:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105ae:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80105b2:	4770      	bx	lr
 80105b4:	20001614 	.word	0x20001614
 80105b8:	2000160c 	.word	0x2000160c

080105bc <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80105bc:	4770      	bx	lr

080105be <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80105be:	4770      	bx	lr

080105c0 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80105c0:	0c03      	lsrs	r3, r0, #16
 80105c2:	041b      	lsls	r3, r3, #16
 80105c4:	b9b3      	cbnz	r3, 80105f4 <SEQ_BitPosition+0x34>
 80105c6:	0400      	lsls	r0, r0, #16
 80105c8:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80105ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80105ce:	d102      	bne.n	80105d6 <SEQ_BitPosition+0x16>
 80105d0:	3308      	adds	r3, #8
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80105d6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80105da:	d102      	bne.n	80105e2 <SEQ_BitPosition+0x22>
 80105dc:	3304      	adds	r3, #4
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80105e2:	0f00      	lsrs	r0, r0, #28
 80105e4:	4a04      	ldr	r2, [pc, #16]	; (80105f8 <SEQ_BitPosition+0x38>)
 80105e6:	5c10      	ldrb	r0, [r2, r0]
 80105e8:	4418      	add	r0, r3
 80105ea:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 80105ec:	f1c0 001f 	rsb	r0, r0, #31
}
 80105f0:	b2c0      	uxtb	r0, r0
 80105f2:	4770      	bx	lr
uint8_t n = 0U;
 80105f4:	2300      	movs	r3, #0
 80105f6:	e7e8      	b.n	80105ca <SEQ_BitPosition+0xa>
 80105f8:	08011e44 	.word	0x08011e44

080105fc <UTIL_SEQ_Run>:
{
 80105fc:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 80105fe:	4b43      	ldr	r3, [pc, #268]	; (801070c <UTIL_SEQ_Run+0x110>)
 8010600:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8010602:	4020      	ands	r0, r4
 8010604:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8010606:	4b42      	ldr	r3, [pc, #264]	; (8010710 <UTIL_SEQ_Run+0x114>)
 8010608:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 801060a:	4b42      	ldr	r3, [pc, #264]	; (8010714 <UTIL_SEQ_Run+0x118>)
 801060c:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 801060e:	4a42      	ldr	r2, [pc, #264]	; (8010718 <UTIL_SEQ_Run+0x11c>)
 8010610:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8010612:	4a42      	ldr	r2, [pc, #264]	; (801071c <UTIL_SEQ_Run+0x120>)
 8010614:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010616:	e030      	b.n	801067a <UTIL_SEQ_Run+0x7e>
      counter++;
 8010618:	3301      	adds	r3, #1
 801061a:	e035      	b.n	8010688 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801061c:	4d40      	ldr	r5, [pc, #256]	; (8010720 <UTIL_SEQ_Run+0x124>)
 801061e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010622:	6868      	ldr	r0, [r5, #4]
 8010624:	4010      	ands	r0, r2
 8010626:	f7ff ffcb 	bl	80105c0 <SEQ_BitPosition>
 801062a:	493e      	ldr	r1, [pc, #248]	; (8010724 <UTIL_SEQ_Run+0x128>)
 801062c:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801062e:	686a      	ldr	r2, [r5, #4]
 8010630:	2301      	movs	r3, #1
 8010632:	fa03 f000 	lsl.w	r0, r3, r0
 8010636:	ea22 0000 	bic.w	r0, r2, r0
 801063a:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801063c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010640:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010642:	680a      	ldr	r2, [r1, #0]
 8010644:	fa03 f202 	lsl.w	r2, r3, r2
 8010648:	ea6f 0c02 	mvn.w	ip, r2
 801064c:	4830      	ldr	r0, [pc, #192]	; (8010710 <UTIL_SEQ_Run+0x114>)
 801064e:	6801      	ldr	r1, [r0, #0]
 8010650:	ea21 0202 	bic.w	r2, r1, r2
 8010654:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010656:	2b00      	cmp	r3, #0
 8010658:	d12d      	bne.n	80106b6 <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801065a:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 801065e:	4b31      	ldr	r3, [pc, #196]	; (8010724 <UTIL_SEQ_Run+0x128>)
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	4b31      	ldr	r3, [pc, #196]	; (8010728 <UTIL_SEQ_Run+0x12c>)
 8010664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010668:	4798      	blx	r3
    local_taskset = TaskSet;
 801066a:	4b29      	ldr	r3, [pc, #164]	; (8010710 <UTIL_SEQ_Run+0x114>)
 801066c:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 801066e:	4b29      	ldr	r3, [pc, #164]	; (8010714 <UTIL_SEQ_Run+0x118>)
 8010670:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8010672:	4a29      	ldr	r2, [pc, #164]	; (8010718 <UTIL_SEQ_Run+0x11c>)
 8010674:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8010676:	4a29      	ldr	r2, [pc, #164]	; (801071c <UTIL_SEQ_Run+0x120>)
 8010678:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801067a:	4001      	ands	r1, r0
 801067c:	4d23      	ldr	r5, [pc, #140]	; (801070c <UTIL_SEQ_Run+0x110>)
 801067e:	682d      	ldr	r5, [r5, #0]
 8010680:	4229      	tst	r1, r5
 8010682:	d021      	beq.n	80106c8 <UTIL_SEQ_Run+0xcc>
 8010684:	4013      	ands	r3, r2
 8010686:	d11f      	bne.n	80106c8 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010688:	4a25      	ldr	r2, [pc, #148]	; (8010720 <UTIL_SEQ_Run+0x124>)
 801068a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801068e:	4002      	ands	r2, r0
 8010690:	422a      	tst	r2, r5
 8010692:	d0c1      	beq.n	8010618 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8010694:	4922      	ldr	r1, [pc, #136]	; (8010720 <UTIL_SEQ_Run+0x124>)
 8010696:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 801069a:	4002      	ands	r2, r0
 801069c:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801069e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80106a2:	6849      	ldr	r1, [r1, #4]
 80106a4:	4211      	tst	r1, r2
 80106a6:	d1b9      	bne.n	801061c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80106a8:	491d      	ldr	r1, [pc, #116]	; (8010720 <UTIL_SEQ_Run+0x124>)
 80106aa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80106ae:	f04f 30ff 	mov.w	r0, #4294967295
 80106b2:	6048      	str	r0, [r1, #4]
 80106b4:	e7b2      	b.n	801061c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80106b6:	3b01      	subs	r3, #1
 80106b8:	4919      	ldr	r1, [pc, #100]	; (8010720 <UTIL_SEQ_Run+0x124>)
 80106ba:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80106be:	ea0c 0202 	and.w	r2, ip, r2
 80106c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80106c6:	e7c6      	b.n	8010656 <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80106c8:	4b16      	ldr	r3, [pc, #88]	; (8010724 <UTIL_SEQ_Run+0x128>)
 80106ca:	f04f 32ff 	mov.w	r2, #4294967295
 80106ce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80106d0:	f7ff ff74 	bl	80105bc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106d4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80106d8:	b672      	cpsid	i
  local_taskset = TaskSet;
 80106da:	4b0d      	ldr	r3, [pc, #52]	; (8010710 <UTIL_SEQ_Run+0x114>)
 80106dc:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 80106de:	4a0d      	ldr	r2, [pc, #52]	; (8010714 <UTIL_SEQ_Run+0x118>)
 80106e0:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 80106e2:	4a0d      	ldr	r2, [pc, #52]	; (8010718 <UTIL_SEQ_Run+0x11c>)
 80106e4:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80106e6:	4013      	ands	r3, r2
 80106e8:	4a08      	ldr	r2, [pc, #32]	; (801070c <UTIL_SEQ_Run+0x110>)
 80106ea:	6812      	ldr	r2, [r2, #0]
 80106ec:	4213      	tst	r3, r2
 80106ee:	d103      	bne.n	80106f8 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 80106f0:	4b0a      	ldr	r3, [pc, #40]	; (801071c <UTIL_SEQ_Run+0x120>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	420b      	tst	r3, r1
 80106f6:	d006      	beq.n	8010706 <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106f8:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80106fc:	f7ff ff5f 	bl	80105be <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8010700:	4b02      	ldr	r3, [pc, #8]	; (801070c <UTIL_SEQ_Run+0x110>)
 8010702:	601c      	str	r4, [r3, #0]
}
 8010704:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8010706:	f7f1 f843 	bl	8001790 <UTIL_SEQ_Idle>
 801070a:	e7f5      	b.n	80106f8 <UTIL_SEQ_Run+0xfc>
 801070c:	20000110 	.word	0x20000110
 8010710:	20001614 	.word	0x20001614
 8010714:	200015f4 	.word	0x200015f4
 8010718:	20000114 	.word	0x20000114
 801071c:	200015f8 	.word	0x200015f8
 8010720:	2000160c 	.word	0x2000160c
 8010724:	200015f0 	.word	0x200015f0
 8010728:	200015fc 	.word	0x200015fc

0801072c <UTIL_SEQ_RegTask>:
{
 801072c:	b538      	push	{r3, r4, r5, lr}
 801072e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010730:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010734:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010736:	f7ff ff43 	bl	80105c0 <SEQ_BitPosition>
 801073a:	4b03      	ldr	r3, [pc, #12]	; (8010748 <UTIL_SEQ_RegTask+0x1c>)
 801073c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010740:	f385 8810 	msr	PRIMASK, r5
}
 8010744:	bd38      	pop	{r3, r4, r5, pc}
 8010746:	bf00      	nop
 8010748:	200015fc 	.word	0x200015fc

0801074c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801074c:	b082      	sub	sp, #8
 801074e:	b082      	sub	sp, #8
 8010750:	f10d 0c08 	add.w	ip, sp, #8
 8010754:	e90c 0006 	stmdb	ip, {r1, r2}
 8010758:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801075a:	2200      	movs	r2, #0
 801075c:	6002      	str	r2, [r0, #0]
 801075e:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8010760:	440b      	add	r3, r1
 8010762:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8010764:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010768:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801076c:	440a      	add	r2, r1
 801076e:	b291      	uxth	r1, r2
 8010770:	b212      	sxth	r2, r2
 8010772:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8010774:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010778:	db04      	blt.n	8010784 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 801077a:	3301      	adds	r3, #1
 801077c:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 801077e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8010782:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8010784:	b002      	add	sp, #8
 8010786:	b002      	add	sp, #8
 8010788:	4770      	bx	lr

0801078a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801078a:	b082      	sub	sp, #8
 801078c:	b082      	sub	sp, #8
 801078e:	f10d 0c08 	add.w	ip, sp, #8
 8010792:	e90c 0006 	stmdb	ip, {r1, r2}
 8010796:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8010798:	2200      	movs	r2, #0
 801079a:	6002      	str	r2, [r0, #0]
 801079c:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801079e:	1acb      	subs	r3, r1, r3
 80107a0:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80107a2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80107a6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80107aa:	1a52      	subs	r2, r2, r1
 80107ac:	b291      	uxth	r1, r2
 80107ae:	b212      	sxth	r2, r2
 80107b0:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80107b2:	2a00      	cmp	r2, #0
 80107b4:	db02      	blt.n	80107bc <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80107b6:	b002      	add	sp, #8
 80107b8:	b002      	add	sp, #8
 80107ba:	4770      	bx	lr
    c.Seconds--;
 80107bc:	3b01      	subs	r3, #1
 80107be:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80107c0:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80107c4:	8081      	strh	r1, [r0, #4]
  return c;
 80107c6:	e7f6      	b.n	80107b6 <SysTimeSub+0x2c>

080107c8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80107c8:	b530      	push	{r4, r5, lr}
 80107ca:	b089      	sub	sp, #36	; 0x24
 80107cc:	ac02      	add	r4, sp, #8
 80107ce:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80107d2:	2300      	movs	r3, #0
 80107d4:	9304      	str	r3, [sp, #16]
 80107d6:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80107da:	4d0b      	ldr	r5, [pc, #44]	; (8010808 <SysTimeSet+0x40>)
 80107dc:	692b      	ldr	r3, [r5, #16]
 80107de:	a805      	add	r0, sp, #20
 80107e0:	4798      	blx	r3
 80107e2:	4603      	mov	r3, r0
 80107e4:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80107e6:	9a05      	ldr	r2, [sp, #20]
 80107e8:	9200      	str	r2, [sp, #0]
 80107ea:	e894 0006 	ldmia.w	r4, {r1, r2}
 80107ee:	a806      	add	r0, sp, #24
 80107f0:	f7ff ffcb 	bl	801078a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80107f4:	682b      	ldr	r3, [r5, #0]
 80107f6:	9806      	ldr	r0, [sp, #24]
 80107f8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80107fa:	68ab      	ldr	r3, [r5, #8]
 80107fc:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010800:	4798      	blx	r3
}
 8010802:	b009      	add	sp, #36	; 0x24
 8010804:	bd30      	pop	{r4, r5, pc}
 8010806:	bf00      	nop
 8010808:	080110a0 	.word	0x080110a0

0801080c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801080c:	b530      	push	{r4, r5, lr}
 801080e:	b087      	sub	sp, #28
 8010810:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010812:	2300      	movs	r3, #0
 8010814:	9304      	str	r3, [sp, #16]
 8010816:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801081a:	6003      	str	r3, [r0, #0]
 801081c:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801081e:	4d0b      	ldr	r5, [pc, #44]	; (801084c <SysTimeGet+0x40>)
 8010820:	692b      	ldr	r3, [r5, #16]
 8010822:	a805      	add	r0, sp, #20
 8010824:	4798      	blx	r3
 8010826:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010828:	68eb      	ldr	r3, [r5, #12]
 801082a:	4798      	blx	r3
 801082c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010830:	686b      	ldr	r3, [r5, #4]
 8010832:	4798      	blx	r3
 8010834:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8010836:	9b05      	ldr	r3, [sp, #20]
 8010838:	9300      	str	r3, [sp, #0]
 801083a:	9b04      	ldr	r3, [sp, #16]
 801083c:	aa02      	add	r2, sp, #8
 801083e:	ca06      	ldmia	r2, {r1, r2}
 8010840:	4620      	mov	r0, r4
 8010842:	f7ff ff83 	bl	801074c <SysTimeAdd>

  return sysTime;
}
 8010846:	4620      	mov	r0, r4
 8010848:	b007      	add	sp, #28
 801084a:	bd30      	pop	{r4, r5, pc}
 801084c:	080110a0 	.word	0x080110a0

08010850 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8010850:	b530      	push	{r4, r5, lr}
 8010852:	b083      	sub	sp, #12
 8010854:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010856:	2300      	movs	r3, #0
 8010858:	9300      	str	r3, [sp, #0]
 801085a:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801085e:	4b06      	ldr	r3, [pc, #24]	; (8010878 <SysTimeGetMcuTime+0x28>)
 8010860:	691b      	ldr	r3, [r3, #16]
 8010862:	466d      	mov	r5, sp
 8010864:	a801      	add	r0, sp, #4
 8010866:	4798      	blx	r3
 8010868:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801086a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801086e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8010872:	4620      	mov	r0, r4
 8010874:	b003      	add	sp, #12
 8010876:	bd30      	pop	{r4, r5, pc}
 8010878:	080110a0 	.word	0x080110a0

0801087c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801087c:	b530      	push	{r4, r5, lr}
 801087e:	b089      	sub	sp, #36	; 0x24
 8010880:	ac02      	add	r4, sp, #8
 8010882:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010886:	4d0c      	ldr	r5, [pc, #48]	; (80108b8 <SysTimeToMs+0x3c>)
 8010888:	68eb      	ldr	r3, [r5, #12]
 801088a:	4798      	blx	r3
 801088c:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010890:	686b      	ldr	r3, [r5, #4]
 8010892:	4798      	blx	r3
 8010894:	4603      	mov	r3, r0
 8010896:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8010898:	9a07      	ldr	r2, [sp, #28]
 801089a:	9200      	str	r2, [sp, #0]
 801089c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80108a0:	a804      	add	r0, sp, #16
 80108a2:	f7ff ff72 	bl	801078a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80108a6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80108aa:	9a04      	ldr	r2, [sp, #16]
 80108ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80108b0:	fb00 3002 	mla	r0, r0, r2, r3
 80108b4:	b009      	add	sp, #36	; 0x24
 80108b6:	bd30      	pop	{r4, r5, pc}
 80108b8:	080110a0 	.word	0x080110a0

080108bc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80108bc:	b530      	push	{r4, r5, lr}
 80108be:	b087      	sub	sp, #28
 80108c0:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 80108c2:	4b12      	ldr	r3, [pc, #72]	; (801090c <SysTimeFromMs+0x50>)
 80108c4:	fba3 2301 	umull	r2, r3, r3, r1
 80108c8:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80108ca:	9304      	str	r3, [sp, #16]
 80108cc:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80108d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80108d4:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 80108d8:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 80108dc:	2300      	movs	r3, #0
 80108de:	9302      	str	r3, [sp, #8]
 80108e0:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80108e2:	4d0b      	ldr	r5, [pc, #44]	; (8010910 <SysTimeFromMs+0x54>)
 80108e4:	68eb      	ldr	r3, [r5, #12]
 80108e6:	4798      	blx	r3
 80108e8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80108ec:	686b      	ldr	r3, [r5, #4]
 80108ee:	4798      	blx	r3
 80108f0:	4603      	mov	r3, r0
 80108f2:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 80108f4:	9a03      	ldr	r2, [sp, #12]
 80108f6:	9200      	str	r2, [sp, #0]
 80108f8:	aa06      	add	r2, sp, #24
 80108fa:	e912 0006 	ldmdb	r2, {r1, r2}
 80108fe:	4620      	mov	r0, r4
 8010900:	f7ff ff24 	bl	801074c <SysTimeAdd>
}
 8010904:	4620      	mov	r0, r4
 8010906:	b007      	add	sp, #28
 8010908:	bd30      	pop	{r4, r5, pc}
 801090a:	bf00      	nop
 801090c:	10624dd3 	.word	0x10624dd3
 8010910:	080110a0 	.word	0x080110a0

08010914 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8010914:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8010916:	4b03      	ldr	r3, [pc, #12]	; (8010924 <UTIL_TIMER_Init+0x10>)
 8010918:	2200      	movs	r2, #0
 801091a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801091c:	4b02      	ldr	r3, [pc, #8]	; (8010928 <UTIL_TIMER_Init+0x14>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4798      	blx	r3
}
 8010922:	bd08      	pop	{r3, pc}
 8010924:	20001618 	.word	0x20001618
 8010928:	080110b4 	.word	0x080110b4

0801092c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 801092c:	b1a8      	cbz	r0, 801095a <UTIL_TIMER_Create+0x2e>
{
 801092e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010930:	4617      	mov	r7, r2
 8010932:	461e      	mov	r6, r3
 8010934:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8010936:	b193      	cbz	r3, 801095e <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8010938:	2500      	movs	r5, #0
 801093a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801093c:	4b09      	ldr	r3, [pc, #36]	; (8010964 <UTIL_TIMER_Create+0x38>)
 801093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010940:	4608      	mov	r0, r1
 8010942:	4798      	blx	r3
 8010944:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8010946:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8010948:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801094a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 801094c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 801094e:	9b06      	ldr	r3, [sp, #24]
 8010950:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8010952:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8010954:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8010956:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8010958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 801095a:	2001      	movs	r0, #1
}
 801095c:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 801095e:	2001      	movs	r0, #1
 8010960:	e7fa      	b.n	8010958 <UTIL_TIMER_Create+0x2c>
 8010962:	bf00      	nop
 8010964:	080110b4 	.word	0x080110b4

08010968 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8010968:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801096a:	4c03      	ldr	r4, [pc, #12]	; (8010978 <UTIL_TIMER_GetCurrentTime+0x10>)
 801096c:	69e3      	ldr	r3, [r4, #28]
 801096e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8010970:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010972:	4798      	blx	r3
}
 8010974:	bd10      	pop	{r4, pc}
 8010976:	bf00      	nop
 8010978:	080110b4 	.word	0x080110b4

0801097c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801097c:	b570      	push	{r4, r5, r6, lr}
 801097e:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010980:	4d05      	ldr	r5, [pc, #20]	; (8010998 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8010982:	69eb      	ldr	r3, [r5, #28]
 8010984:	4798      	blx	r3
 8010986:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8010988:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801098a:	4630      	mov	r0, r6
 801098c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801098e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010990:	1a20      	subs	r0, r4, r0
 8010992:	4798      	blx	r3
}
 8010994:	bd70      	pop	{r4, r5, r6, pc}
 8010996:	bf00      	nop
 8010998:	080110b4 	.word	0x080110b4

0801099c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801099c:	4b05      	ldr	r3, [pc, #20]	; (80109b4 <TimerExists+0x18>)
 801099e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80109a0:	e000      	b.n	80109a4 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80109a2:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80109a4:	b11b      	cbz	r3, 80109ae <TimerExists+0x12>
    if( cur == TimerObject )
 80109a6:	4283      	cmp	r3, r0
 80109a8:	d1fb      	bne.n	80109a2 <TimerExists+0x6>
      return true;
 80109aa:	2001      	movs	r0, #1
  }
  return false;
}
 80109ac:	4770      	bx	lr
  return false;
 80109ae:	2000      	movs	r0, #0
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	20001618 	.word	0x20001618

080109b8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80109b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ba:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80109bc:	4e09      	ldr	r6, [pc, #36]	; (80109e4 <TimerSetTimeout+0x2c>)
 80109be:	6a33      	ldr	r3, [r6, #32]
 80109c0:	4798      	blx	r3
 80109c2:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80109c4:	2301      	movs	r3, #1
 80109c6:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80109c8:	6827      	ldr	r7, [r4, #0]
 80109ca:	69b6      	ldr	r6, [r6, #24]
 80109cc:	47b0      	blx	r6
 80109ce:	4428      	add	r0, r5
 80109d0:	4287      	cmp	r7, r0
 80109d2:	d202      	bcs.n	80109da <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80109d4:	47b0      	blx	r6
 80109d6:	4405      	add	r5, r0
 80109d8:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80109da:	4b02      	ldr	r3, [pc, #8]	; (80109e4 <TimerSetTimeout+0x2c>)
 80109dc:	689b      	ldr	r3, [r3, #8]
 80109de:	6820      	ldr	r0, [r4, #0]
 80109e0:	4798      	blx	r3
}
 80109e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e4:	080110b4 	.word	0x080110b4

080109e8 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80109e8:	b368      	cbz	r0, 8010a46 <UTIL_TIMER_Stop+0x5e>
{
 80109ea:	b510      	push	{r4, lr}
 80109ec:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109ee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80109f2:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80109f4:	4b15      	ldr	r3, [pc, #84]	; (8010a4c <UTIL_TIMER_Stop+0x64>)
 80109f6:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80109f8:	2301      	movs	r3, #1
 80109fa:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 80109fc:	b1e1      	cbz	r1, 8010a38 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 80109fe:	2300      	movs	r3, #0
 8010a00:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010a02:	4288      	cmp	r0, r1
 8010a04:	d006      	beq.n	8010a14 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8010a06:	460b      	mov	r3, r1
        while( cur != NULL )
 8010a08:	b1b3      	cbz	r3, 8010a38 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d011      	beq.n	8010a32 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8010a0e:	4619      	mov	r1, r3
            cur = cur->Next;
 8010a10:	695b      	ldr	r3, [r3, #20]
 8010a12:	e7f9      	b.n	8010a08 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8010a14:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8010a16:	6948      	ldr	r0, [r1, #20]
 8010a18:	b120      	cbz	r0, 8010a24 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8010a1a:	4b0c      	ldr	r3, [pc, #48]	; (8010a4c <UTIL_TIMER_Stop+0x64>)
 8010a1c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8010a1e:	f7ff ffcb 	bl	80109b8 <TimerSetTimeout>
 8010a22:	e009      	b.n	8010a38 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8010a24:	4b0a      	ldr	r3, [pc, #40]	; (8010a50 <UTIL_TIMER_Stop+0x68>)
 8010a26:	68db      	ldr	r3, [r3, #12]
 8010a28:	4798      	blx	r3
            TimerListHead = NULL;
 8010a2a:	4b08      	ldr	r3, [pc, #32]	; (8010a4c <UTIL_TIMER_Stop+0x64>)
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	601a      	str	r2, [r3, #0]
 8010a30:	e002      	b.n	8010a38 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8010a32:	695b      	ldr	r3, [r3, #20]
 8010a34:	b123      	cbz	r3, 8010a40 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8010a36:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a38:	f384 8810 	msr	PRIMASK, r4
}
 8010a3c:	2000      	movs	r0, #0
}
 8010a3e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8010a40:	2300      	movs	r3, #0
 8010a42:	614b      	str	r3, [r1, #20]
 8010a44:	e7f8      	b.n	8010a38 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8010a46:	2001      	movs	r0, #1
}
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	20001618 	.word	0x20001618
 8010a50:	080110b4 	.word	0x080110b4

08010a54 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010a54:	4b09      	ldr	r3, [pc, #36]	; (8010a7c <TimerInsertTimer+0x28>)
 8010a56:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8010a58:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8010a5a:	e001      	b.n	8010a60 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8010a5c:	461a      	mov	r2, r3
        next = next->Next;
 8010a5e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8010a60:	6951      	ldr	r1, [r2, #20]
 8010a62:	b139      	cbz	r1, 8010a74 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8010a64:	6819      	ldr	r1, [r3, #0]
 8010a66:	f8d0 c000 	ldr.w	ip, [r0]
 8010a6a:	458c      	cmp	ip, r1
 8010a6c:	d8f6      	bhi.n	8010a5c <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8010a6e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8010a70:	6143      	str	r3, [r0, #20]
        return;
 8010a72:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8010a74:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8010a76:	2300      	movs	r3, #0
 8010a78:	6143      	str	r3, [r0, #20]
}
 8010a7a:	4770      	bx	lr
 8010a7c:	20001618 	.word	0x20001618

08010a80 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8010a80:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010a82:	4b05      	ldr	r3, [pc, #20]	; (8010a98 <TimerInsertNewHeadTimer+0x18>)
 8010a84:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8010a86:	b10b      	cbz	r3, 8010a8c <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8010a88:	2200      	movs	r2, #0
 8010a8a:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8010a8c:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8010a8e:	4b02      	ldr	r3, [pc, #8]	; (8010a98 <TimerInsertNewHeadTimer+0x18>)
 8010a90:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8010a92:	f7ff ff91 	bl	80109b8 <TimerSetTimeout>
}
 8010a96:	bd08      	pop	{r3, pc}
 8010a98:	20001618 	.word	0x20001618

08010a9c <UTIL_TIMER_Start>:
{
 8010a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d036      	beq.n	8010b10 <UTIL_TIMER_Start+0x74>
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	f7ff ff7a 	bl	801099c <TimerExists>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	d134      	bne.n	8010b16 <UTIL_TIMER_Start+0x7a>
 8010aac:	7a65      	ldrb	r5, [r4, #9]
 8010aae:	2d00      	cmp	r5, #0
 8010ab0:	d133      	bne.n	8010b1a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ab2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010ab6:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8010ab8:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010aba:	4b19      	ldr	r3, [pc, #100]	; (8010b20 <UTIL_TIMER_Start+0x84>)
 8010abc:	6a1b      	ldr	r3, [r3, #32]
 8010abe:	4798      	blx	r3
    if( ticks < minValue )
 8010ac0:	4287      	cmp	r7, r0
 8010ac2:	d300      	bcc.n	8010ac6 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8010ac4:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8010ac6:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8010acc:	2201      	movs	r2, #1
 8010ace:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010ad0:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8010ad2:	4b14      	ldr	r3, [pc, #80]	; (8010b24 <UTIL_TIMER_Start+0x88>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	b183      	cbz	r3, 8010afa <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8010ad8:	4b11      	ldr	r3, [pc, #68]	; (8010b20 <UTIL_TIMER_Start+0x84>)
 8010ada:	699b      	ldr	r3, [r3, #24]
 8010adc:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8010ade:	6823      	ldr	r3, [r4, #0]
 8010ae0:	4418      	add	r0, r3
 8010ae2:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010ae4:	4b0f      	ldr	r3, [pc, #60]	; (8010b24 <UTIL_TIMER_Start+0x88>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4298      	cmp	r0, r3
 8010aec:	d20c      	bcs.n	8010b08 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8010aee:	4620      	mov	r0, r4
 8010af0:	f7ff ffc6 	bl	8010a80 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010af4:	f386 8810 	msr	PRIMASK, r6
}
 8010af8:	e00b      	b.n	8010b12 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8010afa:	4b09      	ldr	r3, [pc, #36]	; (8010b20 <UTIL_TIMER_Start+0x84>)
 8010afc:	691b      	ldr	r3, [r3, #16]
 8010afe:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8010b00:	4620      	mov	r0, r4
 8010b02:	f7ff ffbd 	bl	8010a80 <TimerInsertNewHeadTimer>
 8010b06:	e7f5      	b.n	8010af4 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f7ff ffa3 	bl	8010a54 <TimerInsertTimer>
 8010b0e:	e7f1      	b.n	8010af4 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010b10:	2501      	movs	r5, #1
}
 8010b12:	4628      	mov	r0, r5
 8010b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010b16:	2501      	movs	r5, #1
 8010b18:	e7fb      	b.n	8010b12 <UTIL_TIMER_Start+0x76>
 8010b1a:	2501      	movs	r5, #1
 8010b1c:	e7f9      	b.n	8010b12 <UTIL_TIMER_Start+0x76>
 8010b1e:	bf00      	nop
 8010b20:	080110b4 	.word	0x080110b4
 8010b24:	20001618 	.word	0x20001618

08010b28 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8010b28:	b198      	cbz	r0, 8010b52 <UTIL_TIMER_SetPeriod+0x2a>
{
 8010b2a:	b510      	push	{r4, lr}
 8010b2c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8010b2e:	4b0a      	ldr	r3, [pc, #40]	; (8010b58 <UTIL_TIMER_SetPeriod+0x30>)
 8010b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b32:	4608      	mov	r0, r1
 8010b34:	4798      	blx	r3
 8010b36:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f7ff ff2f 	bl	801099c <TimerExists>
 8010b3e:	b908      	cbnz	r0, 8010b44 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010b40:	2000      	movs	r0, #0
}
 8010b42:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8010b44:	4620      	mov	r0, r4
 8010b46:	f7ff ff4f 	bl	80109e8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f7ff ffa6 	bl	8010a9c <UTIL_TIMER_Start>
 8010b50:	e7f7      	b.n	8010b42 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8010b52:	2001      	movs	r0, #1
}
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	080110b4 	.word	0x080110b4

08010b5c <UTIL_TIMER_IRQ_Handler>:
{
 8010b5c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b5e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010b62:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010b64:	4c1e      	ldr	r4, [pc, #120]	; (8010be0 <UTIL_TIMER_IRQ_Handler+0x84>)
 8010b66:	6963      	ldr	r3, [r4, #20]
 8010b68:	4798      	blx	r3
 8010b6a:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010b6c:	6923      	ldr	r3, [r4, #16]
 8010b6e:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8010b70:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8010b72:	4b1c      	ldr	r3, [pc, #112]	; (8010be4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	b923      	cbnz	r3, 8010b82 <UTIL_TIMER_IRQ_Handler+0x26>
 8010b78:	e018      	b.n	8010bac <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8010b7e:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8010b80:	b1a3      	cbz	r3, 8010bac <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	42a2      	cmp	r2, r4
 8010b86:	d9f8      	bls.n	8010b7a <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8010b88:	1a31      	subs	r1, r6, r0
 8010b8a:	440a      	add	r2, r1
 8010b8c:	601a      	str	r2, [r3, #0]
 8010b8e:	e7f6      	b.n	8010b7e <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8010b90:	4b14      	ldr	r3, [pc, #80]	; (8010be4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010b92:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8010b94:	6962      	ldr	r2, [r4, #20]
 8010b96:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8010b9c:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8010b9e:	68e3      	ldr	r3, [r4, #12]
 8010ba0:	6920      	ldr	r0, [r4, #16]
 8010ba2:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8010ba4:	8963      	ldrh	r3, [r4, #10]
 8010ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010baa:	d012      	beq.n	8010bd2 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8010bac:	4b0d      	ldr	r3, [pc, #52]	; (8010be4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	b13b      	cbz	r3, 8010bc2 <UTIL_TIMER_IRQ_Handler+0x66>
 8010bb2:	681c      	ldr	r4, [r3, #0]
 8010bb4:	2c00      	cmp	r4, #0
 8010bb6:	d0eb      	beq.n	8010b90 <UTIL_TIMER_IRQ_Handler+0x34>
 8010bb8:	4b09      	ldr	r3, [pc, #36]	; (8010be0 <UTIL_TIMER_IRQ_Handler+0x84>)
 8010bba:	699b      	ldr	r3, [r3, #24]
 8010bbc:	4798      	blx	r3
 8010bbe:	4284      	cmp	r4, r0
 8010bc0:	d3e6      	bcc.n	8010b90 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8010bc2:	4b08      	ldr	r3, [pc, #32]	; (8010be4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010bc4:	6818      	ldr	r0, [r3, #0]
 8010bc6:	b108      	cbz	r0, 8010bcc <UTIL_TIMER_IRQ_Handler+0x70>
 8010bc8:	7a03      	ldrb	r3, [r0, #8]
 8010bca:	b133      	cbz	r3, 8010bda <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bcc:	f385 8810 	msr	PRIMASK, r5
}
 8010bd0:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	f7ff ff62 	bl	8010a9c <UTIL_TIMER_Start>
 8010bd8:	e7e8      	b.n	8010bac <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8010bda:	f7ff feed 	bl	80109b8 <TimerSetTimeout>
 8010bde:	e7f5      	b.n	8010bcc <UTIL_TIMER_IRQ_Handler+0x70>
 8010be0:	080110b4 	.word	0x080110b4
 8010be4:	20001618 	.word	0x20001618

08010be8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8010be8:	4601      	mov	r1, r0
  int i = 0;
 8010bea:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8010bec:	e007      	b.n	8010bfe <ee_skip_atoi+0x16>
 8010bee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010bf2:	1c53      	adds	r3, r2, #1
 8010bf4:	600b      	str	r3, [r1, #0]
 8010bf6:	7813      	ldrb	r3, [r2, #0]
 8010bf8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010bfc:	3830      	subs	r0, #48	; 0x30
 8010bfe:	680a      	ldr	r2, [r1, #0]
 8010c00:	7813      	ldrb	r3, [r2, #0]
 8010c02:	3b30      	subs	r3, #48	; 0x30
 8010c04:	b2db      	uxtb	r3, r3
 8010c06:	2b09      	cmp	r3, #9
 8010c08:	d9f1      	bls.n	8010bee <ee_skip_atoi+0x6>
  return i;
}
 8010c0a:	4770      	bx	lr

08010c0c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8010c0c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8010c10:	b093      	sub	sp, #76	; 0x4c
 8010c12:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010c14:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8010c16:	f016 0f40 	tst.w	r6, #64	; 0x40
 8010c1a:	d110      	bne.n	8010c3e <ee_number+0x32>
  char *dig = lower_digits;
 8010c1c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8010d18 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8010c20:	1e9f      	subs	r7, r3, #2
 8010c22:	2f22      	cmp	r7, #34	; 0x22
 8010c24:	d875      	bhi.n	8010d12 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8010c26:	f016 0401 	ands.w	r4, r6, #1
 8010c2a:	d00b      	beq.n	8010c44 <ee_number+0x38>
 8010c2c:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8010c30:	f016 0f02 	tst.w	r6, #2
 8010c34:	d00f      	beq.n	8010c56 <ee_number+0x4a>
  {
    if (num < 0)
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	db07      	blt.n	8010c4a <ee_number+0x3e>
  sign = 0;
 8010c3a:	2700      	movs	r7, #0
 8010c3c:	e00c      	b.n	8010c58 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8010c3e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8010d1c <ee_number+0x110>
 8010c42:	e7ed      	b.n	8010c20 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8010c44:	f04f 0e20 	mov.w	lr, #32
 8010c48:	e7f2      	b.n	8010c30 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8010c4a:	4252      	negs	r2, r2
      size--;
 8010c4c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010c4e:	3e01      	subs	r6, #1
 8010c50:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8010c52:	272d      	movs	r7, #45	; 0x2d
 8010c54:	e000      	b.n	8010c58 <ee_number+0x4c>
  sign = 0;
 8010c56:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8010c58:	bb5a      	cbnz	r2, 8010cb2 <ee_number+0xa6>
    tmp[i++] = '0';
 8010c5a:	2330      	movs	r3, #48	; 0x30
 8010c5c:	f88d 3004 	strb.w	r3, [sp, #4]
 8010c60:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8010c64:	45ac      	cmp	ip, r5
 8010c66:	dd00      	ble.n	8010c6a <ee_number+0x5e>
 8010c68:	4665      	mov	r5, ip
  size -= precision;
 8010c6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010c6c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010c6e:	b31c      	cbz	r4, 8010cb8 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8010c70:	b11f      	cbz	r7, 8010c7a <ee_number+0x6e>
 8010c72:	f800 7b01 	strb.w	r7, [r0], #1
 8010c76:	3901      	subs	r1, #1
 8010c78:	d007      	beq.n	8010c8a <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c80:	dd24      	ble.n	8010ccc <ee_number+0xc0>
 8010c82:	f800 eb01 	strb.w	lr, [r0], #1
 8010c86:	3901      	subs	r1, #1
 8010c88:	d1f7      	bne.n	8010c7a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8010c8a:	b013      	add	sp, #76	; 0x4c
 8010c8c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010c90:	fbb2 f6f3 	udiv	r6, r2, r3
 8010c94:	fb03 2216 	mls	r2, r3, r6, r2
 8010c98:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8010c9c:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8010ca0:	446a      	add	r2, sp
 8010ca2:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8010ca6:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010ca8:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8010cac:	2a00      	cmp	r2, #0
 8010cae:	d1ef      	bne.n	8010c90 <ee_number+0x84>
 8010cb0:	e7d8      	b.n	8010c64 <ee_number+0x58>
  i = 0;
 8010cb2:	f04f 0c00 	mov.w	ip, #0
 8010cb6:	e7f9      	b.n	8010cac <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	f103 33ff 	add.w	r3, r3, #4294967295
 8010cbe:	ddd7      	ble.n	8010c70 <ee_number+0x64>
 8010cc0:	2220      	movs	r2, #32
 8010cc2:	f800 2b01 	strb.w	r2, [r0], #1
 8010cc6:	3901      	subs	r1, #1
 8010cc8:	d1f6      	bne.n	8010cb8 <ee_number+0xac>
 8010cca:	e7de      	b.n	8010c8a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8010ccc:	4565      	cmp	r5, ip
 8010cce:	f105 35ff 	add.w	r5, r5, #4294967295
 8010cd2:	dd05      	ble.n	8010ce0 <ee_number+0xd4>
 8010cd4:	2230      	movs	r2, #48	; 0x30
 8010cd6:	f800 2b01 	strb.w	r2, [r0], #1
 8010cda:	3901      	subs	r1, #1
 8010cdc:	d1f6      	bne.n	8010ccc <ee_number+0xc0>
 8010cde:	e7d4      	b.n	8010c8a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8010ce0:	4662      	mov	r2, ip
 8010ce2:	2a00      	cmp	r2, #0
 8010ce4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010ce8:	dd09      	ble.n	8010cfe <ee_number+0xf2>
 8010cea:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8010cee:	446a      	add	r2, sp
 8010cf0:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8010cf4:	f800 2b01 	strb.w	r2, [r0], #1
 8010cf8:	3901      	subs	r1, #1
 8010cfa:	d1f1      	bne.n	8010ce0 <ee_number+0xd4>
 8010cfc:	e7c5      	b.n	8010c8a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d04:	ddc1      	ble.n	8010c8a <ee_number+0x7e>
 8010d06:	2220      	movs	r2, #32
 8010d08:	f800 2b01 	strb.w	r2, [r0], #1
 8010d0c:	3901      	subs	r1, #1
 8010d0e:	d1f6      	bne.n	8010cfe <ee_number+0xf2>
 8010d10:	e7bb      	b.n	8010c8a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8010d12:	2000      	movs	r0, #0
 8010d14:	e7b9      	b.n	8010c8a <ee_number+0x7e>
 8010d16:	bf00      	nop
 8010d18:	08011e7c 	.word	0x08011e7c
 8010d1c:	08011e54 	.word	0x08011e54

08010d20 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8010d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d24:	b087      	sub	sp, #28
 8010d26:	9205      	str	r2, [sp, #20]
 8010d28:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8010d2a:	1e0f      	subs	r7, r1, #0
 8010d2c:	f340 80b8 	ble.w	8010ea0 <tiny_vsnprintf_like+0x180>
 8010d30:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010d32:	4604      	mov	r4, r0
 8010d34:	e004      	b.n	8010d40 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8010d36:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010d3a:	9b05      	ldr	r3, [sp, #20]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	9305      	str	r3, [sp, #20]
 8010d40:	9905      	ldr	r1, [sp, #20]
 8010d42:	780a      	ldrb	r2, [r1, #0]
 8010d44:	b922      	cbnz	r2, 8010d50 <tiny_vsnprintf_like+0x30>
 8010d46:	1ba3      	subs	r3, r4, r6
 8010d48:	1e78      	subs	r0, r7, #1
 8010d4a:	4283      	cmp	r3, r0
 8010d4c:	f2c0 80a2 	blt.w	8010e94 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8010d50:	1ba3      	subs	r3, r4, r6
 8010d52:	f107 38ff 	add.w	r8, r7, #4294967295
 8010d56:	4543      	cmp	r3, r8
 8010d58:	f280 809c 	bge.w	8010e94 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8010d5c:	2a25      	cmp	r2, #37	; 0x25
 8010d5e:	d1ea      	bne.n	8010d36 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8010d60:	1c4b      	adds	r3, r1, #1
 8010d62:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8010d64:	784b      	ldrb	r3, [r1, #1]
 8010d66:	2b30      	cmp	r3, #48	; 0x30
 8010d68:	d020      	beq.n	8010dac <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8010d6a:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8010d6e:	3b30      	subs	r3, #48	; 0x30
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	2b09      	cmp	r3, #9
 8010d74:	d91d      	bls.n	8010db2 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8010d76:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8010d7a:	9b05      	ldr	r3, [sp, #20]
 8010d7c:	781a      	ldrb	r2, [r3, #0]
 8010d7e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8010d82:	2b20      	cmp	r3, #32
 8010d84:	d867      	bhi.n	8010e56 <tiny_vsnprintf_like+0x136>
 8010d86:	e8df f003 	tbb	[pc, r3]
 8010d8a:	664a      	.short	0x664a
 8010d8c:	66666666 	.word	0x66666666
 8010d90:	66666666 	.word	0x66666666
 8010d94:	66621e66 	.word	0x66621e66
 8010d98:	62666666 	.word	0x62666666
 8010d9c:	66666666 	.word	0x66666666
 8010da0:	66666666 	.word	0x66666666
 8010da4:	19662866 	.word	0x19662866
 8010da8:	6666      	.short	0x6666
 8010daa:	7c          	.byte	0x7c
 8010dab:	00          	.byte	0x00
      flags |= ZEROPAD;
 8010dac:	f04f 0901 	mov.w	r9, #1
 8010db0:	e7dd      	b.n	8010d6e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8010db2:	a805      	add	r0, sp, #20
 8010db4:	f7ff ff18 	bl	8010be8 <ee_skip_atoi>
 8010db8:	4605      	mov	r5, r0
 8010dba:	e7de      	b.n	8010d7a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8010dbc:	230a      	movs	r3, #10
 8010dbe:	e031      	b.n	8010e24 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8010dc0:	2320      	movs	r3, #32
 8010dc2:	f804 3b01 	strb.w	r3, [r4], #1
 8010dc6:	3d01      	subs	r5, #1
 8010dc8:	2d00      	cmp	r5, #0
 8010dca:	dcf9      	bgt.n	8010dc0 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8010dcc:	9b04      	ldr	r3, [sp, #16]
 8010dce:	1d1a      	adds	r2, r3, #4
 8010dd0:	9204      	str	r2, [sp, #16]
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8010dd8:	e7af      	b.n	8010d3a <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8010dda:	9b04      	ldr	r3, [sp, #16]
 8010ddc:	1d1a      	adds	r2, r3, #4
 8010dde:	9204      	str	r2, [sp, #16]
 8010de0:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8010de4:	f1b8 0f00 	cmp.w	r8, #0
 8010de8:	d003      	beq.n	8010df2 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8010dea:	4640      	mov	r0, r8
 8010dec:	f7ef f9c4 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8010df0:	e006      	b.n	8010e00 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8010df2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8010ea4 <tiny_vsnprintf_like+0x184>
 8010df6:	e7f8      	b.n	8010dea <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8010df8:	2220      	movs	r2, #32
 8010dfa:	f804 2b01 	strb.w	r2, [r4], #1
 8010dfe:	461d      	mov	r5, r3
 8010e00:	1e6b      	subs	r3, r5, #1
 8010e02:	4285      	cmp	r5, r0
 8010e04:	dcf8      	bgt.n	8010df8 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8010e06:	2200      	movs	r2, #0
 8010e08:	e006      	b.n	8010e18 <tiny_vsnprintf_like+0xf8>
 8010e0a:	4643      	mov	r3, r8
 8010e0c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010e10:	f804 1b01 	strb.w	r1, [r4], #1
 8010e14:	3201      	adds	r2, #1
 8010e16:	4698      	mov	r8, r3
 8010e18:	4282      	cmp	r2, r0
 8010e1a:	dbf6      	blt.n	8010e0a <tiny_vsnprintf_like+0xea>
 8010e1c:	e78d      	b.n	8010d3a <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8010e1e:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8010e22:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8010e24:	f019 0f02 	tst.w	r9, #2
 8010e28:	d02f      	beq.n	8010e8a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8010e2a:	9a04      	ldr	r2, [sp, #16]
 8010e2c:	1d11      	adds	r1, r2, #4
 8010e2e:	9104      	str	r1, [sp, #16]
 8010e30:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010e32:	1ba1      	subs	r1, r4, r6
 8010e34:	f8cd 9008 	str.w	r9, [sp, #8]
 8010e38:	f04f 30ff 	mov.w	r0, #4294967295
 8010e3c:	9001      	str	r0, [sp, #4]
 8010e3e:	9500      	str	r5, [sp, #0]
 8010e40:	eba8 0101 	sub.w	r1, r8, r1
 8010e44:	4620      	mov	r0, r4
 8010e46:	f7ff fee1 	bl	8010c0c <ee_number>
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	e775      	b.n	8010d3a <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8010e4e:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8010e52:	230a      	movs	r3, #10
 8010e54:	e7e6      	b.n	8010e24 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8010e56:	2a25      	cmp	r2, #37	; 0x25
 8010e58:	d002      	beq.n	8010e60 <tiny_vsnprintf_like+0x140>
 8010e5a:	2325      	movs	r3, #37	; 0x25
 8010e5c:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8010e60:	1ba3      	subs	r3, r4, r6
 8010e62:	4598      	cmp	r8, r3
 8010e64:	dd0f      	ble.n	8010e86 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8010e66:	9b05      	ldr	r3, [sp, #20]
 8010e68:	781a      	ldrb	r2, [r3, #0]
 8010e6a:	b13a      	cbz	r2, 8010e7c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8010e6c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8010e70:	1ba3      	subs	r3, r4, r6
 8010e72:	4598      	cmp	r8, r3
 8010e74:	f73f af61 	bgt.w	8010d3a <tiny_vsnprintf_like+0x1a>
    base = 10;
 8010e78:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8010e7a:	e7d3      	b.n	8010e24 <tiny_vsnprintf_like+0x104>
          --fmt;
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	9305      	str	r3, [sp, #20]
 8010e80:	e7f6      	b.n	8010e70 <tiny_vsnprintf_like+0x150>
        base = 16;
 8010e82:	2310      	movs	r3, #16
 8010e84:	e7ce      	b.n	8010e24 <tiny_vsnprintf_like+0x104>
    base = 10;
 8010e86:	230a      	movs	r3, #10
 8010e88:	e7cc      	b.n	8010e24 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8010e8a:	9a04      	ldr	r2, [sp, #16]
 8010e8c:	1d11      	adds	r1, r2, #4
 8010e8e:	9104      	str	r1, [sp, #16]
 8010e90:	6812      	ldr	r2, [r2, #0]
 8010e92:	e7ce      	b.n	8010e32 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8010e94:	2300      	movs	r3, #0
 8010e96:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8010e98:	1ba0      	subs	r0, r4, r6
}
 8010e9a:	b007      	add	sp, #28
 8010e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	e7fa      	b.n	8010e9a <tiny_vsnprintf_like+0x17a>
 8010ea4:	08011ea4 	.word	0x08011ea4

08010ea8 <__libc_init_array>:
 8010ea8:	b570      	push	{r4, r5, r6, lr}
 8010eaa:	4d0d      	ldr	r5, [pc, #52]	; (8010ee0 <__libc_init_array+0x38>)
 8010eac:	4c0d      	ldr	r4, [pc, #52]	; (8010ee4 <__libc_init_array+0x3c>)
 8010eae:	1b64      	subs	r4, r4, r5
 8010eb0:	10a4      	asrs	r4, r4, #2
 8010eb2:	2600      	movs	r6, #0
 8010eb4:	42a6      	cmp	r6, r4
 8010eb6:	d109      	bne.n	8010ecc <__libc_init_array+0x24>
 8010eb8:	4d0b      	ldr	r5, [pc, #44]	; (8010ee8 <__libc_init_array+0x40>)
 8010eba:	4c0c      	ldr	r4, [pc, #48]	; (8010eec <__libc_init_array+0x44>)
 8010ebc:	f000 f8a0 	bl	8011000 <_init>
 8010ec0:	1b64      	subs	r4, r4, r5
 8010ec2:	10a4      	asrs	r4, r4, #2
 8010ec4:	2600      	movs	r6, #0
 8010ec6:	42a6      	cmp	r6, r4
 8010ec8:	d105      	bne.n	8010ed6 <__libc_init_array+0x2e>
 8010eca:	bd70      	pop	{r4, r5, r6, pc}
 8010ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ed0:	4798      	blx	r3
 8010ed2:	3601      	adds	r6, #1
 8010ed4:	e7ee      	b.n	8010eb4 <__libc_init_array+0xc>
 8010ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eda:	4798      	blx	r3
 8010edc:	3601      	adds	r6, #1
 8010ede:	e7f2      	b.n	8010ec6 <__libc_init_array+0x1e>
 8010ee0:	08011eb8 	.word	0x08011eb8
 8010ee4:	08011eb8 	.word	0x08011eb8
 8010ee8:	08011eb8 	.word	0x08011eb8
 8010eec:	08011ebc 	.word	0x08011ebc

08010ef0 <memset>:
 8010ef0:	4402      	add	r2, r0
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d100      	bne.n	8010efa <memset+0xa>
 8010ef8:	4770      	bx	lr
 8010efa:	f803 1b01 	strb.w	r1, [r3], #1
 8010efe:	e7f9      	b.n	8010ef4 <memset+0x4>

08010f00 <floor>:
 8010f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f04:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8010f08:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8010f0c:	2e13      	cmp	r6, #19
 8010f0e:	4602      	mov	r2, r0
 8010f10:	460b      	mov	r3, r1
 8010f12:	4607      	mov	r7, r0
 8010f14:	460c      	mov	r4, r1
 8010f16:	4605      	mov	r5, r0
 8010f18:	dc33      	bgt.n	8010f82 <floor+0x82>
 8010f1a:	2e00      	cmp	r6, #0
 8010f1c:	da14      	bge.n	8010f48 <floor+0x48>
 8010f1e:	a334      	add	r3, pc, #208	; (adr r3, 8010ff0 <floor+0xf0>)
 8010f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f24:	f7ef f936 	bl	8000194 <__adddf3>
 8010f28:	2200      	movs	r2, #0
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	f7ef fb66 	bl	80005fc <__aeabi_dcmpgt>
 8010f30:	b138      	cbz	r0, 8010f42 <floor+0x42>
 8010f32:	2c00      	cmp	r4, #0
 8010f34:	da58      	bge.n	8010fe8 <floor+0xe8>
 8010f36:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010f3a:	431d      	orrs	r5, r3
 8010f3c:	d001      	beq.n	8010f42 <floor+0x42>
 8010f3e:	4c2e      	ldr	r4, [pc, #184]	; (8010ff8 <floor+0xf8>)
 8010f40:	2500      	movs	r5, #0
 8010f42:	4623      	mov	r3, r4
 8010f44:	462f      	mov	r7, r5
 8010f46:	e025      	b.n	8010f94 <floor+0x94>
 8010f48:	4a2c      	ldr	r2, [pc, #176]	; (8010ffc <floor+0xfc>)
 8010f4a:	fa42 f806 	asr.w	r8, r2, r6
 8010f4e:	ea01 0208 	and.w	r2, r1, r8
 8010f52:	4302      	orrs	r2, r0
 8010f54:	d01e      	beq.n	8010f94 <floor+0x94>
 8010f56:	a326      	add	r3, pc, #152	; (adr r3, 8010ff0 <floor+0xf0>)
 8010f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5c:	f7ef f91a 	bl	8000194 <__adddf3>
 8010f60:	2200      	movs	r2, #0
 8010f62:	2300      	movs	r3, #0
 8010f64:	f7ef fb4a 	bl	80005fc <__aeabi_dcmpgt>
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	d0ea      	beq.n	8010f42 <floor+0x42>
 8010f6c:	2c00      	cmp	r4, #0
 8010f6e:	bfbe      	ittt	lt
 8010f70:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010f74:	fa43 f606 	asrlt.w	r6, r3, r6
 8010f78:	19a4      	addlt	r4, r4, r6
 8010f7a:	ea24 0408 	bic.w	r4, r4, r8
 8010f7e:	2500      	movs	r5, #0
 8010f80:	e7df      	b.n	8010f42 <floor+0x42>
 8010f82:	2e33      	cmp	r6, #51	; 0x33
 8010f84:	dd0a      	ble.n	8010f9c <floor+0x9c>
 8010f86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010f8a:	d103      	bne.n	8010f94 <floor+0x94>
 8010f8c:	f7ef f902 	bl	8000194 <__adddf3>
 8010f90:	4607      	mov	r7, r0
 8010f92:	460b      	mov	r3, r1
 8010f94:	4638      	mov	r0, r7
 8010f96:	4619      	mov	r1, r3
 8010f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f9c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8010fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fa4:	fa22 f808 	lsr.w	r8, r2, r8
 8010fa8:	ea18 0f00 	tst.w	r8, r0
 8010fac:	d0f2      	beq.n	8010f94 <floor+0x94>
 8010fae:	a310      	add	r3, pc, #64	; (adr r3, 8010ff0 <floor+0xf0>)
 8010fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb4:	f7ef f8ee 	bl	8000194 <__adddf3>
 8010fb8:	2200      	movs	r2, #0
 8010fba:	2300      	movs	r3, #0
 8010fbc:	f7ef fb1e 	bl	80005fc <__aeabi_dcmpgt>
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	d0be      	beq.n	8010f42 <floor+0x42>
 8010fc4:	2c00      	cmp	r4, #0
 8010fc6:	da02      	bge.n	8010fce <floor+0xce>
 8010fc8:	2e14      	cmp	r6, #20
 8010fca:	d103      	bne.n	8010fd4 <floor+0xd4>
 8010fcc:	3401      	adds	r4, #1
 8010fce:	ea25 0508 	bic.w	r5, r5, r8
 8010fd2:	e7b6      	b.n	8010f42 <floor+0x42>
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010fda:	fa03 f606 	lsl.w	r6, r3, r6
 8010fde:	4435      	add	r5, r6
 8010fe0:	42bd      	cmp	r5, r7
 8010fe2:	bf38      	it	cc
 8010fe4:	18e4      	addcc	r4, r4, r3
 8010fe6:	e7f2      	b.n	8010fce <floor+0xce>
 8010fe8:	2500      	movs	r5, #0
 8010fea:	462c      	mov	r4, r5
 8010fec:	e7a9      	b.n	8010f42 <floor+0x42>
 8010fee:	bf00      	nop
 8010ff0:	8800759c 	.word	0x8800759c
 8010ff4:	7e37e43c 	.word	0x7e37e43c
 8010ff8:	bff00000 	.word	0xbff00000
 8010ffc:	000fffff 	.word	0x000fffff

08011000 <_init>:
 8011000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011002:	bf00      	nop
 8011004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011006:	bc08      	pop	{r3}
 8011008:	469e      	mov	lr, r3
 801100a:	4770      	bx	lr

0801100c <_fini>:
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100e:	bf00      	nop
 8011010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011012:	bc08      	pop	{r3}
 8011014:	469e      	mov	lr, r3
 8011016:	4770      	bx	lr
